/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ConfigurationPathSubstitution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigurationPathSubstitution{}

// ConfigurationPathSubstitution struct for ConfigurationPathSubstitution
type ConfigurationPathSubstitution struct {
	From *string `json:"From,omitempty"`
	To *string `json:"To,omitempty"`
}

// NewConfigurationPathSubstitution instantiates a new ConfigurationPathSubstitution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationPathSubstitution() *ConfigurationPathSubstitution {
	this := ConfigurationPathSubstitution{}
	return &this
}

// NewConfigurationPathSubstitutionWithDefaults instantiates a new ConfigurationPathSubstitution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationPathSubstitutionWithDefaults() *ConfigurationPathSubstitution {
	this := ConfigurationPathSubstitution{}
	return &this
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *ConfigurationPathSubstitution) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationPathSubstitution) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *ConfigurationPathSubstitution) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *ConfigurationPathSubstitution) SetFrom(v string) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *ConfigurationPathSubstitution) GetTo() string {
	if o == nil || IsNil(o.To) {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationPathSubstitution) GetToOk() (*string, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *ConfigurationPathSubstitution) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *ConfigurationPathSubstitution) SetTo(v string) {
	o.To = &v
}

func (o ConfigurationPathSubstitution) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigurationPathSubstitution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.From) {
		toSerialize["From"] = o.From
	}
	if !IsNil(o.To) {
		toSerialize["To"] = o.To
	}
	return toSerialize, nil
}

type NullableConfigurationPathSubstitution struct {
	value *ConfigurationPathSubstitution
	isSet bool
}

func (v NullableConfigurationPathSubstitution) Get() *ConfigurationPathSubstitution {
	return v.value
}

func (v *NullableConfigurationPathSubstitution) Set(val *ConfigurationPathSubstitution) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationPathSubstitution) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationPathSubstitution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationPathSubstitution(val *ConfigurationPathSubstitution) *NullableConfigurationPathSubstitution {
	return &NullableConfigurationPathSubstitution{value: val, isSet: true}
}

func (v NullableConfigurationPathSubstitution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationPathSubstitution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


