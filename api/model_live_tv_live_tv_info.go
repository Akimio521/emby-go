/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the LiveTvLiveTvInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LiveTvLiveTvInfo{}

// LiveTvLiveTvInfo struct for LiveTvLiveTvInfo
type LiveTvLiveTvInfo struct {
	Services []LiveTvLiveTvServiceInfo `json:"Services,omitempty"`
	IsEnabled *bool `json:"IsEnabled,omitempty"`
	EnabledUsers []string `json:"EnabledUsers,omitempty"`
}

// NewLiveTvLiveTvInfo instantiates a new LiveTvLiveTvInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLiveTvLiveTvInfo() *LiveTvLiveTvInfo {
	this := LiveTvLiveTvInfo{}
	return &this
}

// NewLiveTvLiveTvInfoWithDefaults instantiates a new LiveTvLiveTvInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLiveTvLiveTvInfoWithDefaults() *LiveTvLiveTvInfo {
	this := LiveTvLiveTvInfo{}
	return &this
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *LiveTvLiveTvInfo) GetServices() []LiveTvLiveTvServiceInfo {
	if o == nil || IsNil(o.Services) {
		var ret []LiveTvLiveTvServiceInfo
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LiveTvLiveTvInfo) GetServicesOk() ([]LiveTvLiveTvServiceInfo, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *LiveTvLiveTvInfo) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []LiveTvLiveTvServiceInfo and assigns it to the Services field.
func (o *LiveTvLiveTvInfo) SetServices(v []LiveTvLiveTvServiceInfo) {
	o.Services = v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *LiveTvLiveTvInfo) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LiveTvLiveTvInfo) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *LiveTvLiveTvInfo) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *LiveTvLiveTvInfo) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetEnabledUsers returns the EnabledUsers field value if set, zero value otherwise.
func (o *LiveTvLiveTvInfo) GetEnabledUsers() []string {
	if o == nil || IsNil(o.EnabledUsers) {
		var ret []string
		return ret
	}
	return o.EnabledUsers
}

// GetEnabledUsersOk returns a tuple with the EnabledUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LiveTvLiveTvInfo) GetEnabledUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.EnabledUsers) {
		return nil, false
	}
	return o.EnabledUsers, true
}

// HasEnabledUsers returns a boolean if a field has been set.
func (o *LiveTvLiveTvInfo) HasEnabledUsers() bool {
	if o != nil && !IsNil(o.EnabledUsers) {
		return true
	}

	return false
}

// SetEnabledUsers gets a reference to the given []string and assigns it to the EnabledUsers field.
func (o *LiveTvLiveTvInfo) SetEnabledUsers(v []string) {
	o.EnabledUsers = v
}

func (o LiveTvLiveTvInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LiveTvLiveTvInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Services) {
		toSerialize["Services"] = o.Services
	}
	if !IsNil(o.IsEnabled) {
		toSerialize["IsEnabled"] = o.IsEnabled
	}
	if !IsNil(o.EnabledUsers) {
		toSerialize["EnabledUsers"] = o.EnabledUsers
	}
	return toSerialize, nil
}

type NullableLiveTvLiveTvInfo struct {
	value *LiveTvLiveTvInfo
	isSet bool
}

func (v NullableLiveTvLiveTvInfo) Get() *LiveTvLiveTvInfo {
	return v.value
}

func (v *NullableLiveTvLiveTvInfo) Set(val *LiveTvLiveTvInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableLiveTvLiveTvInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableLiveTvLiveTvInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLiveTvLiveTvInfo(val *LiveTvLiveTvInfo) *NullableLiveTvLiveTvInfo {
	return &NullableLiveTvLiveTvInfo{value: val, isSet: true}
}

func (v NullableLiveTvLiveTvInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLiveTvLiveTvInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


