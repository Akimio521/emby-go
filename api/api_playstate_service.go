/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type PlaystateServiceAPI interface {

	/*
	DeleteUsersByUseridPlayeditemsById Marks an item as unplayed

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId User Id
	@param id Item Id
	@return ApiDeleteUsersByUseridPlayeditemsByIdRequest
	*/
	DeleteUsersByUseridPlayeditemsById(ctx context.Context, userId string, id string) ApiDeleteUsersByUseridPlayeditemsByIdRequest

	// DeleteUsersByUseridPlayeditemsByIdExecute executes the request
	//  @return UserItemDataDto
	DeleteUsersByUseridPlayeditemsByIdExecute(r ApiDeleteUsersByUseridPlayeditemsByIdRequest) (*UserItemDataDto, *http.Response, error)

	/*
	DeleteUsersByUseridPlayingitemsById Reports that a user has stopped playing an item

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId User Id
	@param id Item Id
	@return ApiDeleteUsersByUseridPlayingitemsByIdRequest
	*/
	DeleteUsersByUseridPlayingitemsById(ctx context.Context, userId string, id string) ApiDeleteUsersByUseridPlayingitemsByIdRequest

	// DeleteUsersByUseridPlayingitemsByIdExecute executes the request
	DeleteUsersByUseridPlayingitemsByIdExecute(r ApiDeleteUsersByUseridPlayingitemsByIdRequest) (*http.Response, error)

	/*
	PostSessionsPlaying Reports playback has started within a session

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostSessionsPlayingRequest
	*/
	PostSessionsPlaying(ctx context.Context) ApiPostSessionsPlayingRequest

	// PostSessionsPlayingExecute executes the request
	PostSessionsPlayingExecute(r ApiPostSessionsPlayingRequest) (*http.Response, error)

	/*
	PostSessionsPlayingPing Pings a playback session

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostSessionsPlayingPingRequest
	*/
	PostSessionsPlayingPing(ctx context.Context) ApiPostSessionsPlayingPingRequest

	// PostSessionsPlayingPingExecute executes the request
	PostSessionsPlayingPingExecute(r ApiPostSessionsPlayingPingRequest) (*http.Response, error)

	/*
	PostSessionsPlayingProgress Reports playback progress within a session

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostSessionsPlayingProgressRequest
	*/
	PostSessionsPlayingProgress(ctx context.Context) ApiPostSessionsPlayingProgressRequest

	// PostSessionsPlayingProgressExecute executes the request
	PostSessionsPlayingProgressExecute(r ApiPostSessionsPlayingProgressRequest) (*http.Response, error)

	/*
	PostSessionsPlayingStopped Reports playback has stopped within a session

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostSessionsPlayingStoppedRequest
	*/
	PostSessionsPlayingStopped(ctx context.Context) ApiPostSessionsPlayingStoppedRequest

	// PostSessionsPlayingStoppedExecute executes the request
	PostSessionsPlayingStoppedExecute(r ApiPostSessionsPlayingStoppedRequest) (*http.Response, error)

	/*
	PostUsersByUseridPlayeditemsById Marks an item as played

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId User Id
	@param id Item Id
	@return ApiPostUsersByUseridPlayeditemsByIdRequest
	*/
	PostUsersByUseridPlayeditemsById(ctx context.Context, userId string, id string) ApiPostUsersByUseridPlayeditemsByIdRequest

	// PostUsersByUseridPlayeditemsByIdExecute executes the request
	//  @return UserItemDataDto
	PostUsersByUseridPlayeditemsByIdExecute(r ApiPostUsersByUseridPlayeditemsByIdRequest) (*UserItemDataDto, *http.Response, error)

	/*
	PostUsersByUseridPlayingitemsById Reports that a user has begun playing an item

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId User Id
	@param id Item Id
	@return ApiPostUsersByUseridPlayingitemsByIdRequest
	*/
	PostUsersByUseridPlayingitemsById(ctx context.Context, userId string, id string) ApiPostUsersByUseridPlayingitemsByIdRequest

	// PostUsersByUseridPlayingitemsByIdExecute executes the request
	PostUsersByUseridPlayingitemsByIdExecute(r ApiPostUsersByUseridPlayingitemsByIdRequest) (*http.Response, error)

	/*
	PostUsersByUseridPlayingitemsByIdProgress Reports a user's playback progress

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId User Id
	@param id Item Id
	@return ApiPostUsersByUseridPlayingitemsByIdProgressRequest
	*/
	PostUsersByUseridPlayingitemsByIdProgress(ctx context.Context, userId string, id string) ApiPostUsersByUseridPlayingitemsByIdProgressRequest

	// PostUsersByUseridPlayingitemsByIdProgressExecute executes the request
	PostUsersByUseridPlayingitemsByIdProgressExecute(r ApiPostUsersByUseridPlayingitemsByIdProgressRequest) (*http.Response, error)
}

// PlaystateServiceAPIService PlaystateServiceAPI service
type PlaystateServiceAPIService service

type ApiDeleteUsersByUseridPlayeditemsByIdRequest struct {
	ctx context.Context
	ApiService PlaystateServiceAPI
	userId string
	id string
}

func (r ApiDeleteUsersByUseridPlayeditemsByIdRequest) Execute() (*UserItemDataDto, *http.Response, error) {
	return r.ApiService.DeleteUsersByUseridPlayeditemsByIdExecute(r)
}

/*
DeleteUsersByUseridPlayeditemsById Marks an item as unplayed

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @param id Item Id
 @return ApiDeleteUsersByUseridPlayeditemsByIdRequest
*/
func (a *PlaystateServiceAPIService) DeleteUsersByUseridPlayeditemsById(ctx context.Context, userId string, id string) ApiDeleteUsersByUseridPlayeditemsByIdRequest {
	return ApiDeleteUsersByUseridPlayeditemsByIdRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		id: id,
	}
}

// Execute executes the request
//  @return UserItemDataDto
func (a *PlaystateServiceAPIService) DeleteUsersByUseridPlayeditemsByIdExecute(r ApiDeleteUsersByUseridPlayeditemsByIdRequest) (*UserItemDataDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserItemDataDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateServiceAPIService.DeleteUsersByUseridPlayeditemsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/PlayedItems/{Id}"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteUsersByUseridPlayingitemsByIdRequest struct {
	ctx context.Context
	ApiService PlaystateServiceAPI
	userId string
	id string
	mediaSourceId *string
	nextMediaType *string
	positionTicks *int64
	liveStreamId *string
	playSessionId *string
}

// The id of the MediaSource
func (r ApiDeleteUsersByUseridPlayingitemsByIdRequest) MediaSourceId(mediaSourceId string) ApiDeleteUsersByUseridPlayingitemsByIdRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

// The next media type that will play
func (r ApiDeleteUsersByUseridPlayingitemsByIdRequest) NextMediaType(nextMediaType string) ApiDeleteUsersByUseridPlayingitemsByIdRequest {
	r.nextMediaType = &nextMediaType
	return r
}

// Optional. The position, in ticks, where playback stopped. 1 tick &#x3D; 10000 ms
func (r ApiDeleteUsersByUseridPlayingitemsByIdRequest) PositionTicks(positionTicks int64) ApiDeleteUsersByUseridPlayingitemsByIdRequest {
	r.positionTicks = &positionTicks
	return r
}

func (r ApiDeleteUsersByUseridPlayingitemsByIdRequest) LiveStreamId(liveStreamId string) ApiDeleteUsersByUseridPlayingitemsByIdRequest {
	r.liveStreamId = &liveStreamId
	return r
}

func (r ApiDeleteUsersByUseridPlayingitemsByIdRequest) PlaySessionId(playSessionId string) ApiDeleteUsersByUseridPlayingitemsByIdRequest {
	r.playSessionId = &playSessionId
	return r
}

func (r ApiDeleteUsersByUseridPlayingitemsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteUsersByUseridPlayingitemsByIdExecute(r)
}

/*
DeleteUsersByUseridPlayingitemsById Reports that a user has stopped playing an item

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @param id Item Id
 @return ApiDeleteUsersByUseridPlayingitemsByIdRequest
*/
func (a *PlaystateServiceAPIService) DeleteUsersByUseridPlayingitemsById(ctx context.Context, userId string, id string) ApiDeleteUsersByUseridPlayingitemsByIdRequest {
	return ApiDeleteUsersByUseridPlayingitemsByIdRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		id: id,
	}
}

// Execute executes the request
func (a *PlaystateServiceAPIService) DeleteUsersByUseridPlayingitemsByIdExecute(r ApiDeleteUsersByUseridPlayingitemsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateServiceAPIService.DeleteUsersByUseridPlayingitemsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/PlayingItems/{Id}"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.mediaSourceId == nil {
		return nil, reportError("mediaSourceId is required and must be specified")
	}
	if r.nextMediaType == nil {
		return nil, reportError("nextMediaType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "MediaSourceId", r.mediaSourceId, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "NextMediaType", r.nextMediaType, "form", "")
	if r.positionTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PositionTicks", r.positionTicks, "form", "")
	}
	if r.liveStreamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "LiveStreamId", r.liveStreamId, "form", "")
	}
	if r.playSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PlaySessionId", r.playSessionId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostSessionsPlayingRequest struct {
	ctx context.Context
	ApiService PlaystateServiceAPI
	playbackStartInfo *PlaybackStartInfo
}

// PlaybackStartInfo: 
func (r ApiPostSessionsPlayingRequest) PlaybackStartInfo(playbackStartInfo PlaybackStartInfo) ApiPostSessionsPlayingRequest {
	r.playbackStartInfo = &playbackStartInfo
	return r
}

func (r ApiPostSessionsPlayingRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostSessionsPlayingExecute(r)
}

/*
PostSessionsPlaying Reports playback has started within a session

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSessionsPlayingRequest
*/
func (a *PlaystateServiceAPIService) PostSessionsPlaying(ctx context.Context) ApiPostSessionsPlayingRequest {
	return ApiPostSessionsPlayingRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PlaystateServiceAPIService) PostSessionsPlayingExecute(r ApiPostSessionsPlayingRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateServiceAPIService.PostSessionsPlaying")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Sessions/Playing"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.playbackStartInfo == nil {
		return nil, reportError("playbackStartInfo is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.playbackStartInfo
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostSessionsPlayingPingRequest struct {
	ctx context.Context
	ApiService PlaystateServiceAPI
	playSessionId *string
}

func (r ApiPostSessionsPlayingPingRequest) PlaySessionId(playSessionId string) ApiPostSessionsPlayingPingRequest {
	r.playSessionId = &playSessionId
	return r
}

func (r ApiPostSessionsPlayingPingRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostSessionsPlayingPingExecute(r)
}

/*
PostSessionsPlayingPing Pings a playback session

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSessionsPlayingPingRequest
*/
func (a *PlaystateServiceAPIService) PostSessionsPlayingPing(ctx context.Context) ApiPostSessionsPlayingPingRequest {
	return ApiPostSessionsPlayingPingRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PlaystateServiceAPIService) PostSessionsPlayingPingExecute(r ApiPostSessionsPlayingPingRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateServiceAPIService.PostSessionsPlayingPing")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Sessions/Playing/Ping"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.playSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PlaySessionId", r.playSessionId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostSessionsPlayingProgressRequest struct {
	ctx context.Context
	ApiService PlaystateServiceAPI
	playbackProgressInfo *PlaybackProgressInfo
}

// PlaybackProgressInfo: 
func (r ApiPostSessionsPlayingProgressRequest) PlaybackProgressInfo(playbackProgressInfo PlaybackProgressInfo) ApiPostSessionsPlayingProgressRequest {
	r.playbackProgressInfo = &playbackProgressInfo
	return r
}

func (r ApiPostSessionsPlayingProgressRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostSessionsPlayingProgressExecute(r)
}

/*
PostSessionsPlayingProgress Reports playback progress within a session

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSessionsPlayingProgressRequest
*/
func (a *PlaystateServiceAPIService) PostSessionsPlayingProgress(ctx context.Context) ApiPostSessionsPlayingProgressRequest {
	return ApiPostSessionsPlayingProgressRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PlaystateServiceAPIService) PostSessionsPlayingProgressExecute(r ApiPostSessionsPlayingProgressRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateServiceAPIService.PostSessionsPlayingProgress")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Sessions/Playing/Progress"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.playbackProgressInfo == nil {
		return nil, reportError("playbackProgressInfo is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.playbackProgressInfo
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostSessionsPlayingStoppedRequest struct {
	ctx context.Context
	ApiService PlaystateServiceAPI
	playbackStopInfo *PlaybackStopInfo
}

// PlaybackStopInfo: 
func (r ApiPostSessionsPlayingStoppedRequest) PlaybackStopInfo(playbackStopInfo PlaybackStopInfo) ApiPostSessionsPlayingStoppedRequest {
	r.playbackStopInfo = &playbackStopInfo
	return r
}

func (r ApiPostSessionsPlayingStoppedRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostSessionsPlayingStoppedExecute(r)
}

/*
PostSessionsPlayingStopped Reports playback has stopped within a session

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSessionsPlayingStoppedRequest
*/
func (a *PlaystateServiceAPIService) PostSessionsPlayingStopped(ctx context.Context) ApiPostSessionsPlayingStoppedRequest {
	return ApiPostSessionsPlayingStoppedRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PlaystateServiceAPIService) PostSessionsPlayingStoppedExecute(r ApiPostSessionsPlayingStoppedRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateServiceAPIService.PostSessionsPlayingStopped")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Sessions/Playing/Stopped"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.playbackStopInfo == nil {
		return nil, reportError("playbackStopInfo is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.playbackStopInfo
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostUsersByUseridPlayeditemsByIdRequest struct {
	ctx context.Context
	ApiService PlaystateServiceAPI
	userId string
	id string
	datePlayed *string
}

// The date the item was played (if any). Format &#x3D; yyyyMMddHHmmss
func (r ApiPostUsersByUseridPlayeditemsByIdRequest) DatePlayed(datePlayed string) ApiPostUsersByUseridPlayeditemsByIdRequest {
	r.datePlayed = &datePlayed
	return r
}

func (r ApiPostUsersByUseridPlayeditemsByIdRequest) Execute() (*UserItemDataDto, *http.Response, error) {
	return r.ApiService.PostUsersByUseridPlayeditemsByIdExecute(r)
}

/*
PostUsersByUseridPlayeditemsById Marks an item as played

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @param id Item Id
 @return ApiPostUsersByUseridPlayeditemsByIdRequest
*/
func (a *PlaystateServiceAPIService) PostUsersByUseridPlayeditemsById(ctx context.Context, userId string, id string) ApiPostUsersByUseridPlayeditemsByIdRequest {
	return ApiPostUsersByUseridPlayeditemsByIdRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		id: id,
	}
}

// Execute executes the request
//  @return UserItemDataDto
func (a *PlaystateServiceAPIService) PostUsersByUseridPlayeditemsByIdExecute(r ApiPostUsersByUseridPlayeditemsByIdRequest) (*UserItemDataDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserItemDataDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateServiceAPIService.PostUsersByUseridPlayeditemsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/PlayedItems/{Id}"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.datePlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DatePlayed", r.datePlayed, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostUsersByUseridPlayingitemsByIdRequest struct {
	ctx context.Context
	ApiService PlaystateServiceAPI
	userId string
	id string
	mediaSourceId *string
	canSeek *bool
	audioStreamIndex *int32
	subtitleStreamIndex *int32
	playMethod *string
	liveStreamId *string
	playSessionId *string
}

// The id of the MediaSource
func (r ApiPostUsersByUseridPlayingitemsByIdRequest) MediaSourceId(mediaSourceId string) ApiPostUsersByUseridPlayingitemsByIdRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

// Indicates if the client can seek
func (r ApiPostUsersByUseridPlayingitemsByIdRequest) CanSeek(canSeek bool) ApiPostUsersByUseridPlayingitemsByIdRequest {
	r.canSeek = &canSeek
	return r
}

func (r ApiPostUsersByUseridPlayingitemsByIdRequest) AudioStreamIndex(audioStreamIndex int32) ApiPostUsersByUseridPlayingitemsByIdRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

func (r ApiPostUsersByUseridPlayingitemsByIdRequest) SubtitleStreamIndex(subtitleStreamIndex int32) ApiPostUsersByUseridPlayingitemsByIdRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

func (r ApiPostUsersByUseridPlayingitemsByIdRequest) PlayMethod(playMethod string) ApiPostUsersByUseridPlayingitemsByIdRequest {
	r.playMethod = &playMethod
	return r
}

func (r ApiPostUsersByUseridPlayingitemsByIdRequest) LiveStreamId(liveStreamId string) ApiPostUsersByUseridPlayingitemsByIdRequest {
	r.liveStreamId = &liveStreamId
	return r
}

func (r ApiPostUsersByUseridPlayingitemsByIdRequest) PlaySessionId(playSessionId string) ApiPostUsersByUseridPlayingitemsByIdRequest {
	r.playSessionId = &playSessionId
	return r
}

func (r ApiPostUsersByUseridPlayingitemsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostUsersByUseridPlayingitemsByIdExecute(r)
}

/*
PostUsersByUseridPlayingitemsById Reports that a user has begun playing an item

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @param id Item Id
 @return ApiPostUsersByUseridPlayingitemsByIdRequest
*/
func (a *PlaystateServiceAPIService) PostUsersByUseridPlayingitemsById(ctx context.Context, userId string, id string) ApiPostUsersByUseridPlayingitemsByIdRequest {
	return ApiPostUsersByUseridPlayingitemsByIdRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		id: id,
	}
}

// Execute executes the request
func (a *PlaystateServiceAPIService) PostUsersByUseridPlayingitemsByIdExecute(r ApiPostUsersByUseridPlayingitemsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateServiceAPIService.PostUsersByUseridPlayingitemsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/PlayingItems/{Id}"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.mediaSourceId == nil {
		return nil, reportError("mediaSourceId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "MediaSourceId", r.mediaSourceId, "form", "")
	if r.canSeek != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CanSeek", r.canSeek, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.playMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PlayMethod", r.playMethod, "form", "")
	}
	if r.liveStreamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "LiveStreamId", r.liveStreamId, "form", "")
	}
	if r.playSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PlaySessionId", r.playSessionId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostUsersByUseridPlayingitemsByIdProgressRequest struct {
	ctx context.Context
	ApiService PlaystateServiceAPI
	userId string
	id string
	mediaSourceId *string
	positionTicks *int64
	isPaused *bool
	isMuted *bool
	audioStreamIndex *int32
	subtitleStreamIndex *int32
	volumeLevel *int32
	playMethod *string
	liveStreamId *string
	playSessionId *string
	repeatMode *string
}

// The id of the MediaSource
func (r ApiPostUsersByUseridPlayingitemsByIdProgressRequest) MediaSourceId(mediaSourceId string) ApiPostUsersByUseridPlayingitemsByIdProgressRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

// Optional. The current position, in ticks. 1 tick &#x3D; 10000 ms
func (r ApiPostUsersByUseridPlayingitemsByIdProgressRequest) PositionTicks(positionTicks int64) ApiPostUsersByUseridPlayingitemsByIdProgressRequest {
	r.positionTicks = &positionTicks
	return r
}

// Indicates if the player is paused.
func (r ApiPostUsersByUseridPlayingitemsByIdProgressRequest) IsPaused(isPaused bool) ApiPostUsersByUseridPlayingitemsByIdProgressRequest {
	r.isPaused = &isPaused
	return r
}

// Indicates if the player is muted.
func (r ApiPostUsersByUseridPlayingitemsByIdProgressRequest) IsMuted(isMuted bool) ApiPostUsersByUseridPlayingitemsByIdProgressRequest {
	r.isMuted = &isMuted
	return r
}

func (r ApiPostUsersByUseridPlayingitemsByIdProgressRequest) AudioStreamIndex(audioStreamIndex int32) ApiPostUsersByUseridPlayingitemsByIdProgressRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

func (r ApiPostUsersByUseridPlayingitemsByIdProgressRequest) SubtitleStreamIndex(subtitleStreamIndex int32) ApiPostUsersByUseridPlayingitemsByIdProgressRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Scale of 0-100
func (r ApiPostUsersByUseridPlayingitemsByIdProgressRequest) VolumeLevel(volumeLevel int32) ApiPostUsersByUseridPlayingitemsByIdProgressRequest {
	r.volumeLevel = &volumeLevel
	return r
}

func (r ApiPostUsersByUseridPlayingitemsByIdProgressRequest) PlayMethod(playMethod string) ApiPostUsersByUseridPlayingitemsByIdProgressRequest {
	r.playMethod = &playMethod
	return r
}

func (r ApiPostUsersByUseridPlayingitemsByIdProgressRequest) LiveStreamId(liveStreamId string) ApiPostUsersByUseridPlayingitemsByIdProgressRequest {
	r.liveStreamId = &liveStreamId
	return r
}

func (r ApiPostUsersByUseridPlayingitemsByIdProgressRequest) PlaySessionId(playSessionId string) ApiPostUsersByUseridPlayingitemsByIdProgressRequest {
	r.playSessionId = &playSessionId
	return r
}

func (r ApiPostUsersByUseridPlayingitemsByIdProgressRequest) RepeatMode(repeatMode string) ApiPostUsersByUseridPlayingitemsByIdProgressRequest {
	r.repeatMode = &repeatMode
	return r
}

func (r ApiPostUsersByUseridPlayingitemsByIdProgressRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostUsersByUseridPlayingitemsByIdProgressExecute(r)
}

/*
PostUsersByUseridPlayingitemsByIdProgress Reports a user's playback progress

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @param id Item Id
 @return ApiPostUsersByUseridPlayingitemsByIdProgressRequest
*/
func (a *PlaystateServiceAPIService) PostUsersByUseridPlayingitemsByIdProgress(ctx context.Context, userId string, id string) ApiPostUsersByUseridPlayingitemsByIdProgressRequest {
	return ApiPostUsersByUseridPlayingitemsByIdProgressRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		id: id,
	}
}

// Execute executes the request
func (a *PlaystateServiceAPIService) PostUsersByUseridPlayingitemsByIdProgressExecute(r ApiPostUsersByUseridPlayingitemsByIdProgressRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateServiceAPIService.PostUsersByUseridPlayingitemsByIdProgress")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/PlayingItems/{Id}/Progress"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.mediaSourceId == nil {
		return nil, reportError("mediaSourceId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "MediaSourceId", r.mediaSourceId, "form", "")
	if r.positionTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PositionTicks", r.positionTicks, "form", "")
	}
	if r.isPaused != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsPaused", r.isPaused, "form", "")
	}
	if r.isMuted != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsMuted", r.isMuted, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.volumeLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VolumeLevel", r.volumeLevel, "form", "")
	}
	if r.playMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PlayMethod", r.playMethod, "form", "")
	}
	if r.liveStreamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "LiveStreamId", r.liveStreamId, "form", "")
	}
	if r.playSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PlaySessionId", r.playSessionId, "form", "")
	}
	if r.repeatMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "RepeatMode", r.repeatMode, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
