/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the EmbyReportsApiModelReportResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbyReportsApiModelReportResult{}

// EmbyReportsApiModelReportResult struct for EmbyReportsApiModelReportResult
type EmbyReportsApiModelReportResult struct {
	Rows []EmbyReportsApiModelReportRow `json:"Rows,omitempty"`
	Headers []EmbyReportsApiModelReportHeader `json:"Headers,omitempty"`
	Groups []EmbyReportsApiModelReportGroup `json:"Groups,omitempty"`
	TotalRecordCount *int32 `json:"TotalRecordCount,omitempty"`
	IsGrouped *bool `json:"IsGrouped,omitempty"`
}

// NewEmbyReportsApiModelReportResult instantiates a new EmbyReportsApiModelReportResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbyReportsApiModelReportResult() *EmbyReportsApiModelReportResult {
	this := EmbyReportsApiModelReportResult{}
	return &this
}

// NewEmbyReportsApiModelReportResultWithDefaults instantiates a new EmbyReportsApiModelReportResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbyReportsApiModelReportResultWithDefaults() *EmbyReportsApiModelReportResult {
	this := EmbyReportsApiModelReportResult{}
	return &this
}

// GetRows returns the Rows field value if set, zero value otherwise.
func (o *EmbyReportsApiModelReportResult) GetRows() []EmbyReportsApiModelReportRow {
	if o == nil || IsNil(o.Rows) {
		var ret []EmbyReportsApiModelReportRow
		return ret
	}
	return o.Rows
}

// GetRowsOk returns a tuple with the Rows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbyReportsApiModelReportResult) GetRowsOk() ([]EmbyReportsApiModelReportRow, bool) {
	if o == nil || IsNil(o.Rows) {
		return nil, false
	}
	return o.Rows, true
}

// HasRows returns a boolean if a field has been set.
func (o *EmbyReportsApiModelReportResult) HasRows() bool {
	if o != nil && !IsNil(o.Rows) {
		return true
	}

	return false
}

// SetRows gets a reference to the given []EmbyReportsApiModelReportRow and assigns it to the Rows field.
func (o *EmbyReportsApiModelReportResult) SetRows(v []EmbyReportsApiModelReportRow) {
	o.Rows = v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *EmbyReportsApiModelReportResult) GetHeaders() []EmbyReportsApiModelReportHeader {
	if o == nil || IsNil(o.Headers) {
		var ret []EmbyReportsApiModelReportHeader
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbyReportsApiModelReportResult) GetHeadersOk() ([]EmbyReportsApiModelReportHeader, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *EmbyReportsApiModelReportResult) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given []EmbyReportsApiModelReportHeader and assigns it to the Headers field.
func (o *EmbyReportsApiModelReportResult) SetHeaders(v []EmbyReportsApiModelReportHeader) {
	o.Headers = v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *EmbyReportsApiModelReportResult) GetGroups() []EmbyReportsApiModelReportGroup {
	if o == nil || IsNil(o.Groups) {
		var ret []EmbyReportsApiModelReportGroup
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbyReportsApiModelReportResult) GetGroupsOk() ([]EmbyReportsApiModelReportGroup, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *EmbyReportsApiModelReportResult) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []EmbyReportsApiModelReportGroup and assigns it to the Groups field.
func (o *EmbyReportsApiModelReportResult) SetGroups(v []EmbyReportsApiModelReportGroup) {
	o.Groups = v
}

// GetTotalRecordCount returns the TotalRecordCount field value if set, zero value otherwise.
func (o *EmbyReportsApiModelReportResult) GetTotalRecordCount() int32 {
	if o == nil || IsNil(o.TotalRecordCount) {
		var ret int32
		return ret
	}
	return *o.TotalRecordCount
}

// GetTotalRecordCountOk returns a tuple with the TotalRecordCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbyReportsApiModelReportResult) GetTotalRecordCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalRecordCount) {
		return nil, false
	}
	return o.TotalRecordCount, true
}

// HasTotalRecordCount returns a boolean if a field has been set.
func (o *EmbyReportsApiModelReportResult) HasTotalRecordCount() bool {
	if o != nil && !IsNil(o.TotalRecordCount) {
		return true
	}

	return false
}

// SetTotalRecordCount gets a reference to the given int32 and assigns it to the TotalRecordCount field.
func (o *EmbyReportsApiModelReportResult) SetTotalRecordCount(v int32) {
	o.TotalRecordCount = &v
}

// GetIsGrouped returns the IsGrouped field value if set, zero value otherwise.
func (o *EmbyReportsApiModelReportResult) GetIsGrouped() bool {
	if o == nil || IsNil(o.IsGrouped) {
		var ret bool
		return ret
	}
	return *o.IsGrouped
}

// GetIsGroupedOk returns a tuple with the IsGrouped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbyReportsApiModelReportResult) GetIsGroupedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsGrouped) {
		return nil, false
	}
	return o.IsGrouped, true
}

// HasIsGrouped returns a boolean if a field has been set.
func (o *EmbyReportsApiModelReportResult) HasIsGrouped() bool {
	if o != nil && !IsNil(o.IsGrouped) {
		return true
	}

	return false
}

// SetIsGrouped gets a reference to the given bool and assigns it to the IsGrouped field.
func (o *EmbyReportsApiModelReportResult) SetIsGrouped(v bool) {
	o.IsGrouped = &v
}

func (o EmbyReportsApiModelReportResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbyReportsApiModelReportResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Rows) {
		toSerialize["Rows"] = o.Rows
	}
	if !IsNil(o.Headers) {
		toSerialize["Headers"] = o.Headers
	}
	if !IsNil(o.Groups) {
		toSerialize["Groups"] = o.Groups
	}
	if !IsNil(o.TotalRecordCount) {
		toSerialize["TotalRecordCount"] = o.TotalRecordCount
	}
	if !IsNil(o.IsGrouped) {
		toSerialize["IsGrouped"] = o.IsGrouped
	}
	return toSerialize, nil
}

type NullableEmbyReportsApiModelReportResult struct {
	value *EmbyReportsApiModelReportResult
	isSet bool
}

func (v NullableEmbyReportsApiModelReportResult) Get() *EmbyReportsApiModelReportResult {
	return v.value
}

func (v *NullableEmbyReportsApiModelReportResult) Set(val *EmbyReportsApiModelReportResult) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbyReportsApiModelReportResult) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbyReportsApiModelReportResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbyReportsApiModelReportResult(val *EmbyReportsApiModelReportResult) *NullableEmbyReportsApiModelReportResult {
	return &NullableEmbyReportsApiModelReportResult{value: val, isSet: true}
}

func (v NullableEmbyReportsApiModelReportResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbyReportsApiModelReportResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


