/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the MediaInfoLiveStreamResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaInfoLiveStreamResponse{}

// MediaInfoLiveStreamResponse struct for MediaInfoLiveStreamResponse
type MediaInfoLiveStreamResponse struct {
	MediaSource *MediaSourceInfo `json:"MediaSource,omitempty"`
}

// NewMediaInfoLiveStreamResponse instantiates a new MediaInfoLiveStreamResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaInfoLiveStreamResponse() *MediaInfoLiveStreamResponse {
	this := MediaInfoLiveStreamResponse{}
	return &this
}

// NewMediaInfoLiveStreamResponseWithDefaults instantiates a new MediaInfoLiveStreamResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaInfoLiveStreamResponseWithDefaults() *MediaInfoLiveStreamResponse {
	this := MediaInfoLiveStreamResponse{}
	return &this
}

// GetMediaSource returns the MediaSource field value if set, zero value otherwise.
func (o *MediaInfoLiveStreamResponse) GetMediaSource() MediaSourceInfo {
	if o == nil || IsNil(o.MediaSource) {
		var ret MediaSourceInfo
		return ret
	}
	return *o.MediaSource
}

// GetMediaSourceOk returns a tuple with the MediaSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaInfoLiveStreamResponse) GetMediaSourceOk() (*MediaSourceInfo, bool) {
	if o == nil || IsNil(o.MediaSource) {
		return nil, false
	}
	return o.MediaSource, true
}

// HasMediaSource returns a boolean if a field has been set.
func (o *MediaInfoLiveStreamResponse) HasMediaSource() bool {
	if o != nil && !IsNil(o.MediaSource) {
		return true
	}

	return false
}

// SetMediaSource gets a reference to the given MediaSourceInfo and assigns it to the MediaSource field.
func (o *MediaInfoLiveStreamResponse) SetMediaSource(v MediaSourceInfo) {
	o.MediaSource = &v
}

func (o MediaInfoLiveStreamResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaInfoLiveStreamResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MediaSource) {
		toSerialize["MediaSource"] = o.MediaSource
	}
	return toSerialize, nil
}

type NullableMediaInfoLiveStreamResponse struct {
	value *MediaInfoLiveStreamResponse
	isSet bool
}

func (v NullableMediaInfoLiveStreamResponse) Get() *MediaInfoLiveStreamResponse {
	return v.value
}

func (v *NullableMediaInfoLiveStreamResponse) Set(val *MediaInfoLiveStreamResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaInfoLiveStreamResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaInfoLiveStreamResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaInfoLiveStreamResponse(val *MediaInfoLiveStreamResponse) *NullableMediaInfoLiveStreamResponse {
	return &NullableMediaInfoLiveStreamResponse{value: val, isSet: true}
}

func (v NullableMediaInfoLiveStreamResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaInfoLiveStreamResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


