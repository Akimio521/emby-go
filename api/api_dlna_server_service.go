/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


type DlnaServerServiceAPI interface {

	/*
	GetDlnaByUuidConnectionmanagerConnectionmanager Gets dlna connection manager xml

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuId Server UuId
	@return ApiGetDlnaByUuidConnectionmanagerConnectionmanagerRequest
	*/
	GetDlnaByUuidConnectionmanagerConnectionmanager(ctx context.Context, uuId string) ApiGetDlnaByUuidConnectionmanagerConnectionmanagerRequest

	// GetDlnaByUuidConnectionmanagerConnectionmanagerExecute executes the request
	GetDlnaByUuidConnectionmanagerConnectionmanagerExecute(r ApiGetDlnaByUuidConnectionmanagerConnectionmanagerRequest) (*http.Response, error)

	/*
	GetDlnaByUuidConnectionmanagerConnectionmanagerXml Gets dlna connection manager xml

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuId Server UuId
	@return ApiGetDlnaByUuidConnectionmanagerConnectionmanagerXmlRequest
	*/
	GetDlnaByUuidConnectionmanagerConnectionmanagerXml(ctx context.Context, uuId string) ApiGetDlnaByUuidConnectionmanagerConnectionmanagerXmlRequest

	// GetDlnaByUuidConnectionmanagerConnectionmanagerXmlExecute executes the request
	GetDlnaByUuidConnectionmanagerConnectionmanagerXmlExecute(r ApiGetDlnaByUuidConnectionmanagerConnectionmanagerXmlRequest) (*http.Response, error)

	/*
	GetDlnaByUuidContentdirectoryContentdirectory Gets dlna content directory xml

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuId Server UuId
	@return ApiGetDlnaByUuidContentdirectoryContentdirectoryRequest
	*/
	GetDlnaByUuidContentdirectoryContentdirectory(ctx context.Context, uuId string) ApiGetDlnaByUuidContentdirectoryContentdirectoryRequest

	// GetDlnaByUuidContentdirectoryContentdirectoryExecute executes the request
	GetDlnaByUuidContentdirectoryContentdirectoryExecute(r ApiGetDlnaByUuidContentdirectoryContentdirectoryRequest) (*http.Response, error)

	/*
	GetDlnaByUuidContentdirectoryContentdirectoryXml Gets dlna content directory xml

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuId Server UuId
	@return ApiGetDlnaByUuidContentdirectoryContentdirectoryXmlRequest
	*/
	GetDlnaByUuidContentdirectoryContentdirectoryXml(ctx context.Context, uuId string) ApiGetDlnaByUuidContentdirectoryContentdirectoryXmlRequest

	// GetDlnaByUuidContentdirectoryContentdirectoryXmlExecute executes the request
	GetDlnaByUuidContentdirectoryContentdirectoryXmlExecute(r ApiGetDlnaByUuidContentdirectoryContentdirectoryXmlRequest) (*http.Response, error)

	/*
	GetDlnaByUuidDescription Gets dlna server info

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuId Server UuId
	@return ApiGetDlnaByUuidDescriptionRequest
	*/
	GetDlnaByUuidDescription(ctx context.Context, uuId string) ApiGetDlnaByUuidDescriptionRequest

	// GetDlnaByUuidDescriptionExecute executes the request
	GetDlnaByUuidDescriptionExecute(r ApiGetDlnaByUuidDescriptionRequest) (*http.Response, error)

	/*
	GetDlnaByUuidDescriptionXml Gets dlna server info

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuId Server UuId
	@return ApiGetDlnaByUuidDescriptionXmlRequest
	*/
	GetDlnaByUuidDescriptionXml(ctx context.Context, uuId string) ApiGetDlnaByUuidDescriptionXmlRequest

	// GetDlnaByUuidDescriptionXmlExecute executes the request
	GetDlnaByUuidDescriptionXmlExecute(r ApiGetDlnaByUuidDescriptionXmlRequest) (*http.Response, error)

	/*
	GetDlnaByUuidIconsByFilename Gets a server icon

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuId Server UuId
	@param filename The icon filename
	@return ApiGetDlnaByUuidIconsByFilenameRequest
	*/
	GetDlnaByUuidIconsByFilename(ctx context.Context, uuId string, filename string) ApiGetDlnaByUuidIconsByFilenameRequest

	// GetDlnaByUuidIconsByFilenameExecute executes the request
	GetDlnaByUuidIconsByFilenameExecute(r ApiGetDlnaByUuidIconsByFilenameRequest) (*http.Response, error)

	/*
	GetDlnaIconsByFilename Gets a server icon

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param filename The icon filename
	@return ApiGetDlnaIconsByFilenameRequest
	*/
	GetDlnaIconsByFilename(ctx context.Context, filename string) ApiGetDlnaIconsByFilenameRequest

	// GetDlnaIconsByFilenameExecute executes the request
	GetDlnaIconsByFilenameExecute(r ApiGetDlnaIconsByFilenameRequest) (*http.Response, error)

	/*
	PostDlnaByUuidConnectionmanagerControl Processes a control request

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuId Server UuId
	@return ApiPostDlnaByUuidConnectionmanagerControlRequest
	*/
	PostDlnaByUuidConnectionmanagerControl(ctx context.Context, uuId string) ApiPostDlnaByUuidConnectionmanagerControlRequest

	// PostDlnaByUuidConnectionmanagerControlExecute executes the request
	PostDlnaByUuidConnectionmanagerControlExecute(r ApiPostDlnaByUuidConnectionmanagerControlRequest) (*http.Response, error)

	/*
	PostDlnaByUuidContentdirectoryControl Processes a control request

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuId Server UuId
	@return ApiPostDlnaByUuidContentdirectoryControlRequest
	*/
	PostDlnaByUuidContentdirectoryControl(ctx context.Context, uuId string) ApiPostDlnaByUuidContentdirectoryControlRequest

	// PostDlnaByUuidContentdirectoryControlExecute executes the request
	PostDlnaByUuidContentdirectoryControlExecute(r ApiPostDlnaByUuidContentdirectoryControlRequest) (*http.Response, error)
}

// DlnaServerServiceAPIService DlnaServerServiceAPI service
type DlnaServerServiceAPIService service

type ApiGetDlnaByUuidConnectionmanagerConnectionmanagerRequest struct {
	ctx context.Context
	ApiService DlnaServerServiceAPI
	uuId string
}

func (r ApiGetDlnaByUuidConnectionmanagerConnectionmanagerRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetDlnaByUuidConnectionmanagerConnectionmanagerExecute(r)
}

/*
GetDlnaByUuidConnectionmanagerConnectionmanager Gets dlna connection manager xml

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuId Server UuId
 @return ApiGetDlnaByUuidConnectionmanagerConnectionmanagerRequest
*/
func (a *DlnaServerServiceAPIService) GetDlnaByUuidConnectionmanagerConnectionmanager(ctx context.Context, uuId string) ApiGetDlnaByUuidConnectionmanagerConnectionmanagerRequest {
	return ApiGetDlnaByUuidConnectionmanagerConnectionmanagerRequest{
		ApiService: a,
		ctx: ctx,
		uuId: uuId,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) GetDlnaByUuidConnectionmanagerConnectionmanagerExecute(r ApiGetDlnaByUuidConnectionmanagerConnectionmanagerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.GetDlnaByUuidConnectionmanagerConnectionmanager")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/{UuId}/connectionmanager/connectionmanager"
	localVarPath = strings.Replace(localVarPath, "{"+"UuId"+"}", url.PathEscape(parameterValueToString(r.uuId, "uuId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDlnaByUuidConnectionmanagerConnectionmanagerXmlRequest struct {
	ctx context.Context
	ApiService DlnaServerServiceAPI
	uuId string
}

func (r ApiGetDlnaByUuidConnectionmanagerConnectionmanagerXmlRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetDlnaByUuidConnectionmanagerConnectionmanagerXmlExecute(r)
}

/*
GetDlnaByUuidConnectionmanagerConnectionmanagerXml Gets dlna connection manager xml

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuId Server UuId
 @return ApiGetDlnaByUuidConnectionmanagerConnectionmanagerXmlRequest
*/
func (a *DlnaServerServiceAPIService) GetDlnaByUuidConnectionmanagerConnectionmanagerXml(ctx context.Context, uuId string) ApiGetDlnaByUuidConnectionmanagerConnectionmanagerXmlRequest {
	return ApiGetDlnaByUuidConnectionmanagerConnectionmanagerXmlRequest{
		ApiService: a,
		ctx: ctx,
		uuId: uuId,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) GetDlnaByUuidConnectionmanagerConnectionmanagerXmlExecute(r ApiGetDlnaByUuidConnectionmanagerConnectionmanagerXmlRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.GetDlnaByUuidConnectionmanagerConnectionmanagerXml")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/{UuId}/connectionmanager/connectionmanager.xml"
	localVarPath = strings.Replace(localVarPath, "{"+"UuId"+"}", url.PathEscape(parameterValueToString(r.uuId, "uuId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDlnaByUuidContentdirectoryContentdirectoryRequest struct {
	ctx context.Context
	ApiService DlnaServerServiceAPI
	uuId string
}

func (r ApiGetDlnaByUuidContentdirectoryContentdirectoryRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetDlnaByUuidContentdirectoryContentdirectoryExecute(r)
}

/*
GetDlnaByUuidContentdirectoryContentdirectory Gets dlna content directory xml

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuId Server UuId
 @return ApiGetDlnaByUuidContentdirectoryContentdirectoryRequest
*/
func (a *DlnaServerServiceAPIService) GetDlnaByUuidContentdirectoryContentdirectory(ctx context.Context, uuId string) ApiGetDlnaByUuidContentdirectoryContentdirectoryRequest {
	return ApiGetDlnaByUuidContentdirectoryContentdirectoryRequest{
		ApiService: a,
		ctx: ctx,
		uuId: uuId,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) GetDlnaByUuidContentdirectoryContentdirectoryExecute(r ApiGetDlnaByUuidContentdirectoryContentdirectoryRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.GetDlnaByUuidContentdirectoryContentdirectory")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/{UuId}/contentdirectory/contentdirectory"
	localVarPath = strings.Replace(localVarPath, "{"+"UuId"+"}", url.PathEscape(parameterValueToString(r.uuId, "uuId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDlnaByUuidContentdirectoryContentdirectoryXmlRequest struct {
	ctx context.Context
	ApiService DlnaServerServiceAPI
	uuId string
}

func (r ApiGetDlnaByUuidContentdirectoryContentdirectoryXmlRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetDlnaByUuidContentdirectoryContentdirectoryXmlExecute(r)
}

/*
GetDlnaByUuidContentdirectoryContentdirectoryXml Gets dlna content directory xml

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuId Server UuId
 @return ApiGetDlnaByUuidContentdirectoryContentdirectoryXmlRequest
*/
func (a *DlnaServerServiceAPIService) GetDlnaByUuidContentdirectoryContentdirectoryXml(ctx context.Context, uuId string) ApiGetDlnaByUuidContentdirectoryContentdirectoryXmlRequest {
	return ApiGetDlnaByUuidContentdirectoryContentdirectoryXmlRequest{
		ApiService: a,
		ctx: ctx,
		uuId: uuId,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) GetDlnaByUuidContentdirectoryContentdirectoryXmlExecute(r ApiGetDlnaByUuidContentdirectoryContentdirectoryXmlRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.GetDlnaByUuidContentdirectoryContentdirectoryXml")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/{UuId}/contentdirectory/contentdirectory.xml"
	localVarPath = strings.Replace(localVarPath, "{"+"UuId"+"}", url.PathEscape(parameterValueToString(r.uuId, "uuId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDlnaByUuidDescriptionRequest struct {
	ctx context.Context
	ApiService DlnaServerServiceAPI
	uuId string
}

func (r ApiGetDlnaByUuidDescriptionRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetDlnaByUuidDescriptionExecute(r)
}

/*
GetDlnaByUuidDescription Gets dlna server info

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuId Server UuId
 @return ApiGetDlnaByUuidDescriptionRequest
*/
func (a *DlnaServerServiceAPIService) GetDlnaByUuidDescription(ctx context.Context, uuId string) ApiGetDlnaByUuidDescriptionRequest {
	return ApiGetDlnaByUuidDescriptionRequest{
		ApiService: a,
		ctx: ctx,
		uuId: uuId,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) GetDlnaByUuidDescriptionExecute(r ApiGetDlnaByUuidDescriptionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.GetDlnaByUuidDescription")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/{UuId}/description"
	localVarPath = strings.Replace(localVarPath, "{"+"UuId"+"}", url.PathEscape(parameterValueToString(r.uuId, "uuId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDlnaByUuidDescriptionXmlRequest struct {
	ctx context.Context
	ApiService DlnaServerServiceAPI
	uuId string
}

func (r ApiGetDlnaByUuidDescriptionXmlRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetDlnaByUuidDescriptionXmlExecute(r)
}

/*
GetDlnaByUuidDescriptionXml Gets dlna server info

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuId Server UuId
 @return ApiGetDlnaByUuidDescriptionXmlRequest
*/
func (a *DlnaServerServiceAPIService) GetDlnaByUuidDescriptionXml(ctx context.Context, uuId string) ApiGetDlnaByUuidDescriptionXmlRequest {
	return ApiGetDlnaByUuidDescriptionXmlRequest{
		ApiService: a,
		ctx: ctx,
		uuId: uuId,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) GetDlnaByUuidDescriptionXmlExecute(r ApiGetDlnaByUuidDescriptionXmlRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.GetDlnaByUuidDescriptionXml")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/{UuId}/description.xml"
	localVarPath = strings.Replace(localVarPath, "{"+"UuId"+"}", url.PathEscape(parameterValueToString(r.uuId, "uuId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDlnaByUuidIconsByFilenameRequest struct {
	ctx context.Context
	ApiService DlnaServerServiceAPI
	uuId string
	filename string
}

func (r ApiGetDlnaByUuidIconsByFilenameRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetDlnaByUuidIconsByFilenameExecute(r)
}

/*
GetDlnaByUuidIconsByFilename Gets a server icon

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuId Server UuId
 @param filename The icon filename
 @return ApiGetDlnaByUuidIconsByFilenameRequest
*/
func (a *DlnaServerServiceAPIService) GetDlnaByUuidIconsByFilename(ctx context.Context, uuId string, filename string) ApiGetDlnaByUuidIconsByFilenameRequest {
	return ApiGetDlnaByUuidIconsByFilenameRequest{
		ApiService: a,
		ctx: ctx,
		uuId: uuId,
		filename: filename,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) GetDlnaByUuidIconsByFilenameExecute(r ApiGetDlnaByUuidIconsByFilenameRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.GetDlnaByUuidIconsByFilename")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/{UuId}/icons/{Filename}"
	localVarPath = strings.Replace(localVarPath, "{"+"UuId"+"}", url.PathEscape(parameterValueToString(r.uuId, "uuId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Filename"+"}", url.PathEscape(parameterValueToString(r.filename, "filename")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDlnaIconsByFilenameRequest struct {
	ctx context.Context
	ApiService DlnaServerServiceAPI
	filename string
	uuId *string
}

// Server UuId
func (r ApiGetDlnaIconsByFilenameRequest) UuId(uuId string) ApiGetDlnaIconsByFilenameRequest {
	r.uuId = &uuId
	return r
}

func (r ApiGetDlnaIconsByFilenameRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetDlnaIconsByFilenameExecute(r)
}

/*
GetDlnaIconsByFilename Gets a server icon

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param filename The icon filename
 @return ApiGetDlnaIconsByFilenameRequest
*/
func (a *DlnaServerServiceAPIService) GetDlnaIconsByFilename(ctx context.Context, filename string) ApiGetDlnaIconsByFilenameRequest {
	return ApiGetDlnaIconsByFilenameRequest{
		ApiService: a,
		ctx: ctx,
		filename: filename,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) GetDlnaIconsByFilenameExecute(r ApiGetDlnaIconsByFilenameRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.GetDlnaIconsByFilename")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/icons/{Filename}"
	localVarPath = strings.Replace(localVarPath, "{"+"Filename"+"}", url.PathEscape(parameterValueToString(r.filename, "filename")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.uuId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UuId", r.uuId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostDlnaByUuidConnectionmanagerControlRequest struct {
	ctx context.Context
	ApiService DlnaServerServiceAPI
	uuId string
	body *os.File
}

// Binary stream
func (r ApiPostDlnaByUuidConnectionmanagerControlRequest) Body(body *os.File) ApiPostDlnaByUuidConnectionmanagerControlRequest {
	r.body = body
	return r
}

func (r ApiPostDlnaByUuidConnectionmanagerControlRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostDlnaByUuidConnectionmanagerControlExecute(r)
}

/*
PostDlnaByUuidConnectionmanagerControl Processes a control request

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuId Server UuId
 @return ApiPostDlnaByUuidConnectionmanagerControlRequest
*/
func (a *DlnaServerServiceAPIService) PostDlnaByUuidConnectionmanagerControl(ctx context.Context, uuId string) ApiPostDlnaByUuidConnectionmanagerControlRequest {
	return ApiPostDlnaByUuidConnectionmanagerControlRequest{
		ApiService: a,
		ctx: ctx,
		uuId: uuId,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) PostDlnaByUuidConnectionmanagerControlExecute(r ApiPostDlnaByUuidConnectionmanagerControlRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.PostDlnaByUuidConnectionmanagerControl")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/{UuId}/connectionmanager/control"
	localVarPath = strings.Replace(localVarPath, "{"+"UuId"+"}", url.PathEscape(parameterValueToString(r.uuId, "uuId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostDlnaByUuidContentdirectoryControlRequest struct {
	ctx context.Context
	ApiService DlnaServerServiceAPI
	uuId string
	body *os.File
}

// Binary stream
func (r ApiPostDlnaByUuidContentdirectoryControlRequest) Body(body *os.File) ApiPostDlnaByUuidContentdirectoryControlRequest {
	r.body = body
	return r
}

func (r ApiPostDlnaByUuidContentdirectoryControlRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostDlnaByUuidContentdirectoryControlExecute(r)
}

/*
PostDlnaByUuidContentdirectoryControl Processes a control request

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuId Server UuId
 @return ApiPostDlnaByUuidContentdirectoryControlRequest
*/
func (a *DlnaServerServiceAPIService) PostDlnaByUuidContentdirectoryControl(ctx context.Context, uuId string) ApiPostDlnaByUuidContentdirectoryControlRequest {
	return ApiPostDlnaByUuidContentdirectoryControlRequest{
		ApiService: a,
		ctx: ctx,
		uuId: uuId,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) PostDlnaByUuidContentdirectoryControlExecute(r ApiPostDlnaByUuidContentdirectoryControlRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.PostDlnaByUuidContentdirectoryControl")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/{UuId}/contentdirectory/control"
	localVarPath = strings.Replace(localVarPath, "{"+"UuId"+"}", url.PathEscape(parameterValueToString(r.uuId, "uuId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
