/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ItemRefreshServiceAPI interface {

	/*
	PostItemsByIdRefresh Refreshes metadata for an item

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@return ApiPostItemsByIdRefreshRequest
	*/
	PostItemsByIdRefresh(ctx context.Context, id string) ApiPostItemsByIdRefreshRequest

	// PostItemsByIdRefreshExecute executes the request
	PostItemsByIdRefreshExecute(r ApiPostItemsByIdRefreshRequest) (*http.Response, error)
}

// ItemRefreshServiceAPIService ItemRefreshServiceAPI service
type ItemRefreshServiceAPIService service

type ApiPostItemsByIdRefreshRequest struct {
	ctx context.Context
	ApiService ItemRefreshServiceAPI
	id string
	recursive *bool
	metadataRefreshMode *string
	imageRefreshMode *string
	replaceAllMetadata *bool
	replaceAllImages *bool
}

// Indicates if the refresh should occur recursively.
func (r ApiPostItemsByIdRefreshRequest) Recursive(recursive bool) ApiPostItemsByIdRefreshRequest {
	r.recursive = &recursive
	return r
}

// Specifies the metadata refresh mode
func (r ApiPostItemsByIdRefreshRequest) MetadataRefreshMode(metadataRefreshMode string) ApiPostItemsByIdRefreshRequest {
	r.metadataRefreshMode = &metadataRefreshMode
	return r
}

// Specifies the image refresh mode
func (r ApiPostItemsByIdRefreshRequest) ImageRefreshMode(imageRefreshMode string) ApiPostItemsByIdRefreshRequest {
	r.imageRefreshMode = &imageRefreshMode
	return r
}

// Determines if metadata should be replaced. Only applicable if mode is FullRefresh
func (r ApiPostItemsByIdRefreshRequest) ReplaceAllMetadata(replaceAllMetadata bool) ApiPostItemsByIdRefreshRequest {
	r.replaceAllMetadata = &replaceAllMetadata
	return r
}

// Determines if images should be replaced. Only applicable if mode is FullRefresh
func (r ApiPostItemsByIdRefreshRequest) ReplaceAllImages(replaceAllImages bool) ApiPostItemsByIdRefreshRequest {
	r.replaceAllImages = &replaceAllImages
	return r
}

func (r ApiPostItemsByIdRefreshRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostItemsByIdRefreshExecute(r)
}

/*
PostItemsByIdRefresh Refreshes metadata for an item

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return ApiPostItemsByIdRefreshRequest
*/
func (a *ItemRefreshServiceAPIService) PostItemsByIdRefresh(ctx context.Context, id string) ApiPostItemsByIdRefreshRequest {
	return ApiPostItemsByIdRefreshRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ItemRefreshServiceAPIService) PostItemsByIdRefreshExecute(r ApiPostItemsByIdRefreshRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemRefreshServiceAPIService.PostItemsByIdRefresh")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/Refresh"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.recursive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Recursive", r.recursive, "form", "")
	}
	if r.metadataRefreshMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MetadataRefreshMode", r.metadataRefreshMode, "form", "")
	}
	if r.imageRefreshMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageRefreshMode", r.imageRefreshMode, "form", "")
	}
	if r.replaceAllMetadata != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ReplaceAllMetadata", r.replaceAllMetadata, "form", "")
	}
	if r.replaceAllImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ReplaceAllImages", r.replaceAllImages, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
