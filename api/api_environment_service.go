/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type EnvironmentServiceAPI interface {

	/*
	GetEnvironmentDefaultdirectorybrowser Gets the parent path of a given path

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetEnvironmentDefaultdirectorybrowserRequest
	*/
	GetEnvironmentDefaultdirectorybrowser(ctx context.Context) ApiGetEnvironmentDefaultdirectorybrowserRequest

	// GetEnvironmentDefaultdirectorybrowserExecute executes the request
	//  @return DefaultDirectoryBrowserInfo
	GetEnvironmentDefaultdirectorybrowserExecute(r ApiGetEnvironmentDefaultdirectorybrowserRequest) (*DefaultDirectoryBrowserInfo, *http.Response, error)

	/*
	GetEnvironmentDirectorycontents Gets the contents of a given directory in the file system

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetEnvironmentDirectorycontentsRequest
	*/
	GetEnvironmentDirectorycontents(ctx context.Context) ApiGetEnvironmentDirectorycontentsRequest

	// GetEnvironmentDirectorycontentsExecute executes the request
	//  @return []IOFileSystemEntryInfo
	GetEnvironmentDirectorycontentsExecute(r ApiGetEnvironmentDirectorycontentsRequest) ([]IOFileSystemEntryInfo, *http.Response, error)

	/*
	GetEnvironmentDrives Gets available drives from the server's file system

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetEnvironmentDrivesRequest
	*/
	GetEnvironmentDrives(ctx context.Context) ApiGetEnvironmentDrivesRequest

	// GetEnvironmentDrivesExecute executes the request
	//  @return []IOFileSystemEntryInfo
	GetEnvironmentDrivesExecute(r ApiGetEnvironmentDrivesRequest) ([]IOFileSystemEntryInfo, *http.Response, error)

	/*
	GetEnvironmentNetworkdevices Gets a list of devices on the network

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetEnvironmentNetworkdevicesRequest
	*/
	GetEnvironmentNetworkdevices(ctx context.Context) ApiGetEnvironmentNetworkdevicesRequest

	// GetEnvironmentNetworkdevicesExecute executes the request
	//  @return []IOFileSystemEntryInfo
	GetEnvironmentNetworkdevicesExecute(r ApiGetEnvironmentNetworkdevicesRequest) ([]IOFileSystemEntryInfo, *http.Response, error)

	/*
	GetEnvironmentNetworkshares Gets shares from a network device

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetEnvironmentNetworksharesRequest
	*/
	GetEnvironmentNetworkshares(ctx context.Context) ApiGetEnvironmentNetworksharesRequest

	// GetEnvironmentNetworksharesExecute executes the request
	//  @return []IOFileSystemEntryInfo
	GetEnvironmentNetworksharesExecute(r ApiGetEnvironmentNetworksharesRequest) ([]IOFileSystemEntryInfo, *http.Response, error)

	/*
	GetEnvironmentParentpath Gets the parent path of a given path

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetEnvironmentParentpathRequest
	*/
	GetEnvironmentParentpath(ctx context.Context) ApiGetEnvironmentParentpathRequest

	// GetEnvironmentParentpathExecute executes the request
	//  @return string
	GetEnvironmentParentpathExecute(r ApiGetEnvironmentParentpathRequest) (string, *http.Response, error)

	/*
	PostEnvironmentValidatepath Gets the contents of a given directory in the file system

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostEnvironmentValidatepathRequest
	*/
	PostEnvironmentValidatepath(ctx context.Context) ApiPostEnvironmentValidatepathRequest

	// PostEnvironmentValidatepathExecute executes the request
	PostEnvironmentValidatepathExecute(r ApiPostEnvironmentValidatepathRequest) (*http.Response, error)
}

// EnvironmentServiceAPIService EnvironmentServiceAPI service
type EnvironmentServiceAPIService service

type ApiGetEnvironmentDefaultdirectorybrowserRequest struct {
	ctx context.Context
	ApiService EnvironmentServiceAPI
}

func (r ApiGetEnvironmentDefaultdirectorybrowserRequest) Execute() (*DefaultDirectoryBrowserInfo, *http.Response, error) {
	return r.ApiService.GetEnvironmentDefaultdirectorybrowserExecute(r)
}

/*
GetEnvironmentDefaultdirectorybrowser Gets the parent path of a given path

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetEnvironmentDefaultdirectorybrowserRequest
*/
func (a *EnvironmentServiceAPIService) GetEnvironmentDefaultdirectorybrowser(ctx context.Context) ApiGetEnvironmentDefaultdirectorybrowserRequest {
	return ApiGetEnvironmentDefaultdirectorybrowserRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultDirectoryBrowserInfo
func (a *EnvironmentServiceAPIService) GetEnvironmentDefaultdirectorybrowserExecute(r ApiGetEnvironmentDefaultdirectorybrowserRequest) (*DefaultDirectoryBrowserInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultDirectoryBrowserInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentServiceAPIService.GetEnvironmentDefaultdirectorybrowser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Environment/DefaultDirectoryBrowser"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEnvironmentDirectorycontentsRequest struct {
	ctx context.Context
	ApiService EnvironmentServiceAPI
	path *string
	includeFiles *bool
	includeDirectories *bool
}

func (r ApiGetEnvironmentDirectorycontentsRequest) Path(path string) ApiGetEnvironmentDirectorycontentsRequest {
	r.path = &path
	return r
}

// An optional filter to include or exclude files from the results. true/false
func (r ApiGetEnvironmentDirectorycontentsRequest) IncludeFiles(includeFiles bool) ApiGetEnvironmentDirectorycontentsRequest {
	r.includeFiles = &includeFiles
	return r
}

// An optional filter to include or exclude folders from the results. true/false
func (r ApiGetEnvironmentDirectorycontentsRequest) IncludeDirectories(includeDirectories bool) ApiGetEnvironmentDirectorycontentsRequest {
	r.includeDirectories = &includeDirectories
	return r
}

func (r ApiGetEnvironmentDirectorycontentsRequest) Execute() ([]IOFileSystemEntryInfo, *http.Response, error) {
	return r.ApiService.GetEnvironmentDirectorycontentsExecute(r)
}

/*
GetEnvironmentDirectorycontents Gets the contents of a given directory in the file system

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetEnvironmentDirectorycontentsRequest
*/
func (a *EnvironmentServiceAPIService) GetEnvironmentDirectorycontents(ctx context.Context) ApiGetEnvironmentDirectorycontentsRequest {
	return ApiGetEnvironmentDirectorycontentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []IOFileSystemEntryInfo
func (a *EnvironmentServiceAPIService) GetEnvironmentDirectorycontentsExecute(r ApiGetEnvironmentDirectorycontentsRequest) ([]IOFileSystemEntryInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []IOFileSystemEntryInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentServiceAPIService.GetEnvironmentDirectorycontents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Environment/DirectoryContents"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.path == nil {
		return localVarReturnValue, nil, reportError("path is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Path", r.path, "form", "")
	if r.includeFiles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeFiles", r.includeFiles, "form", "")
	}
	if r.includeDirectories != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeDirectories", r.includeDirectories, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEnvironmentDrivesRequest struct {
	ctx context.Context
	ApiService EnvironmentServiceAPI
}

func (r ApiGetEnvironmentDrivesRequest) Execute() ([]IOFileSystemEntryInfo, *http.Response, error) {
	return r.ApiService.GetEnvironmentDrivesExecute(r)
}

/*
GetEnvironmentDrives Gets available drives from the server's file system

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetEnvironmentDrivesRequest
*/
func (a *EnvironmentServiceAPIService) GetEnvironmentDrives(ctx context.Context) ApiGetEnvironmentDrivesRequest {
	return ApiGetEnvironmentDrivesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []IOFileSystemEntryInfo
func (a *EnvironmentServiceAPIService) GetEnvironmentDrivesExecute(r ApiGetEnvironmentDrivesRequest) ([]IOFileSystemEntryInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []IOFileSystemEntryInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentServiceAPIService.GetEnvironmentDrives")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Environment/Drives"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEnvironmentNetworkdevicesRequest struct {
	ctx context.Context
	ApiService EnvironmentServiceAPI
}

func (r ApiGetEnvironmentNetworkdevicesRequest) Execute() ([]IOFileSystemEntryInfo, *http.Response, error) {
	return r.ApiService.GetEnvironmentNetworkdevicesExecute(r)
}

/*
GetEnvironmentNetworkdevices Gets a list of devices on the network

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetEnvironmentNetworkdevicesRequest
*/
func (a *EnvironmentServiceAPIService) GetEnvironmentNetworkdevices(ctx context.Context) ApiGetEnvironmentNetworkdevicesRequest {
	return ApiGetEnvironmentNetworkdevicesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []IOFileSystemEntryInfo
func (a *EnvironmentServiceAPIService) GetEnvironmentNetworkdevicesExecute(r ApiGetEnvironmentNetworkdevicesRequest) ([]IOFileSystemEntryInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []IOFileSystemEntryInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentServiceAPIService.GetEnvironmentNetworkdevices")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Environment/NetworkDevices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEnvironmentNetworksharesRequest struct {
	ctx context.Context
	ApiService EnvironmentServiceAPI
	path *string
}

func (r ApiGetEnvironmentNetworksharesRequest) Path(path string) ApiGetEnvironmentNetworksharesRequest {
	r.path = &path
	return r
}

func (r ApiGetEnvironmentNetworksharesRequest) Execute() ([]IOFileSystemEntryInfo, *http.Response, error) {
	return r.ApiService.GetEnvironmentNetworksharesExecute(r)
}

/*
GetEnvironmentNetworkshares Gets shares from a network device

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetEnvironmentNetworksharesRequest
*/
func (a *EnvironmentServiceAPIService) GetEnvironmentNetworkshares(ctx context.Context) ApiGetEnvironmentNetworksharesRequest {
	return ApiGetEnvironmentNetworksharesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []IOFileSystemEntryInfo
func (a *EnvironmentServiceAPIService) GetEnvironmentNetworksharesExecute(r ApiGetEnvironmentNetworksharesRequest) ([]IOFileSystemEntryInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []IOFileSystemEntryInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentServiceAPIService.GetEnvironmentNetworkshares")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Environment/NetworkShares"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.path == nil {
		return localVarReturnValue, nil, reportError("path is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Path", r.path, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEnvironmentParentpathRequest struct {
	ctx context.Context
	ApiService EnvironmentServiceAPI
	path *string
}

func (r ApiGetEnvironmentParentpathRequest) Path(path string) ApiGetEnvironmentParentpathRequest {
	r.path = &path
	return r
}

func (r ApiGetEnvironmentParentpathRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetEnvironmentParentpathExecute(r)
}

/*
GetEnvironmentParentpath Gets the parent path of a given path

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetEnvironmentParentpathRequest
*/
func (a *EnvironmentServiceAPIService) GetEnvironmentParentpath(ctx context.Context) ApiGetEnvironmentParentpathRequest {
	return ApiGetEnvironmentParentpathRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *EnvironmentServiceAPIService) GetEnvironmentParentpathExecute(r ApiGetEnvironmentParentpathRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentServiceAPIService.GetEnvironmentParentpath")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Environment/ParentPath"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.path == nil {
		return localVarReturnValue, nil, reportError("path is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Path", r.path, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostEnvironmentValidatepathRequest struct {
	ctx context.Context
	ApiService EnvironmentServiceAPI
	path *string
	validatePath *ValidatePath
}

func (r ApiPostEnvironmentValidatepathRequest) Path(path string) ApiPostEnvironmentValidatepathRequest {
	r.path = &path
	return r
}

// ValidatePath
func (r ApiPostEnvironmentValidatepathRequest) ValidatePath(validatePath ValidatePath) ApiPostEnvironmentValidatepathRequest {
	r.validatePath = &validatePath
	return r
}

func (r ApiPostEnvironmentValidatepathRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostEnvironmentValidatepathExecute(r)
}

/*
PostEnvironmentValidatepath Gets the contents of a given directory in the file system

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostEnvironmentValidatepathRequest
*/
func (a *EnvironmentServiceAPIService) PostEnvironmentValidatepath(ctx context.Context) ApiPostEnvironmentValidatepathRequest {
	return ApiPostEnvironmentValidatepathRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *EnvironmentServiceAPIService) PostEnvironmentValidatepathExecute(r ApiPostEnvironmentValidatepathRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentServiceAPIService.PostEnvironmentValidatepath")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Environment/ValidatePath"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.path == nil {
		return nil, reportError("path is required and must be specified")
	}
	if r.validatePath == nil {
		return nil, reportError("validatePath is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Path", r.path, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.validatePath
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
