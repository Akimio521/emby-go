/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type GamesServiceAPI interface {

	/*
	GetGamesSystemsummaries Finds games similar to a given game.

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetGamesSystemsummariesRequest
	*/
	GetGamesSystemsummaries(ctx context.Context) ApiGetGamesSystemsummariesRequest

	// GetGamesSystemsummariesExecute executes the request
	//  @return []GameSystemSummary
	GetGamesSystemsummariesExecute(r ApiGetGamesSystemsummariesRequest) ([]GameSystemSummary, *http.Response, error)
}

// GamesServiceAPIService GamesServiceAPI service
type GamesServiceAPIService service

type ApiGetGamesSystemsummariesRequest struct {
	ctx context.Context
	ApiService GamesServiceAPI
	userId *string
}

// Optional. Filter by user id
func (r ApiGetGamesSystemsummariesRequest) UserId(userId string) ApiGetGamesSystemsummariesRequest {
	r.userId = &userId
	return r
}

func (r ApiGetGamesSystemsummariesRequest) Execute() ([]GameSystemSummary, *http.Response, error) {
	return r.ApiService.GetGamesSystemsummariesExecute(r)
}

/*
GetGamesSystemsummaries Finds games similar to a given game.

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetGamesSystemsummariesRequest
*/
func (a *GamesServiceAPIService) GetGamesSystemsummaries(ctx context.Context) ApiGetGamesSystemsummariesRequest {
	return ApiGetGamesSystemsummariesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []GameSystemSummary
func (a *GamesServiceAPIService) GetGamesSystemsummariesExecute(r ApiGetGamesSystemsummariesRequest) ([]GameSystemSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GameSystemSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GamesServiceAPIService.GetGamesSystemsummaries")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Games/SystemSummaries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
