/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the LibraryUpdateMediaPath type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LibraryUpdateMediaPath{}

// LibraryUpdateMediaPath struct for LibraryUpdateMediaPath
type LibraryUpdateMediaPath struct {
	Name *string `json:"Name,omitempty"`
	PathInfo *ConfigurationMediaPathInfo `json:"PathInfo,omitempty"`
}

// NewLibraryUpdateMediaPath instantiates a new LibraryUpdateMediaPath object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLibraryUpdateMediaPath() *LibraryUpdateMediaPath {
	this := LibraryUpdateMediaPath{}
	return &this
}

// NewLibraryUpdateMediaPathWithDefaults instantiates a new LibraryUpdateMediaPath object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLibraryUpdateMediaPathWithDefaults() *LibraryUpdateMediaPath {
	this := LibraryUpdateMediaPath{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LibraryUpdateMediaPath) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LibraryUpdateMediaPath) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LibraryUpdateMediaPath) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LibraryUpdateMediaPath) SetName(v string) {
	o.Name = &v
}

// GetPathInfo returns the PathInfo field value if set, zero value otherwise.
func (o *LibraryUpdateMediaPath) GetPathInfo() ConfigurationMediaPathInfo {
	if o == nil || IsNil(o.PathInfo) {
		var ret ConfigurationMediaPathInfo
		return ret
	}
	return *o.PathInfo
}

// GetPathInfoOk returns a tuple with the PathInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LibraryUpdateMediaPath) GetPathInfoOk() (*ConfigurationMediaPathInfo, bool) {
	if o == nil || IsNil(o.PathInfo) {
		return nil, false
	}
	return o.PathInfo, true
}

// HasPathInfo returns a boolean if a field has been set.
func (o *LibraryUpdateMediaPath) HasPathInfo() bool {
	if o != nil && !IsNil(o.PathInfo) {
		return true
	}

	return false
}

// SetPathInfo gets a reference to the given ConfigurationMediaPathInfo and assigns it to the PathInfo field.
func (o *LibraryUpdateMediaPath) SetPathInfo(v ConfigurationMediaPathInfo) {
	o.PathInfo = &v
}

func (o LibraryUpdateMediaPath) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LibraryUpdateMediaPath) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.PathInfo) {
		toSerialize["PathInfo"] = o.PathInfo
	}
	return toSerialize, nil
}

type NullableLibraryUpdateMediaPath struct {
	value *LibraryUpdateMediaPath
	isSet bool
}

func (v NullableLibraryUpdateMediaPath) Get() *LibraryUpdateMediaPath {
	return v.value
}

func (v *NullableLibraryUpdateMediaPath) Set(val *LibraryUpdateMediaPath) {
	v.value = val
	v.isSet = true
}

func (v NullableLibraryUpdateMediaPath) IsSet() bool {
	return v.isSet
}

func (v *NullableLibraryUpdateMediaPath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLibraryUpdateMediaPath(val *LibraryUpdateMediaPath) *NullableLibraryUpdateMediaPath {
	return &NullableLibraryUpdateMediaPath{value: val, isSet: true}
}

func (v NullableLibraryUpdateMediaPath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLibraryUpdateMediaPath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


