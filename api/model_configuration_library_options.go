/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ConfigurationLibraryOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigurationLibraryOptions{}

// ConfigurationLibraryOptions struct for ConfigurationLibraryOptions
type ConfigurationLibraryOptions struct {
	EnableArchiveMediaFiles *bool `json:"EnableArchiveMediaFiles,omitempty"`
	EnablePhotos *bool `json:"EnablePhotos,omitempty"`
	EnableRealtimeMonitor *bool `json:"EnableRealtimeMonitor,omitempty"`
	EnableChapterImageExtraction *bool `json:"EnableChapterImageExtraction,omitempty"`
	ExtractChapterImagesDuringLibraryScan *bool `json:"ExtractChapterImagesDuringLibraryScan,omitempty"`
	DownloadImagesInAdvance *bool `json:"DownloadImagesInAdvance,omitempty"`
	PathInfos []ConfigurationMediaPathInfo `json:"PathInfos,omitempty"`
	SaveLocalMetadata *bool `json:"SaveLocalMetadata,omitempty"`
	SaveLocalThumbnailSets *bool `json:"SaveLocalThumbnailSets,omitempty"`
	ImportMissingEpisodes *bool `json:"ImportMissingEpisodes,omitempty"`
	EnableAutomaticSeriesGrouping *bool `json:"EnableAutomaticSeriesGrouping,omitempty"`
	EnableEmbeddedTitles *bool `json:"EnableEmbeddedTitles,omitempty"`
	EnableAudioResume *bool `json:"EnableAudioResume,omitempty"`
	AutomaticRefreshIntervalDays *int32 `json:"AutomaticRefreshIntervalDays,omitempty"`
	PreferredMetadataLanguage *string `json:"PreferredMetadataLanguage,omitempty"`
	ContentType *string `json:"ContentType,omitempty"`
	MetadataCountryCode *string `json:"MetadataCountryCode,omitempty"`
	SeasonZeroDisplayName *string `json:"SeasonZeroDisplayName,omitempty"`
	MetadataSavers []string `json:"MetadataSavers,omitempty"`
	DisabledLocalMetadataReaders []string `json:"DisabledLocalMetadataReaders,omitempty"`
	LocalMetadataReaderOrder []string `json:"LocalMetadataReaderOrder,omitempty"`
	DisabledSubtitleFetchers []string `json:"DisabledSubtitleFetchers,omitempty"`
	SubtitleFetcherOrder []string `json:"SubtitleFetcherOrder,omitempty"`
	SkipSubtitlesIfEmbeddedSubtitlesPresent *bool `json:"SkipSubtitlesIfEmbeddedSubtitlesPresent,omitempty"`
	SkipSubtitlesIfAudioTrackMatches *bool `json:"SkipSubtitlesIfAudioTrackMatches,omitempty"`
	SubtitleDownloadLanguages []string `json:"SubtitleDownloadLanguages,omitempty"`
	RequirePerfectSubtitleMatch *bool `json:"RequirePerfectSubtitleMatch,omitempty"`
	SaveSubtitlesWithMedia *bool `json:"SaveSubtitlesWithMedia,omitempty"`
	ForcedSubtitlesOnly *bool `json:"ForcedSubtitlesOnly,omitempty"`
	TypeOptions []ConfigurationTypeOptions `json:"TypeOptions,omitempty"`
	CollapseSingleItemFolders *bool `json:"CollapseSingleItemFolders,omitempty"`
	MinResumePct *int32 `json:"MinResumePct,omitempty"`
	MaxResumePct *int32 `json:"MaxResumePct,omitempty"`
	MinResumeDurationSeconds *int32 `json:"MinResumeDurationSeconds,omitempty"`
	ThumbnailImagesIntervalSeconds *int32 `json:"ThumbnailImagesIntervalSeconds,omitempty"`
}

// NewConfigurationLibraryOptions instantiates a new ConfigurationLibraryOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationLibraryOptions() *ConfigurationLibraryOptions {
	this := ConfigurationLibraryOptions{}
	return &this
}

// NewConfigurationLibraryOptionsWithDefaults instantiates a new ConfigurationLibraryOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationLibraryOptionsWithDefaults() *ConfigurationLibraryOptions {
	this := ConfigurationLibraryOptions{}
	return &this
}

// GetEnableArchiveMediaFiles returns the EnableArchiveMediaFiles field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetEnableArchiveMediaFiles() bool {
	if o == nil || IsNil(o.EnableArchiveMediaFiles) {
		var ret bool
		return ret
	}
	return *o.EnableArchiveMediaFiles
}

// GetEnableArchiveMediaFilesOk returns a tuple with the EnableArchiveMediaFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetEnableArchiveMediaFilesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableArchiveMediaFiles) {
		return nil, false
	}
	return o.EnableArchiveMediaFiles, true
}

// HasEnableArchiveMediaFiles returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasEnableArchiveMediaFiles() bool {
	if o != nil && !IsNil(o.EnableArchiveMediaFiles) {
		return true
	}

	return false
}

// SetEnableArchiveMediaFiles gets a reference to the given bool and assigns it to the EnableArchiveMediaFiles field.
func (o *ConfigurationLibraryOptions) SetEnableArchiveMediaFiles(v bool) {
	o.EnableArchiveMediaFiles = &v
}

// GetEnablePhotos returns the EnablePhotos field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetEnablePhotos() bool {
	if o == nil || IsNil(o.EnablePhotos) {
		var ret bool
		return ret
	}
	return *o.EnablePhotos
}

// GetEnablePhotosOk returns a tuple with the EnablePhotos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetEnablePhotosOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePhotos) {
		return nil, false
	}
	return o.EnablePhotos, true
}

// HasEnablePhotos returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasEnablePhotos() bool {
	if o != nil && !IsNil(o.EnablePhotos) {
		return true
	}

	return false
}

// SetEnablePhotos gets a reference to the given bool and assigns it to the EnablePhotos field.
func (o *ConfigurationLibraryOptions) SetEnablePhotos(v bool) {
	o.EnablePhotos = &v
}

// GetEnableRealtimeMonitor returns the EnableRealtimeMonitor field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetEnableRealtimeMonitor() bool {
	if o == nil || IsNil(o.EnableRealtimeMonitor) {
		var ret bool
		return ret
	}
	return *o.EnableRealtimeMonitor
}

// GetEnableRealtimeMonitorOk returns a tuple with the EnableRealtimeMonitor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetEnableRealtimeMonitorOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableRealtimeMonitor) {
		return nil, false
	}
	return o.EnableRealtimeMonitor, true
}

// HasEnableRealtimeMonitor returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasEnableRealtimeMonitor() bool {
	if o != nil && !IsNil(o.EnableRealtimeMonitor) {
		return true
	}

	return false
}

// SetEnableRealtimeMonitor gets a reference to the given bool and assigns it to the EnableRealtimeMonitor field.
func (o *ConfigurationLibraryOptions) SetEnableRealtimeMonitor(v bool) {
	o.EnableRealtimeMonitor = &v
}

// GetEnableChapterImageExtraction returns the EnableChapterImageExtraction field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetEnableChapterImageExtraction() bool {
	if o == nil || IsNil(o.EnableChapterImageExtraction) {
		var ret bool
		return ret
	}
	return *o.EnableChapterImageExtraction
}

// GetEnableChapterImageExtractionOk returns a tuple with the EnableChapterImageExtraction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetEnableChapterImageExtractionOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableChapterImageExtraction) {
		return nil, false
	}
	return o.EnableChapterImageExtraction, true
}

// HasEnableChapterImageExtraction returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasEnableChapterImageExtraction() bool {
	if o != nil && !IsNil(o.EnableChapterImageExtraction) {
		return true
	}

	return false
}

// SetEnableChapterImageExtraction gets a reference to the given bool and assigns it to the EnableChapterImageExtraction field.
func (o *ConfigurationLibraryOptions) SetEnableChapterImageExtraction(v bool) {
	o.EnableChapterImageExtraction = &v
}

// GetExtractChapterImagesDuringLibraryScan returns the ExtractChapterImagesDuringLibraryScan field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetExtractChapterImagesDuringLibraryScan() bool {
	if o == nil || IsNil(o.ExtractChapterImagesDuringLibraryScan) {
		var ret bool
		return ret
	}
	return *o.ExtractChapterImagesDuringLibraryScan
}

// GetExtractChapterImagesDuringLibraryScanOk returns a tuple with the ExtractChapterImagesDuringLibraryScan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetExtractChapterImagesDuringLibraryScanOk() (*bool, bool) {
	if o == nil || IsNil(o.ExtractChapterImagesDuringLibraryScan) {
		return nil, false
	}
	return o.ExtractChapterImagesDuringLibraryScan, true
}

// HasExtractChapterImagesDuringLibraryScan returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasExtractChapterImagesDuringLibraryScan() bool {
	if o != nil && !IsNil(o.ExtractChapterImagesDuringLibraryScan) {
		return true
	}

	return false
}

// SetExtractChapterImagesDuringLibraryScan gets a reference to the given bool and assigns it to the ExtractChapterImagesDuringLibraryScan field.
func (o *ConfigurationLibraryOptions) SetExtractChapterImagesDuringLibraryScan(v bool) {
	o.ExtractChapterImagesDuringLibraryScan = &v
}

// GetDownloadImagesInAdvance returns the DownloadImagesInAdvance field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetDownloadImagesInAdvance() bool {
	if o == nil || IsNil(o.DownloadImagesInAdvance) {
		var ret bool
		return ret
	}
	return *o.DownloadImagesInAdvance
}

// GetDownloadImagesInAdvanceOk returns a tuple with the DownloadImagesInAdvance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetDownloadImagesInAdvanceOk() (*bool, bool) {
	if o == nil || IsNil(o.DownloadImagesInAdvance) {
		return nil, false
	}
	return o.DownloadImagesInAdvance, true
}

// HasDownloadImagesInAdvance returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasDownloadImagesInAdvance() bool {
	if o != nil && !IsNil(o.DownloadImagesInAdvance) {
		return true
	}

	return false
}

// SetDownloadImagesInAdvance gets a reference to the given bool and assigns it to the DownloadImagesInAdvance field.
func (o *ConfigurationLibraryOptions) SetDownloadImagesInAdvance(v bool) {
	o.DownloadImagesInAdvance = &v
}

// GetPathInfos returns the PathInfos field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetPathInfos() []ConfigurationMediaPathInfo {
	if o == nil || IsNil(o.PathInfos) {
		var ret []ConfigurationMediaPathInfo
		return ret
	}
	return o.PathInfos
}

// GetPathInfosOk returns a tuple with the PathInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetPathInfosOk() ([]ConfigurationMediaPathInfo, bool) {
	if o == nil || IsNil(o.PathInfos) {
		return nil, false
	}
	return o.PathInfos, true
}

// HasPathInfos returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasPathInfos() bool {
	if o != nil && !IsNil(o.PathInfos) {
		return true
	}

	return false
}

// SetPathInfos gets a reference to the given []ConfigurationMediaPathInfo and assigns it to the PathInfos field.
func (o *ConfigurationLibraryOptions) SetPathInfos(v []ConfigurationMediaPathInfo) {
	o.PathInfos = v
}

// GetSaveLocalMetadata returns the SaveLocalMetadata field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetSaveLocalMetadata() bool {
	if o == nil || IsNil(o.SaveLocalMetadata) {
		var ret bool
		return ret
	}
	return *o.SaveLocalMetadata
}

// GetSaveLocalMetadataOk returns a tuple with the SaveLocalMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetSaveLocalMetadataOk() (*bool, bool) {
	if o == nil || IsNil(o.SaveLocalMetadata) {
		return nil, false
	}
	return o.SaveLocalMetadata, true
}

// HasSaveLocalMetadata returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasSaveLocalMetadata() bool {
	if o != nil && !IsNil(o.SaveLocalMetadata) {
		return true
	}

	return false
}

// SetSaveLocalMetadata gets a reference to the given bool and assigns it to the SaveLocalMetadata field.
func (o *ConfigurationLibraryOptions) SetSaveLocalMetadata(v bool) {
	o.SaveLocalMetadata = &v
}

// GetSaveLocalThumbnailSets returns the SaveLocalThumbnailSets field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetSaveLocalThumbnailSets() bool {
	if o == nil || IsNil(o.SaveLocalThumbnailSets) {
		var ret bool
		return ret
	}
	return *o.SaveLocalThumbnailSets
}

// GetSaveLocalThumbnailSetsOk returns a tuple with the SaveLocalThumbnailSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetSaveLocalThumbnailSetsOk() (*bool, bool) {
	if o == nil || IsNil(o.SaveLocalThumbnailSets) {
		return nil, false
	}
	return o.SaveLocalThumbnailSets, true
}

// HasSaveLocalThumbnailSets returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasSaveLocalThumbnailSets() bool {
	if o != nil && !IsNil(o.SaveLocalThumbnailSets) {
		return true
	}

	return false
}

// SetSaveLocalThumbnailSets gets a reference to the given bool and assigns it to the SaveLocalThumbnailSets field.
func (o *ConfigurationLibraryOptions) SetSaveLocalThumbnailSets(v bool) {
	o.SaveLocalThumbnailSets = &v
}

// GetImportMissingEpisodes returns the ImportMissingEpisodes field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetImportMissingEpisodes() bool {
	if o == nil || IsNil(o.ImportMissingEpisodes) {
		var ret bool
		return ret
	}
	return *o.ImportMissingEpisodes
}

// GetImportMissingEpisodesOk returns a tuple with the ImportMissingEpisodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetImportMissingEpisodesOk() (*bool, bool) {
	if o == nil || IsNil(o.ImportMissingEpisodes) {
		return nil, false
	}
	return o.ImportMissingEpisodes, true
}

// HasImportMissingEpisodes returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasImportMissingEpisodes() bool {
	if o != nil && !IsNil(o.ImportMissingEpisodes) {
		return true
	}

	return false
}

// SetImportMissingEpisodes gets a reference to the given bool and assigns it to the ImportMissingEpisodes field.
func (o *ConfigurationLibraryOptions) SetImportMissingEpisodes(v bool) {
	o.ImportMissingEpisodes = &v
}

// GetEnableAutomaticSeriesGrouping returns the EnableAutomaticSeriesGrouping field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetEnableAutomaticSeriesGrouping() bool {
	if o == nil || IsNil(o.EnableAutomaticSeriesGrouping) {
		var ret bool
		return ret
	}
	return *o.EnableAutomaticSeriesGrouping
}

// GetEnableAutomaticSeriesGroupingOk returns a tuple with the EnableAutomaticSeriesGrouping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetEnableAutomaticSeriesGroupingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAutomaticSeriesGrouping) {
		return nil, false
	}
	return o.EnableAutomaticSeriesGrouping, true
}

// HasEnableAutomaticSeriesGrouping returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasEnableAutomaticSeriesGrouping() bool {
	if o != nil && !IsNil(o.EnableAutomaticSeriesGrouping) {
		return true
	}

	return false
}

// SetEnableAutomaticSeriesGrouping gets a reference to the given bool and assigns it to the EnableAutomaticSeriesGrouping field.
func (o *ConfigurationLibraryOptions) SetEnableAutomaticSeriesGrouping(v bool) {
	o.EnableAutomaticSeriesGrouping = &v
}

// GetEnableEmbeddedTitles returns the EnableEmbeddedTitles field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetEnableEmbeddedTitles() bool {
	if o == nil || IsNil(o.EnableEmbeddedTitles) {
		var ret bool
		return ret
	}
	return *o.EnableEmbeddedTitles
}

// GetEnableEmbeddedTitlesOk returns a tuple with the EnableEmbeddedTitles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetEnableEmbeddedTitlesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableEmbeddedTitles) {
		return nil, false
	}
	return o.EnableEmbeddedTitles, true
}

// HasEnableEmbeddedTitles returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasEnableEmbeddedTitles() bool {
	if o != nil && !IsNil(o.EnableEmbeddedTitles) {
		return true
	}

	return false
}

// SetEnableEmbeddedTitles gets a reference to the given bool and assigns it to the EnableEmbeddedTitles field.
func (o *ConfigurationLibraryOptions) SetEnableEmbeddedTitles(v bool) {
	o.EnableEmbeddedTitles = &v
}

// GetEnableAudioResume returns the EnableAudioResume field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetEnableAudioResume() bool {
	if o == nil || IsNil(o.EnableAudioResume) {
		var ret bool
		return ret
	}
	return *o.EnableAudioResume
}

// GetEnableAudioResumeOk returns a tuple with the EnableAudioResume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetEnableAudioResumeOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAudioResume) {
		return nil, false
	}
	return o.EnableAudioResume, true
}

// HasEnableAudioResume returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasEnableAudioResume() bool {
	if o != nil && !IsNil(o.EnableAudioResume) {
		return true
	}

	return false
}

// SetEnableAudioResume gets a reference to the given bool and assigns it to the EnableAudioResume field.
func (o *ConfigurationLibraryOptions) SetEnableAudioResume(v bool) {
	o.EnableAudioResume = &v
}

// GetAutomaticRefreshIntervalDays returns the AutomaticRefreshIntervalDays field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetAutomaticRefreshIntervalDays() int32 {
	if o == nil || IsNil(o.AutomaticRefreshIntervalDays) {
		var ret int32
		return ret
	}
	return *o.AutomaticRefreshIntervalDays
}

// GetAutomaticRefreshIntervalDaysOk returns a tuple with the AutomaticRefreshIntervalDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetAutomaticRefreshIntervalDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.AutomaticRefreshIntervalDays) {
		return nil, false
	}
	return o.AutomaticRefreshIntervalDays, true
}

// HasAutomaticRefreshIntervalDays returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasAutomaticRefreshIntervalDays() bool {
	if o != nil && !IsNil(o.AutomaticRefreshIntervalDays) {
		return true
	}

	return false
}

// SetAutomaticRefreshIntervalDays gets a reference to the given int32 and assigns it to the AutomaticRefreshIntervalDays field.
func (o *ConfigurationLibraryOptions) SetAutomaticRefreshIntervalDays(v int32) {
	o.AutomaticRefreshIntervalDays = &v
}

// GetPreferredMetadataLanguage returns the PreferredMetadataLanguage field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetPreferredMetadataLanguage() string {
	if o == nil || IsNil(o.PreferredMetadataLanguage) {
		var ret string
		return ret
	}
	return *o.PreferredMetadataLanguage
}

// GetPreferredMetadataLanguageOk returns a tuple with the PreferredMetadataLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetPreferredMetadataLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredMetadataLanguage) {
		return nil, false
	}
	return o.PreferredMetadataLanguage, true
}

// HasPreferredMetadataLanguage returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasPreferredMetadataLanguage() bool {
	if o != nil && !IsNil(o.PreferredMetadataLanguage) {
		return true
	}

	return false
}

// SetPreferredMetadataLanguage gets a reference to the given string and assigns it to the PreferredMetadataLanguage field.
func (o *ConfigurationLibraryOptions) SetPreferredMetadataLanguage(v string) {
	o.PreferredMetadataLanguage = &v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *ConfigurationLibraryOptions) SetContentType(v string) {
	o.ContentType = &v
}

// GetMetadataCountryCode returns the MetadataCountryCode field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetMetadataCountryCode() string {
	if o == nil || IsNil(o.MetadataCountryCode) {
		var ret string
		return ret
	}
	return *o.MetadataCountryCode
}

// GetMetadataCountryCodeOk returns a tuple with the MetadataCountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetMetadataCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MetadataCountryCode) {
		return nil, false
	}
	return o.MetadataCountryCode, true
}

// HasMetadataCountryCode returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasMetadataCountryCode() bool {
	if o != nil && !IsNil(o.MetadataCountryCode) {
		return true
	}

	return false
}

// SetMetadataCountryCode gets a reference to the given string and assigns it to the MetadataCountryCode field.
func (o *ConfigurationLibraryOptions) SetMetadataCountryCode(v string) {
	o.MetadataCountryCode = &v
}

// GetSeasonZeroDisplayName returns the SeasonZeroDisplayName field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetSeasonZeroDisplayName() string {
	if o == nil || IsNil(o.SeasonZeroDisplayName) {
		var ret string
		return ret
	}
	return *o.SeasonZeroDisplayName
}

// GetSeasonZeroDisplayNameOk returns a tuple with the SeasonZeroDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetSeasonZeroDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.SeasonZeroDisplayName) {
		return nil, false
	}
	return o.SeasonZeroDisplayName, true
}

// HasSeasonZeroDisplayName returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasSeasonZeroDisplayName() bool {
	if o != nil && !IsNil(o.SeasonZeroDisplayName) {
		return true
	}

	return false
}

// SetSeasonZeroDisplayName gets a reference to the given string and assigns it to the SeasonZeroDisplayName field.
func (o *ConfigurationLibraryOptions) SetSeasonZeroDisplayName(v string) {
	o.SeasonZeroDisplayName = &v
}

// GetMetadataSavers returns the MetadataSavers field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetMetadataSavers() []string {
	if o == nil || IsNil(o.MetadataSavers) {
		var ret []string
		return ret
	}
	return o.MetadataSavers
}

// GetMetadataSaversOk returns a tuple with the MetadataSavers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetMetadataSaversOk() ([]string, bool) {
	if o == nil || IsNil(o.MetadataSavers) {
		return nil, false
	}
	return o.MetadataSavers, true
}

// HasMetadataSavers returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasMetadataSavers() bool {
	if o != nil && !IsNil(o.MetadataSavers) {
		return true
	}

	return false
}

// SetMetadataSavers gets a reference to the given []string and assigns it to the MetadataSavers field.
func (o *ConfigurationLibraryOptions) SetMetadataSavers(v []string) {
	o.MetadataSavers = v
}

// GetDisabledLocalMetadataReaders returns the DisabledLocalMetadataReaders field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetDisabledLocalMetadataReaders() []string {
	if o == nil || IsNil(o.DisabledLocalMetadataReaders) {
		var ret []string
		return ret
	}
	return o.DisabledLocalMetadataReaders
}

// GetDisabledLocalMetadataReadersOk returns a tuple with the DisabledLocalMetadataReaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetDisabledLocalMetadataReadersOk() ([]string, bool) {
	if o == nil || IsNil(o.DisabledLocalMetadataReaders) {
		return nil, false
	}
	return o.DisabledLocalMetadataReaders, true
}

// HasDisabledLocalMetadataReaders returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasDisabledLocalMetadataReaders() bool {
	if o != nil && !IsNil(o.DisabledLocalMetadataReaders) {
		return true
	}

	return false
}

// SetDisabledLocalMetadataReaders gets a reference to the given []string and assigns it to the DisabledLocalMetadataReaders field.
func (o *ConfigurationLibraryOptions) SetDisabledLocalMetadataReaders(v []string) {
	o.DisabledLocalMetadataReaders = v
}

// GetLocalMetadataReaderOrder returns the LocalMetadataReaderOrder field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetLocalMetadataReaderOrder() []string {
	if o == nil || IsNil(o.LocalMetadataReaderOrder) {
		var ret []string
		return ret
	}
	return o.LocalMetadataReaderOrder
}

// GetLocalMetadataReaderOrderOk returns a tuple with the LocalMetadataReaderOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetLocalMetadataReaderOrderOk() ([]string, bool) {
	if o == nil || IsNil(o.LocalMetadataReaderOrder) {
		return nil, false
	}
	return o.LocalMetadataReaderOrder, true
}

// HasLocalMetadataReaderOrder returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasLocalMetadataReaderOrder() bool {
	if o != nil && !IsNil(o.LocalMetadataReaderOrder) {
		return true
	}

	return false
}

// SetLocalMetadataReaderOrder gets a reference to the given []string and assigns it to the LocalMetadataReaderOrder field.
func (o *ConfigurationLibraryOptions) SetLocalMetadataReaderOrder(v []string) {
	o.LocalMetadataReaderOrder = v
}

// GetDisabledSubtitleFetchers returns the DisabledSubtitleFetchers field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetDisabledSubtitleFetchers() []string {
	if o == nil || IsNil(o.DisabledSubtitleFetchers) {
		var ret []string
		return ret
	}
	return o.DisabledSubtitleFetchers
}

// GetDisabledSubtitleFetchersOk returns a tuple with the DisabledSubtitleFetchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetDisabledSubtitleFetchersOk() ([]string, bool) {
	if o == nil || IsNil(o.DisabledSubtitleFetchers) {
		return nil, false
	}
	return o.DisabledSubtitleFetchers, true
}

// HasDisabledSubtitleFetchers returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasDisabledSubtitleFetchers() bool {
	if o != nil && !IsNil(o.DisabledSubtitleFetchers) {
		return true
	}

	return false
}

// SetDisabledSubtitleFetchers gets a reference to the given []string and assigns it to the DisabledSubtitleFetchers field.
func (o *ConfigurationLibraryOptions) SetDisabledSubtitleFetchers(v []string) {
	o.DisabledSubtitleFetchers = v
}

// GetSubtitleFetcherOrder returns the SubtitleFetcherOrder field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetSubtitleFetcherOrder() []string {
	if o == nil || IsNil(o.SubtitleFetcherOrder) {
		var ret []string
		return ret
	}
	return o.SubtitleFetcherOrder
}

// GetSubtitleFetcherOrderOk returns a tuple with the SubtitleFetcherOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetSubtitleFetcherOrderOk() ([]string, bool) {
	if o == nil || IsNil(o.SubtitleFetcherOrder) {
		return nil, false
	}
	return o.SubtitleFetcherOrder, true
}

// HasSubtitleFetcherOrder returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasSubtitleFetcherOrder() bool {
	if o != nil && !IsNil(o.SubtitleFetcherOrder) {
		return true
	}

	return false
}

// SetSubtitleFetcherOrder gets a reference to the given []string and assigns it to the SubtitleFetcherOrder field.
func (o *ConfigurationLibraryOptions) SetSubtitleFetcherOrder(v []string) {
	o.SubtitleFetcherOrder = v
}

// GetSkipSubtitlesIfEmbeddedSubtitlesPresent returns the SkipSubtitlesIfEmbeddedSubtitlesPresent field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetSkipSubtitlesIfEmbeddedSubtitlesPresent() bool {
	if o == nil || IsNil(o.SkipSubtitlesIfEmbeddedSubtitlesPresent) {
		var ret bool
		return ret
	}
	return *o.SkipSubtitlesIfEmbeddedSubtitlesPresent
}

// GetSkipSubtitlesIfEmbeddedSubtitlesPresentOk returns a tuple with the SkipSubtitlesIfEmbeddedSubtitlesPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetSkipSubtitlesIfEmbeddedSubtitlesPresentOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipSubtitlesIfEmbeddedSubtitlesPresent) {
		return nil, false
	}
	return o.SkipSubtitlesIfEmbeddedSubtitlesPresent, true
}

// HasSkipSubtitlesIfEmbeddedSubtitlesPresent returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasSkipSubtitlesIfEmbeddedSubtitlesPresent() bool {
	if o != nil && !IsNil(o.SkipSubtitlesIfEmbeddedSubtitlesPresent) {
		return true
	}

	return false
}

// SetSkipSubtitlesIfEmbeddedSubtitlesPresent gets a reference to the given bool and assigns it to the SkipSubtitlesIfEmbeddedSubtitlesPresent field.
func (o *ConfigurationLibraryOptions) SetSkipSubtitlesIfEmbeddedSubtitlesPresent(v bool) {
	o.SkipSubtitlesIfEmbeddedSubtitlesPresent = &v
}

// GetSkipSubtitlesIfAudioTrackMatches returns the SkipSubtitlesIfAudioTrackMatches field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetSkipSubtitlesIfAudioTrackMatches() bool {
	if o == nil || IsNil(o.SkipSubtitlesIfAudioTrackMatches) {
		var ret bool
		return ret
	}
	return *o.SkipSubtitlesIfAudioTrackMatches
}

// GetSkipSubtitlesIfAudioTrackMatchesOk returns a tuple with the SkipSubtitlesIfAudioTrackMatches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetSkipSubtitlesIfAudioTrackMatchesOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipSubtitlesIfAudioTrackMatches) {
		return nil, false
	}
	return o.SkipSubtitlesIfAudioTrackMatches, true
}

// HasSkipSubtitlesIfAudioTrackMatches returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasSkipSubtitlesIfAudioTrackMatches() bool {
	if o != nil && !IsNil(o.SkipSubtitlesIfAudioTrackMatches) {
		return true
	}

	return false
}

// SetSkipSubtitlesIfAudioTrackMatches gets a reference to the given bool and assigns it to the SkipSubtitlesIfAudioTrackMatches field.
func (o *ConfigurationLibraryOptions) SetSkipSubtitlesIfAudioTrackMatches(v bool) {
	o.SkipSubtitlesIfAudioTrackMatches = &v
}

// GetSubtitleDownloadLanguages returns the SubtitleDownloadLanguages field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetSubtitleDownloadLanguages() []string {
	if o == nil || IsNil(o.SubtitleDownloadLanguages) {
		var ret []string
		return ret
	}
	return o.SubtitleDownloadLanguages
}

// GetSubtitleDownloadLanguagesOk returns a tuple with the SubtitleDownloadLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetSubtitleDownloadLanguagesOk() ([]string, bool) {
	if o == nil || IsNil(o.SubtitleDownloadLanguages) {
		return nil, false
	}
	return o.SubtitleDownloadLanguages, true
}

// HasSubtitleDownloadLanguages returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasSubtitleDownloadLanguages() bool {
	if o != nil && !IsNil(o.SubtitleDownloadLanguages) {
		return true
	}

	return false
}

// SetSubtitleDownloadLanguages gets a reference to the given []string and assigns it to the SubtitleDownloadLanguages field.
func (o *ConfigurationLibraryOptions) SetSubtitleDownloadLanguages(v []string) {
	o.SubtitleDownloadLanguages = v
}

// GetRequirePerfectSubtitleMatch returns the RequirePerfectSubtitleMatch field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetRequirePerfectSubtitleMatch() bool {
	if o == nil || IsNil(o.RequirePerfectSubtitleMatch) {
		var ret bool
		return ret
	}
	return *o.RequirePerfectSubtitleMatch
}

// GetRequirePerfectSubtitleMatchOk returns a tuple with the RequirePerfectSubtitleMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetRequirePerfectSubtitleMatchOk() (*bool, bool) {
	if o == nil || IsNil(o.RequirePerfectSubtitleMatch) {
		return nil, false
	}
	return o.RequirePerfectSubtitleMatch, true
}

// HasRequirePerfectSubtitleMatch returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasRequirePerfectSubtitleMatch() bool {
	if o != nil && !IsNil(o.RequirePerfectSubtitleMatch) {
		return true
	}

	return false
}

// SetRequirePerfectSubtitleMatch gets a reference to the given bool and assigns it to the RequirePerfectSubtitleMatch field.
func (o *ConfigurationLibraryOptions) SetRequirePerfectSubtitleMatch(v bool) {
	o.RequirePerfectSubtitleMatch = &v
}

// GetSaveSubtitlesWithMedia returns the SaveSubtitlesWithMedia field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetSaveSubtitlesWithMedia() bool {
	if o == nil || IsNil(o.SaveSubtitlesWithMedia) {
		var ret bool
		return ret
	}
	return *o.SaveSubtitlesWithMedia
}

// GetSaveSubtitlesWithMediaOk returns a tuple with the SaveSubtitlesWithMedia field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetSaveSubtitlesWithMediaOk() (*bool, bool) {
	if o == nil || IsNil(o.SaveSubtitlesWithMedia) {
		return nil, false
	}
	return o.SaveSubtitlesWithMedia, true
}

// HasSaveSubtitlesWithMedia returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasSaveSubtitlesWithMedia() bool {
	if o != nil && !IsNil(o.SaveSubtitlesWithMedia) {
		return true
	}

	return false
}

// SetSaveSubtitlesWithMedia gets a reference to the given bool and assigns it to the SaveSubtitlesWithMedia field.
func (o *ConfigurationLibraryOptions) SetSaveSubtitlesWithMedia(v bool) {
	o.SaveSubtitlesWithMedia = &v
}

// GetForcedSubtitlesOnly returns the ForcedSubtitlesOnly field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetForcedSubtitlesOnly() bool {
	if o == nil || IsNil(o.ForcedSubtitlesOnly) {
		var ret bool
		return ret
	}
	return *o.ForcedSubtitlesOnly
}

// GetForcedSubtitlesOnlyOk returns a tuple with the ForcedSubtitlesOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetForcedSubtitlesOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ForcedSubtitlesOnly) {
		return nil, false
	}
	return o.ForcedSubtitlesOnly, true
}

// HasForcedSubtitlesOnly returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasForcedSubtitlesOnly() bool {
	if o != nil && !IsNil(o.ForcedSubtitlesOnly) {
		return true
	}

	return false
}

// SetForcedSubtitlesOnly gets a reference to the given bool and assigns it to the ForcedSubtitlesOnly field.
func (o *ConfigurationLibraryOptions) SetForcedSubtitlesOnly(v bool) {
	o.ForcedSubtitlesOnly = &v
}

// GetTypeOptions returns the TypeOptions field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetTypeOptions() []ConfigurationTypeOptions {
	if o == nil || IsNil(o.TypeOptions) {
		var ret []ConfigurationTypeOptions
		return ret
	}
	return o.TypeOptions
}

// GetTypeOptionsOk returns a tuple with the TypeOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetTypeOptionsOk() ([]ConfigurationTypeOptions, bool) {
	if o == nil || IsNil(o.TypeOptions) {
		return nil, false
	}
	return o.TypeOptions, true
}

// HasTypeOptions returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasTypeOptions() bool {
	if o != nil && !IsNil(o.TypeOptions) {
		return true
	}

	return false
}

// SetTypeOptions gets a reference to the given []ConfigurationTypeOptions and assigns it to the TypeOptions field.
func (o *ConfigurationLibraryOptions) SetTypeOptions(v []ConfigurationTypeOptions) {
	o.TypeOptions = v
}

// GetCollapseSingleItemFolders returns the CollapseSingleItemFolders field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetCollapseSingleItemFolders() bool {
	if o == nil || IsNil(o.CollapseSingleItemFolders) {
		var ret bool
		return ret
	}
	return *o.CollapseSingleItemFolders
}

// GetCollapseSingleItemFoldersOk returns a tuple with the CollapseSingleItemFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetCollapseSingleItemFoldersOk() (*bool, bool) {
	if o == nil || IsNil(o.CollapseSingleItemFolders) {
		return nil, false
	}
	return o.CollapseSingleItemFolders, true
}

// HasCollapseSingleItemFolders returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasCollapseSingleItemFolders() bool {
	if o != nil && !IsNil(o.CollapseSingleItemFolders) {
		return true
	}

	return false
}

// SetCollapseSingleItemFolders gets a reference to the given bool and assigns it to the CollapseSingleItemFolders field.
func (o *ConfigurationLibraryOptions) SetCollapseSingleItemFolders(v bool) {
	o.CollapseSingleItemFolders = &v
}

// GetMinResumePct returns the MinResumePct field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetMinResumePct() int32 {
	if o == nil || IsNil(o.MinResumePct) {
		var ret int32
		return ret
	}
	return *o.MinResumePct
}

// GetMinResumePctOk returns a tuple with the MinResumePct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetMinResumePctOk() (*int32, bool) {
	if o == nil || IsNil(o.MinResumePct) {
		return nil, false
	}
	return o.MinResumePct, true
}

// HasMinResumePct returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasMinResumePct() bool {
	if o != nil && !IsNil(o.MinResumePct) {
		return true
	}

	return false
}

// SetMinResumePct gets a reference to the given int32 and assigns it to the MinResumePct field.
func (o *ConfigurationLibraryOptions) SetMinResumePct(v int32) {
	o.MinResumePct = &v
}

// GetMaxResumePct returns the MaxResumePct field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetMaxResumePct() int32 {
	if o == nil || IsNil(o.MaxResumePct) {
		var ret int32
		return ret
	}
	return *o.MaxResumePct
}

// GetMaxResumePctOk returns a tuple with the MaxResumePct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetMaxResumePctOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxResumePct) {
		return nil, false
	}
	return o.MaxResumePct, true
}

// HasMaxResumePct returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasMaxResumePct() bool {
	if o != nil && !IsNil(o.MaxResumePct) {
		return true
	}

	return false
}

// SetMaxResumePct gets a reference to the given int32 and assigns it to the MaxResumePct field.
func (o *ConfigurationLibraryOptions) SetMaxResumePct(v int32) {
	o.MaxResumePct = &v
}

// GetMinResumeDurationSeconds returns the MinResumeDurationSeconds field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetMinResumeDurationSeconds() int32 {
	if o == nil || IsNil(o.MinResumeDurationSeconds) {
		var ret int32
		return ret
	}
	return *o.MinResumeDurationSeconds
}

// GetMinResumeDurationSecondsOk returns a tuple with the MinResumeDurationSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetMinResumeDurationSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.MinResumeDurationSeconds) {
		return nil, false
	}
	return o.MinResumeDurationSeconds, true
}

// HasMinResumeDurationSeconds returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasMinResumeDurationSeconds() bool {
	if o != nil && !IsNil(o.MinResumeDurationSeconds) {
		return true
	}

	return false
}

// SetMinResumeDurationSeconds gets a reference to the given int32 and assigns it to the MinResumeDurationSeconds field.
func (o *ConfigurationLibraryOptions) SetMinResumeDurationSeconds(v int32) {
	o.MinResumeDurationSeconds = &v
}

// GetThumbnailImagesIntervalSeconds returns the ThumbnailImagesIntervalSeconds field value if set, zero value otherwise.
func (o *ConfigurationLibraryOptions) GetThumbnailImagesIntervalSeconds() int32 {
	if o == nil || IsNil(o.ThumbnailImagesIntervalSeconds) {
		var ret int32
		return ret
	}
	return *o.ThumbnailImagesIntervalSeconds
}

// GetThumbnailImagesIntervalSecondsOk returns a tuple with the ThumbnailImagesIntervalSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationLibraryOptions) GetThumbnailImagesIntervalSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.ThumbnailImagesIntervalSeconds) {
		return nil, false
	}
	return o.ThumbnailImagesIntervalSeconds, true
}

// HasThumbnailImagesIntervalSeconds returns a boolean if a field has been set.
func (o *ConfigurationLibraryOptions) HasThumbnailImagesIntervalSeconds() bool {
	if o != nil && !IsNil(o.ThumbnailImagesIntervalSeconds) {
		return true
	}

	return false
}

// SetThumbnailImagesIntervalSeconds gets a reference to the given int32 and assigns it to the ThumbnailImagesIntervalSeconds field.
func (o *ConfigurationLibraryOptions) SetThumbnailImagesIntervalSeconds(v int32) {
	o.ThumbnailImagesIntervalSeconds = &v
}

func (o ConfigurationLibraryOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigurationLibraryOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnableArchiveMediaFiles) {
		toSerialize["EnableArchiveMediaFiles"] = o.EnableArchiveMediaFiles
	}
	if !IsNil(o.EnablePhotos) {
		toSerialize["EnablePhotos"] = o.EnablePhotos
	}
	if !IsNil(o.EnableRealtimeMonitor) {
		toSerialize["EnableRealtimeMonitor"] = o.EnableRealtimeMonitor
	}
	if !IsNil(o.EnableChapterImageExtraction) {
		toSerialize["EnableChapterImageExtraction"] = o.EnableChapterImageExtraction
	}
	if !IsNil(o.ExtractChapterImagesDuringLibraryScan) {
		toSerialize["ExtractChapterImagesDuringLibraryScan"] = o.ExtractChapterImagesDuringLibraryScan
	}
	if !IsNil(o.DownloadImagesInAdvance) {
		toSerialize["DownloadImagesInAdvance"] = o.DownloadImagesInAdvance
	}
	if !IsNil(o.PathInfos) {
		toSerialize["PathInfos"] = o.PathInfos
	}
	if !IsNil(o.SaveLocalMetadata) {
		toSerialize["SaveLocalMetadata"] = o.SaveLocalMetadata
	}
	if !IsNil(o.SaveLocalThumbnailSets) {
		toSerialize["SaveLocalThumbnailSets"] = o.SaveLocalThumbnailSets
	}
	if !IsNil(o.ImportMissingEpisodes) {
		toSerialize["ImportMissingEpisodes"] = o.ImportMissingEpisodes
	}
	if !IsNil(o.EnableAutomaticSeriesGrouping) {
		toSerialize["EnableAutomaticSeriesGrouping"] = o.EnableAutomaticSeriesGrouping
	}
	if !IsNil(o.EnableEmbeddedTitles) {
		toSerialize["EnableEmbeddedTitles"] = o.EnableEmbeddedTitles
	}
	if !IsNil(o.EnableAudioResume) {
		toSerialize["EnableAudioResume"] = o.EnableAudioResume
	}
	if !IsNil(o.AutomaticRefreshIntervalDays) {
		toSerialize["AutomaticRefreshIntervalDays"] = o.AutomaticRefreshIntervalDays
	}
	if !IsNil(o.PreferredMetadataLanguage) {
		toSerialize["PreferredMetadataLanguage"] = o.PreferredMetadataLanguage
	}
	if !IsNil(o.ContentType) {
		toSerialize["ContentType"] = o.ContentType
	}
	if !IsNil(o.MetadataCountryCode) {
		toSerialize["MetadataCountryCode"] = o.MetadataCountryCode
	}
	if !IsNil(o.SeasonZeroDisplayName) {
		toSerialize["SeasonZeroDisplayName"] = o.SeasonZeroDisplayName
	}
	if !IsNil(o.MetadataSavers) {
		toSerialize["MetadataSavers"] = o.MetadataSavers
	}
	if !IsNil(o.DisabledLocalMetadataReaders) {
		toSerialize["DisabledLocalMetadataReaders"] = o.DisabledLocalMetadataReaders
	}
	if !IsNil(o.LocalMetadataReaderOrder) {
		toSerialize["LocalMetadataReaderOrder"] = o.LocalMetadataReaderOrder
	}
	if !IsNil(o.DisabledSubtitleFetchers) {
		toSerialize["DisabledSubtitleFetchers"] = o.DisabledSubtitleFetchers
	}
	if !IsNil(o.SubtitleFetcherOrder) {
		toSerialize["SubtitleFetcherOrder"] = o.SubtitleFetcherOrder
	}
	if !IsNil(o.SkipSubtitlesIfEmbeddedSubtitlesPresent) {
		toSerialize["SkipSubtitlesIfEmbeddedSubtitlesPresent"] = o.SkipSubtitlesIfEmbeddedSubtitlesPresent
	}
	if !IsNil(o.SkipSubtitlesIfAudioTrackMatches) {
		toSerialize["SkipSubtitlesIfAudioTrackMatches"] = o.SkipSubtitlesIfAudioTrackMatches
	}
	if !IsNil(o.SubtitleDownloadLanguages) {
		toSerialize["SubtitleDownloadLanguages"] = o.SubtitleDownloadLanguages
	}
	if !IsNil(o.RequirePerfectSubtitleMatch) {
		toSerialize["RequirePerfectSubtitleMatch"] = o.RequirePerfectSubtitleMatch
	}
	if !IsNil(o.SaveSubtitlesWithMedia) {
		toSerialize["SaveSubtitlesWithMedia"] = o.SaveSubtitlesWithMedia
	}
	if !IsNil(o.ForcedSubtitlesOnly) {
		toSerialize["ForcedSubtitlesOnly"] = o.ForcedSubtitlesOnly
	}
	if !IsNil(o.TypeOptions) {
		toSerialize["TypeOptions"] = o.TypeOptions
	}
	if !IsNil(o.CollapseSingleItemFolders) {
		toSerialize["CollapseSingleItemFolders"] = o.CollapseSingleItemFolders
	}
	if !IsNil(o.MinResumePct) {
		toSerialize["MinResumePct"] = o.MinResumePct
	}
	if !IsNil(o.MaxResumePct) {
		toSerialize["MaxResumePct"] = o.MaxResumePct
	}
	if !IsNil(o.MinResumeDurationSeconds) {
		toSerialize["MinResumeDurationSeconds"] = o.MinResumeDurationSeconds
	}
	if !IsNil(o.ThumbnailImagesIntervalSeconds) {
		toSerialize["ThumbnailImagesIntervalSeconds"] = o.ThumbnailImagesIntervalSeconds
	}
	return toSerialize, nil
}

type NullableConfigurationLibraryOptions struct {
	value *ConfigurationLibraryOptions
	isSet bool
}

func (v NullableConfigurationLibraryOptions) Get() *ConfigurationLibraryOptions {
	return v.value
}

func (v *NullableConfigurationLibraryOptions) Set(val *ConfigurationLibraryOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationLibraryOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationLibraryOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationLibraryOptions(val *ConfigurationLibraryOptions) *NullableConfigurationLibraryOptions {
	return &NullableConfigurationLibraryOptions{value: val, isSet: true}
}

func (v NullableConfigurationLibraryOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationLibraryOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


