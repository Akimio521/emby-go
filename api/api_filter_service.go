/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type FilterServiceAPI interface {

	/*
	GetItemsFilters Gets branding configuration

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetItemsFiltersRequest
	*/
	GetItemsFilters(ctx context.Context) ApiGetItemsFiltersRequest

	// GetItemsFiltersExecute executes the request
	//  @return QueryFiltersLegacy
	GetItemsFiltersExecute(r ApiGetItemsFiltersRequest) (*QueryFiltersLegacy, *http.Response, error)

	/*
	GetItemsFilters2 Gets branding configuration

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetItemsFilters2Request
	*/
	GetItemsFilters2(ctx context.Context) ApiGetItemsFilters2Request

	// GetItemsFilters2Execute executes the request
	//  @return QueryFilters
	GetItemsFilters2Execute(r ApiGetItemsFilters2Request) (*QueryFilters, *http.Response, error)
}

// FilterServiceAPIService FilterServiceAPI service
type FilterServiceAPIService service

type ApiGetItemsFiltersRequest struct {
	ctx context.Context
	ApiService FilterServiceAPI
	userId *string
	parentId *string
	includeItemTypes *string
	mediaTypes *string
}

// User Id
func (r ApiGetItemsFiltersRequest) UserId(userId string) ApiGetItemsFiltersRequest {
	r.userId = &userId
	return r
}

// Specify this to localize the search to a specific item or folder. Omit to use the root
func (r ApiGetItemsFiltersRequest) ParentId(parentId string) ApiGetItemsFiltersRequest {
	r.parentId = &parentId
	return r
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r ApiGetItemsFiltersRequest) IncludeItemTypes(includeItemTypes string) ApiGetItemsFiltersRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Optional filter by MediaType. Allows multiple, comma delimited.
func (r ApiGetItemsFiltersRequest) MediaTypes(mediaTypes string) ApiGetItemsFiltersRequest {
	r.mediaTypes = &mediaTypes
	return r
}

func (r ApiGetItemsFiltersRequest) Execute() (*QueryFiltersLegacy, *http.Response, error) {
	return r.ApiService.GetItemsFiltersExecute(r)
}

/*
GetItemsFilters Gets branding configuration

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetItemsFiltersRequest
*/
func (a *FilterServiceAPIService) GetItemsFilters(ctx context.Context) ApiGetItemsFiltersRequest {
	return ApiGetItemsFiltersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return QueryFiltersLegacy
func (a *FilterServiceAPIService) GetItemsFiltersExecute(r ApiGetItemsFiltersRequest) (*QueryFiltersLegacy, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryFiltersLegacy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilterServiceAPIService.GetItemsFilters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/Filters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "form", "")
	}
	if r.parentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ParentId", r.parentId, "form", "")
	}
	if r.includeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeItemTypes", r.includeItemTypes, "form", "")
	}
	if r.mediaTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MediaTypes", r.mediaTypes, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetItemsFilters2Request struct {
	ctx context.Context
	ApiService FilterServiceAPI
	userId *string
	parentId *string
	includeItemTypes *string
	mediaTypes *string
}

// User Id
func (r ApiGetItemsFilters2Request) UserId(userId string) ApiGetItemsFilters2Request {
	r.userId = &userId
	return r
}

// Specify this to localize the search to a specific item or folder. Omit to use the root
func (r ApiGetItemsFilters2Request) ParentId(parentId string) ApiGetItemsFilters2Request {
	r.parentId = &parentId
	return r
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r ApiGetItemsFilters2Request) IncludeItemTypes(includeItemTypes string) ApiGetItemsFilters2Request {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Optional filter by MediaType. Allows multiple, comma delimited.
func (r ApiGetItemsFilters2Request) MediaTypes(mediaTypes string) ApiGetItemsFilters2Request {
	r.mediaTypes = &mediaTypes
	return r
}

func (r ApiGetItemsFilters2Request) Execute() (*QueryFilters, *http.Response, error) {
	return r.ApiService.GetItemsFilters2Execute(r)
}

/*
GetItemsFilters2 Gets branding configuration

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetItemsFilters2Request
*/
func (a *FilterServiceAPIService) GetItemsFilters2(ctx context.Context) ApiGetItemsFilters2Request {
	return ApiGetItemsFilters2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return QueryFilters
func (a *FilterServiceAPIService) GetItemsFilters2Execute(r ApiGetItemsFilters2Request) (*QueryFilters, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryFilters
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilterServiceAPIService.GetItemsFilters2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/Filters2"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "form", "")
	}
	if r.parentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ParentId", r.parentId, "form", "")
	}
	if r.includeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeItemTypes", r.includeItemTypes, "form", "")
	}
	if r.mediaTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MediaTypes", r.mediaTypes, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
