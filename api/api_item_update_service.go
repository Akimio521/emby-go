/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ItemUpdateServiceAPI interface {

	/*
	GetItemsByItemidMetadataeditor Gets metadata editor info for an item

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId The id of the item
	@return ApiGetItemsByItemidMetadataeditorRequest
	*/
	GetItemsByItemidMetadataeditor(ctx context.Context, itemId string) ApiGetItemsByItemidMetadataeditorRequest

	// GetItemsByItemidMetadataeditorExecute executes the request
	//  @return MetadataEditorInfo
	GetItemsByItemidMetadataeditorExecute(r ApiGetItemsByItemidMetadataeditorRequest) (*MetadataEditorInfo, *http.Response, error)

	/*
	PostItemsByItemid Updates an item

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId The id of the item
	@return ApiPostItemsByItemidRequest
	*/
	PostItemsByItemid(ctx context.Context, itemId string) ApiPostItemsByItemidRequest

	// PostItemsByItemidExecute executes the request
	PostItemsByItemidExecute(r ApiPostItemsByItemidRequest) (*http.Response, error)
}

// ItemUpdateServiceAPIService ItemUpdateServiceAPI service
type ItemUpdateServiceAPIService service

type ApiGetItemsByItemidMetadataeditorRequest struct {
	ctx context.Context
	ApiService ItemUpdateServiceAPI
	itemId string
}

func (r ApiGetItemsByItemidMetadataeditorRequest) Execute() (*MetadataEditorInfo, *http.Response, error) {
	return r.ApiService.GetItemsByItemidMetadataeditorExecute(r)
}

/*
GetItemsByItemidMetadataeditor Gets metadata editor info for an item

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The id of the item
 @return ApiGetItemsByItemidMetadataeditorRequest
*/
func (a *ItemUpdateServiceAPIService) GetItemsByItemidMetadataeditor(ctx context.Context, itemId string) ApiGetItemsByItemidMetadataeditorRequest {
	return ApiGetItemsByItemidMetadataeditorRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
//  @return MetadataEditorInfo
func (a *ItemUpdateServiceAPIService) GetItemsByItemidMetadataeditorExecute(r ApiGetItemsByItemidMetadataeditorRequest) (*MetadataEditorInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MetadataEditorInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemUpdateServiceAPIService.GetItemsByItemidMetadataeditor")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{ItemId}/MetadataEditor"
	localVarPath = strings.Replace(localVarPath, "{"+"ItemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostItemsByItemidRequest struct {
	ctx context.Context
	ApiService ItemUpdateServiceAPI
	itemId string
	baseItemDto *BaseItemDto
}

// BaseItemDto: 
func (r ApiPostItemsByItemidRequest) BaseItemDto(baseItemDto BaseItemDto) ApiPostItemsByItemidRequest {
	r.baseItemDto = &baseItemDto
	return r
}

func (r ApiPostItemsByItemidRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostItemsByItemidExecute(r)
}

/*
PostItemsByItemid Updates an item

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The id of the item
 @return ApiPostItemsByItemidRequest
*/
func (a *ItemUpdateServiceAPIService) PostItemsByItemid(ctx context.Context, itemId string) ApiPostItemsByItemidRequest {
	return ApiPostItemsByItemidRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
func (a *ItemUpdateServiceAPIService) PostItemsByItemidExecute(r ApiPostItemsByItemidRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemUpdateServiceAPIService.PostItemsByItemid")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{ItemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ItemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.baseItemDto == nil {
		return nil, reportError("baseItemDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.baseItemDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
