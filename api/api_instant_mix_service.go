/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type InstantMixServiceAPI interface {

	/*
	GetAlbumsByIdInstantmix Creates an instant playlist based on a given album

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@return ApiGetAlbumsByIdInstantmixRequest
	*/
	GetAlbumsByIdInstantmix(ctx context.Context, id string) ApiGetAlbumsByIdInstantmixRequest

	// GetAlbumsByIdInstantmixExecute executes the request
	//  @return QueryResultBaseItemDto
	GetAlbumsByIdInstantmixExecute(r ApiGetAlbumsByIdInstantmixRequest) (*QueryResultBaseItemDto, *http.Response, error)

	/*
	GetArtistsInstantmix Creates an instant playlist based on a given artist

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetArtistsInstantmixRequest
	*/
	GetArtistsInstantmix(ctx context.Context) ApiGetArtistsInstantmixRequest

	// GetArtistsInstantmixExecute executes the request
	//  @return QueryResultBaseItemDto
	GetArtistsInstantmixExecute(r ApiGetArtistsInstantmixRequest) (*QueryResultBaseItemDto, *http.Response, error)

	/*
	GetItemsByIdInstantmix Creates an instant playlist based on a given item

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@return ApiGetItemsByIdInstantmixRequest
	*/
	GetItemsByIdInstantmix(ctx context.Context, id string) ApiGetItemsByIdInstantmixRequest

	// GetItemsByIdInstantmixExecute executes the request
	//  @return QueryResultBaseItemDto
	GetItemsByIdInstantmixExecute(r ApiGetItemsByIdInstantmixRequest) (*QueryResultBaseItemDto, *http.Response, error)

	/*
	GetMusicgenresByNameInstantmix Creates an instant playlist based on a music genre

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name The genre name
	@return ApiGetMusicgenresByNameInstantmixRequest
	*/
	GetMusicgenresByNameInstantmix(ctx context.Context, name string) ApiGetMusicgenresByNameInstantmixRequest

	// GetMusicgenresByNameInstantmixExecute executes the request
	//  @return QueryResultBaseItemDto
	GetMusicgenresByNameInstantmixExecute(r ApiGetMusicgenresByNameInstantmixRequest) (*QueryResultBaseItemDto, *http.Response, error)

	/*
	GetMusicgenresInstantmix Creates an instant playlist based on a music genre

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetMusicgenresInstantmixRequest
	*/
	GetMusicgenresInstantmix(ctx context.Context) ApiGetMusicgenresInstantmixRequest

	// GetMusicgenresInstantmixExecute executes the request
	//  @return QueryResultBaseItemDto
	GetMusicgenresInstantmixExecute(r ApiGetMusicgenresInstantmixRequest) (*QueryResultBaseItemDto, *http.Response, error)

	/*
	GetPlaylistsByIdInstantmix Creates an instant playlist based on a given playlist

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@return ApiGetPlaylistsByIdInstantmixRequest
	*/
	GetPlaylistsByIdInstantmix(ctx context.Context, id string) ApiGetPlaylistsByIdInstantmixRequest

	// GetPlaylistsByIdInstantmixExecute executes the request
	//  @return QueryResultBaseItemDto
	GetPlaylistsByIdInstantmixExecute(r ApiGetPlaylistsByIdInstantmixRequest) (*QueryResultBaseItemDto, *http.Response, error)

	/*
	GetSongsByIdInstantmix Creates an instant playlist based on a given song

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@return ApiGetSongsByIdInstantmixRequest
	*/
	GetSongsByIdInstantmix(ctx context.Context, id string) ApiGetSongsByIdInstantmixRequest

	// GetSongsByIdInstantmixExecute executes the request
	//  @return QueryResultBaseItemDto
	GetSongsByIdInstantmixExecute(r ApiGetSongsByIdInstantmixRequest) (*QueryResultBaseItemDto, *http.Response, error)
}

// InstantMixServiceAPIService InstantMixServiceAPI service
type InstantMixServiceAPIService service

type ApiGetAlbumsByIdInstantmixRequest struct {
	ctx context.Context
	ApiService InstantMixServiceAPI
	id string
	includeItemTypes *string
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *string
	userId *string
	limit *int32
	fields *string
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r ApiGetAlbumsByIdInstantmixRequest) IncludeItemTypes(includeItemTypes string) ApiGetAlbumsByIdInstantmixRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Optional, include image information in output
func (r ApiGetAlbumsByIdInstantmixRequest) EnableImages(enableImages bool) ApiGetAlbumsByIdInstantmixRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, include user data
func (r ApiGetAlbumsByIdInstantmixRequest) EnableUserData(enableUserData bool) ApiGetAlbumsByIdInstantmixRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional, the max number of images to return, per image type
func (r ApiGetAlbumsByIdInstantmixRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetAlbumsByIdInstantmixRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetAlbumsByIdInstantmixRequest) EnableImageTypes(enableImageTypes string) ApiGetAlbumsByIdInstantmixRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional. Filter by user id, and attach user data
func (r ApiGetAlbumsByIdInstantmixRequest) UserId(userId string) ApiGetAlbumsByIdInstantmixRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return
func (r ApiGetAlbumsByIdInstantmixRequest) Limit(limit int32) ApiGetAlbumsByIdInstantmixRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
func (r ApiGetAlbumsByIdInstantmixRequest) Fields(fields string) ApiGetAlbumsByIdInstantmixRequest {
	r.fields = &fields
	return r
}

func (r ApiGetAlbumsByIdInstantmixRequest) Execute() (*QueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetAlbumsByIdInstantmixExecute(r)
}

/*
GetAlbumsByIdInstantmix Creates an instant playlist based on a given album

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return ApiGetAlbumsByIdInstantmixRequest
*/
func (a *InstantMixServiceAPIService) GetAlbumsByIdInstantmix(ctx context.Context, id string) ApiGetAlbumsByIdInstantmixRequest {
	return ApiGetAlbumsByIdInstantmixRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return QueryResultBaseItemDto
func (a *InstantMixServiceAPIService) GetAlbumsByIdInstantmixExecute(r ApiGetAlbumsByIdInstantmixRequest) (*QueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixServiceAPIService.GetAlbumsByIdInstantmix")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Albums/{Id}/InstantMix"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeItemTypes", r.includeItemTypes, "form", "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "form", "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetArtistsInstantmixRequest struct {
	ctx context.Context
	ApiService InstantMixServiceAPI
	id *string
	includeItemTypes *string
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *string
	userId *string
	limit *int32
	fields *string
}

// The artist Id
func (r ApiGetArtistsInstantmixRequest) Id(id string) ApiGetArtistsInstantmixRequest {
	r.id = &id
	return r
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r ApiGetArtistsInstantmixRequest) IncludeItemTypes(includeItemTypes string) ApiGetArtistsInstantmixRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Optional, include image information in output
func (r ApiGetArtistsInstantmixRequest) EnableImages(enableImages bool) ApiGetArtistsInstantmixRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, include user data
func (r ApiGetArtistsInstantmixRequest) EnableUserData(enableUserData bool) ApiGetArtistsInstantmixRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional, the max number of images to return, per image type
func (r ApiGetArtistsInstantmixRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetArtistsInstantmixRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetArtistsInstantmixRequest) EnableImageTypes(enableImageTypes string) ApiGetArtistsInstantmixRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional. Filter by user id, and attach user data
func (r ApiGetArtistsInstantmixRequest) UserId(userId string) ApiGetArtistsInstantmixRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return
func (r ApiGetArtistsInstantmixRequest) Limit(limit int32) ApiGetArtistsInstantmixRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
func (r ApiGetArtistsInstantmixRequest) Fields(fields string) ApiGetArtistsInstantmixRequest {
	r.fields = &fields
	return r
}

func (r ApiGetArtistsInstantmixRequest) Execute() (*QueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetArtistsInstantmixExecute(r)
}

/*
GetArtistsInstantmix Creates an instant playlist based on a given artist

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetArtistsInstantmixRequest
*/
func (a *InstantMixServiceAPIService) GetArtistsInstantmix(ctx context.Context) ApiGetArtistsInstantmixRequest {
	return ApiGetArtistsInstantmixRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return QueryResultBaseItemDto
func (a *InstantMixServiceAPIService) GetArtistsInstantmixExecute(r ApiGetArtistsInstantmixRequest) (*QueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixServiceAPIService.GetArtistsInstantmix")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Artists/InstantMix"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Id", r.id, "form", "")
	if r.includeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeItemTypes", r.includeItemTypes, "form", "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "form", "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetItemsByIdInstantmixRequest struct {
	ctx context.Context
	ApiService InstantMixServiceAPI
	id string
	includeItemTypes *string
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *string
	userId *string
	limit *int32
	fields *string
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r ApiGetItemsByIdInstantmixRequest) IncludeItemTypes(includeItemTypes string) ApiGetItemsByIdInstantmixRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Optional, include image information in output
func (r ApiGetItemsByIdInstantmixRequest) EnableImages(enableImages bool) ApiGetItemsByIdInstantmixRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, include user data
func (r ApiGetItemsByIdInstantmixRequest) EnableUserData(enableUserData bool) ApiGetItemsByIdInstantmixRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional, the max number of images to return, per image type
func (r ApiGetItemsByIdInstantmixRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetItemsByIdInstantmixRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetItemsByIdInstantmixRequest) EnableImageTypes(enableImageTypes string) ApiGetItemsByIdInstantmixRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional. Filter by user id, and attach user data
func (r ApiGetItemsByIdInstantmixRequest) UserId(userId string) ApiGetItemsByIdInstantmixRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return
func (r ApiGetItemsByIdInstantmixRequest) Limit(limit int32) ApiGetItemsByIdInstantmixRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
func (r ApiGetItemsByIdInstantmixRequest) Fields(fields string) ApiGetItemsByIdInstantmixRequest {
	r.fields = &fields
	return r
}

func (r ApiGetItemsByIdInstantmixRequest) Execute() (*QueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetItemsByIdInstantmixExecute(r)
}

/*
GetItemsByIdInstantmix Creates an instant playlist based on a given item

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return ApiGetItemsByIdInstantmixRequest
*/
func (a *InstantMixServiceAPIService) GetItemsByIdInstantmix(ctx context.Context, id string) ApiGetItemsByIdInstantmixRequest {
	return ApiGetItemsByIdInstantmixRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return QueryResultBaseItemDto
func (a *InstantMixServiceAPIService) GetItemsByIdInstantmixExecute(r ApiGetItemsByIdInstantmixRequest) (*QueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixServiceAPIService.GetItemsByIdInstantmix")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/InstantMix"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeItemTypes", r.includeItemTypes, "form", "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "form", "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMusicgenresByNameInstantmixRequest struct {
	ctx context.Context
	ApiService InstantMixServiceAPI
	name string
	includeItemTypes *string
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *string
	userId *string
	limit *int32
	fields *string
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r ApiGetMusicgenresByNameInstantmixRequest) IncludeItemTypes(includeItemTypes string) ApiGetMusicgenresByNameInstantmixRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Optional, include image information in output
func (r ApiGetMusicgenresByNameInstantmixRequest) EnableImages(enableImages bool) ApiGetMusicgenresByNameInstantmixRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, include user data
func (r ApiGetMusicgenresByNameInstantmixRequest) EnableUserData(enableUserData bool) ApiGetMusicgenresByNameInstantmixRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional, the max number of images to return, per image type
func (r ApiGetMusicgenresByNameInstantmixRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetMusicgenresByNameInstantmixRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetMusicgenresByNameInstantmixRequest) EnableImageTypes(enableImageTypes string) ApiGetMusicgenresByNameInstantmixRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional. Filter by user id, and attach user data
func (r ApiGetMusicgenresByNameInstantmixRequest) UserId(userId string) ApiGetMusicgenresByNameInstantmixRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return
func (r ApiGetMusicgenresByNameInstantmixRequest) Limit(limit int32) ApiGetMusicgenresByNameInstantmixRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
func (r ApiGetMusicgenresByNameInstantmixRequest) Fields(fields string) ApiGetMusicgenresByNameInstantmixRequest {
	r.fields = &fields
	return r
}

func (r ApiGetMusicgenresByNameInstantmixRequest) Execute() (*QueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetMusicgenresByNameInstantmixExecute(r)
}

/*
GetMusicgenresByNameInstantmix Creates an instant playlist based on a music genre

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name The genre name
 @return ApiGetMusicgenresByNameInstantmixRequest
*/
func (a *InstantMixServiceAPIService) GetMusicgenresByNameInstantmix(ctx context.Context, name string) ApiGetMusicgenresByNameInstantmixRequest {
	return ApiGetMusicgenresByNameInstantmixRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return QueryResultBaseItemDto
func (a *InstantMixServiceAPIService) GetMusicgenresByNameInstantmixExecute(r ApiGetMusicgenresByNameInstantmixRequest) (*QueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixServiceAPIService.GetMusicgenresByNameInstantmix")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/MusicGenres/{Name}/InstantMix"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeItemTypes", r.includeItemTypes, "form", "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "form", "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMusicgenresInstantmixRequest struct {
	ctx context.Context
	ApiService InstantMixServiceAPI
	id *string
	includeItemTypes *string
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *string
	userId *string
	limit *int32
	fields *string
}

// The genre Id
func (r ApiGetMusicgenresInstantmixRequest) Id(id string) ApiGetMusicgenresInstantmixRequest {
	r.id = &id
	return r
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r ApiGetMusicgenresInstantmixRequest) IncludeItemTypes(includeItemTypes string) ApiGetMusicgenresInstantmixRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Optional, include image information in output
func (r ApiGetMusicgenresInstantmixRequest) EnableImages(enableImages bool) ApiGetMusicgenresInstantmixRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, include user data
func (r ApiGetMusicgenresInstantmixRequest) EnableUserData(enableUserData bool) ApiGetMusicgenresInstantmixRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional, the max number of images to return, per image type
func (r ApiGetMusicgenresInstantmixRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetMusicgenresInstantmixRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetMusicgenresInstantmixRequest) EnableImageTypes(enableImageTypes string) ApiGetMusicgenresInstantmixRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional. Filter by user id, and attach user data
func (r ApiGetMusicgenresInstantmixRequest) UserId(userId string) ApiGetMusicgenresInstantmixRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return
func (r ApiGetMusicgenresInstantmixRequest) Limit(limit int32) ApiGetMusicgenresInstantmixRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
func (r ApiGetMusicgenresInstantmixRequest) Fields(fields string) ApiGetMusicgenresInstantmixRequest {
	r.fields = &fields
	return r
}

func (r ApiGetMusicgenresInstantmixRequest) Execute() (*QueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetMusicgenresInstantmixExecute(r)
}

/*
GetMusicgenresInstantmix Creates an instant playlist based on a music genre

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetMusicgenresInstantmixRequest
*/
func (a *InstantMixServiceAPIService) GetMusicgenresInstantmix(ctx context.Context) ApiGetMusicgenresInstantmixRequest {
	return ApiGetMusicgenresInstantmixRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return QueryResultBaseItemDto
func (a *InstantMixServiceAPIService) GetMusicgenresInstantmixExecute(r ApiGetMusicgenresInstantmixRequest) (*QueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixServiceAPIService.GetMusicgenresInstantmix")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/MusicGenres/InstantMix"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Id", r.id, "form", "")
	if r.includeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeItemTypes", r.includeItemTypes, "form", "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "form", "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPlaylistsByIdInstantmixRequest struct {
	ctx context.Context
	ApiService InstantMixServiceAPI
	id string
	includeItemTypes *string
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *string
	userId *string
	limit *int32
	fields *string
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r ApiGetPlaylistsByIdInstantmixRequest) IncludeItemTypes(includeItemTypes string) ApiGetPlaylistsByIdInstantmixRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Optional, include image information in output
func (r ApiGetPlaylistsByIdInstantmixRequest) EnableImages(enableImages bool) ApiGetPlaylistsByIdInstantmixRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, include user data
func (r ApiGetPlaylistsByIdInstantmixRequest) EnableUserData(enableUserData bool) ApiGetPlaylistsByIdInstantmixRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional, the max number of images to return, per image type
func (r ApiGetPlaylistsByIdInstantmixRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetPlaylistsByIdInstantmixRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetPlaylistsByIdInstantmixRequest) EnableImageTypes(enableImageTypes string) ApiGetPlaylistsByIdInstantmixRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional. Filter by user id, and attach user data
func (r ApiGetPlaylistsByIdInstantmixRequest) UserId(userId string) ApiGetPlaylistsByIdInstantmixRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return
func (r ApiGetPlaylistsByIdInstantmixRequest) Limit(limit int32) ApiGetPlaylistsByIdInstantmixRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
func (r ApiGetPlaylistsByIdInstantmixRequest) Fields(fields string) ApiGetPlaylistsByIdInstantmixRequest {
	r.fields = &fields
	return r
}

func (r ApiGetPlaylistsByIdInstantmixRequest) Execute() (*QueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetPlaylistsByIdInstantmixExecute(r)
}

/*
GetPlaylistsByIdInstantmix Creates an instant playlist based on a given playlist

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return ApiGetPlaylistsByIdInstantmixRequest
*/
func (a *InstantMixServiceAPIService) GetPlaylistsByIdInstantmix(ctx context.Context, id string) ApiGetPlaylistsByIdInstantmixRequest {
	return ApiGetPlaylistsByIdInstantmixRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return QueryResultBaseItemDto
func (a *InstantMixServiceAPIService) GetPlaylistsByIdInstantmixExecute(r ApiGetPlaylistsByIdInstantmixRequest) (*QueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixServiceAPIService.GetPlaylistsByIdInstantmix")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Playlists/{Id}/InstantMix"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeItemTypes", r.includeItemTypes, "form", "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "form", "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSongsByIdInstantmixRequest struct {
	ctx context.Context
	ApiService InstantMixServiceAPI
	id string
	includeItemTypes *string
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *string
	userId *string
	limit *int32
	fields *string
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r ApiGetSongsByIdInstantmixRequest) IncludeItemTypes(includeItemTypes string) ApiGetSongsByIdInstantmixRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Optional, include image information in output
func (r ApiGetSongsByIdInstantmixRequest) EnableImages(enableImages bool) ApiGetSongsByIdInstantmixRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, include user data
func (r ApiGetSongsByIdInstantmixRequest) EnableUserData(enableUserData bool) ApiGetSongsByIdInstantmixRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional, the max number of images to return, per image type
func (r ApiGetSongsByIdInstantmixRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetSongsByIdInstantmixRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetSongsByIdInstantmixRequest) EnableImageTypes(enableImageTypes string) ApiGetSongsByIdInstantmixRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional. Filter by user id, and attach user data
func (r ApiGetSongsByIdInstantmixRequest) UserId(userId string) ApiGetSongsByIdInstantmixRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return
func (r ApiGetSongsByIdInstantmixRequest) Limit(limit int32) ApiGetSongsByIdInstantmixRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
func (r ApiGetSongsByIdInstantmixRequest) Fields(fields string) ApiGetSongsByIdInstantmixRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSongsByIdInstantmixRequest) Execute() (*QueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetSongsByIdInstantmixExecute(r)
}

/*
GetSongsByIdInstantmix Creates an instant playlist based on a given song

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return ApiGetSongsByIdInstantmixRequest
*/
func (a *InstantMixServiceAPIService) GetSongsByIdInstantmix(ctx context.Context, id string) ApiGetSongsByIdInstantmixRequest {
	return ApiGetSongsByIdInstantmixRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return QueryResultBaseItemDto
func (a *InstantMixServiceAPIService) GetSongsByIdInstantmixExecute(r ApiGetSongsByIdInstantmixRequest) (*QueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixServiceAPIService.GetSongsByIdInstantmix")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Songs/{Id}/InstantMix"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeItemTypes", r.includeItemTypes, "form", "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "form", "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
