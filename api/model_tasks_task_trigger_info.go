/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the TasksTaskTriggerInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TasksTaskTriggerInfo{}

// TasksTaskTriggerInfo struct for TasksTaskTriggerInfo
type TasksTaskTriggerInfo struct {
	Type *string `json:"Type,omitempty"`
	TimeOfDayTicks NullableInt64 `json:"TimeOfDayTicks,omitempty"`
	IntervalTicks NullableInt64 `json:"IntervalTicks,omitempty"`
	SystemEvent *string `json:"SystemEvent,omitempty"`
	DayOfWeek *string `json:"DayOfWeek,omitempty"`
	MaxRuntimeTicks NullableInt64 `json:"MaxRuntimeTicks,omitempty"`
}

// NewTasksTaskTriggerInfo instantiates a new TasksTaskTriggerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTasksTaskTriggerInfo() *TasksTaskTriggerInfo {
	this := TasksTaskTriggerInfo{}
	return &this
}

// NewTasksTaskTriggerInfoWithDefaults instantiates a new TasksTaskTriggerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTasksTaskTriggerInfoWithDefaults() *TasksTaskTriggerInfo {
	this := TasksTaskTriggerInfo{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TasksTaskTriggerInfo) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TasksTaskTriggerInfo) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TasksTaskTriggerInfo) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TasksTaskTriggerInfo) SetType(v string) {
	o.Type = &v
}

// GetTimeOfDayTicks returns the TimeOfDayTicks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TasksTaskTriggerInfo) GetTimeOfDayTicks() int64 {
	if o == nil || IsNil(o.TimeOfDayTicks.Get()) {
		var ret int64
		return ret
	}
	return *o.TimeOfDayTicks.Get()
}

// GetTimeOfDayTicksOk returns a tuple with the TimeOfDayTicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TasksTaskTriggerInfo) GetTimeOfDayTicksOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimeOfDayTicks.Get(), o.TimeOfDayTicks.IsSet()
}

// HasTimeOfDayTicks returns a boolean if a field has been set.
func (o *TasksTaskTriggerInfo) HasTimeOfDayTicks() bool {
	if o != nil && o.TimeOfDayTicks.IsSet() {
		return true
	}

	return false
}

// SetTimeOfDayTicks gets a reference to the given NullableInt64 and assigns it to the TimeOfDayTicks field.
func (o *TasksTaskTriggerInfo) SetTimeOfDayTicks(v int64) {
	o.TimeOfDayTicks.Set(&v)
}
// SetTimeOfDayTicksNil sets the value for TimeOfDayTicks to be an explicit nil
func (o *TasksTaskTriggerInfo) SetTimeOfDayTicksNil() {
	o.TimeOfDayTicks.Set(nil)
}

// UnsetTimeOfDayTicks ensures that no value is present for TimeOfDayTicks, not even an explicit nil
func (o *TasksTaskTriggerInfo) UnsetTimeOfDayTicks() {
	o.TimeOfDayTicks.Unset()
}

// GetIntervalTicks returns the IntervalTicks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TasksTaskTriggerInfo) GetIntervalTicks() int64 {
	if o == nil || IsNil(o.IntervalTicks.Get()) {
		var ret int64
		return ret
	}
	return *o.IntervalTicks.Get()
}

// GetIntervalTicksOk returns a tuple with the IntervalTicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TasksTaskTriggerInfo) GetIntervalTicksOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.IntervalTicks.Get(), o.IntervalTicks.IsSet()
}

// HasIntervalTicks returns a boolean if a field has been set.
func (o *TasksTaskTriggerInfo) HasIntervalTicks() bool {
	if o != nil && o.IntervalTicks.IsSet() {
		return true
	}

	return false
}

// SetIntervalTicks gets a reference to the given NullableInt64 and assigns it to the IntervalTicks field.
func (o *TasksTaskTriggerInfo) SetIntervalTicks(v int64) {
	o.IntervalTicks.Set(&v)
}
// SetIntervalTicksNil sets the value for IntervalTicks to be an explicit nil
func (o *TasksTaskTriggerInfo) SetIntervalTicksNil() {
	o.IntervalTicks.Set(nil)
}

// UnsetIntervalTicks ensures that no value is present for IntervalTicks, not even an explicit nil
func (o *TasksTaskTriggerInfo) UnsetIntervalTicks() {
	o.IntervalTicks.Unset()
}

// GetSystemEvent returns the SystemEvent field value if set, zero value otherwise.
func (o *TasksTaskTriggerInfo) GetSystemEvent() string {
	if o == nil || IsNil(o.SystemEvent) {
		var ret string
		return ret
	}
	return *o.SystemEvent
}

// GetSystemEventOk returns a tuple with the SystemEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TasksTaskTriggerInfo) GetSystemEventOk() (*string, bool) {
	if o == nil || IsNil(o.SystemEvent) {
		return nil, false
	}
	return o.SystemEvent, true
}

// HasSystemEvent returns a boolean if a field has been set.
func (o *TasksTaskTriggerInfo) HasSystemEvent() bool {
	if o != nil && !IsNil(o.SystemEvent) {
		return true
	}

	return false
}

// SetSystemEvent gets a reference to the given string and assigns it to the SystemEvent field.
func (o *TasksTaskTriggerInfo) SetSystemEvent(v string) {
	o.SystemEvent = &v
}

// GetDayOfWeek returns the DayOfWeek field value if set, zero value otherwise.
func (o *TasksTaskTriggerInfo) GetDayOfWeek() string {
	if o == nil || IsNil(o.DayOfWeek) {
		var ret string
		return ret
	}
	return *o.DayOfWeek
}

// GetDayOfWeekOk returns a tuple with the DayOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TasksTaskTriggerInfo) GetDayOfWeekOk() (*string, bool) {
	if o == nil || IsNil(o.DayOfWeek) {
		return nil, false
	}
	return o.DayOfWeek, true
}

// HasDayOfWeek returns a boolean if a field has been set.
func (o *TasksTaskTriggerInfo) HasDayOfWeek() bool {
	if o != nil && !IsNil(o.DayOfWeek) {
		return true
	}

	return false
}

// SetDayOfWeek gets a reference to the given string and assigns it to the DayOfWeek field.
func (o *TasksTaskTriggerInfo) SetDayOfWeek(v string) {
	o.DayOfWeek = &v
}

// GetMaxRuntimeTicks returns the MaxRuntimeTicks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TasksTaskTriggerInfo) GetMaxRuntimeTicks() int64 {
	if o == nil || IsNil(o.MaxRuntimeTicks.Get()) {
		var ret int64
		return ret
	}
	return *o.MaxRuntimeTicks.Get()
}

// GetMaxRuntimeTicksOk returns a tuple with the MaxRuntimeTicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TasksTaskTriggerInfo) GetMaxRuntimeTicksOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxRuntimeTicks.Get(), o.MaxRuntimeTicks.IsSet()
}

// HasMaxRuntimeTicks returns a boolean if a field has been set.
func (o *TasksTaskTriggerInfo) HasMaxRuntimeTicks() bool {
	if o != nil && o.MaxRuntimeTicks.IsSet() {
		return true
	}

	return false
}

// SetMaxRuntimeTicks gets a reference to the given NullableInt64 and assigns it to the MaxRuntimeTicks field.
func (o *TasksTaskTriggerInfo) SetMaxRuntimeTicks(v int64) {
	o.MaxRuntimeTicks.Set(&v)
}
// SetMaxRuntimeTicksNil sets the value for MaxRuntimeTicks to be an explicit nil
func (o *TasksTaskTriggerInfo) SetMaxRuntimeTicksNil() {
	o.MaxRuntimeTicks.Set(nil)
}

// UnsetMaxRuntimeTicks ensures that no value is present for MaxRuntimeTicks, not even an explicit nil
func (o *TasksTaskTriggerInfo) UnsetMaxRuntimeTicks() {
	o.MaxRuntimeTicks.Unset()
}

func (o TasksTaskTriggerInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TasksTaskTriggerInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if o.TimeOfDayTicks.IsSet() {
		toSerialize["TimeOfDayTicks"] = o.TimeOfDayTicks.Get()
	}
	if o.IntervalTicks.IsSet() {
		toSerialize["IntervalTicks"] = o.IntervalTicks.Get()
	}
	if !IsNil(o.SystemEvent) {
		toSerialize["SystemEvent"] = o.SystemEvent
	}
	if !IsNil(o.DayOfWeek) {
		toSerialize["DayOfWeek"] = o.DayOfWeek
	}
	if o.MaxRuntimeTicks.IsSet() {
		toSerialize["MaxRuntimeTicks"] = o.MaxRuntimeTicks.Get()
	}
	return toSerialize, nil
}

type NullableTasksTaskTriggerInfo struct {
	value *TasksTaskTriggerInfo
	isSet bool
}

func (v NullableTasksTaskTriggerInfo) Get() *TasksTaskTriggerInfo {
	return v.value
}

func (v *NullableTasksTaskTriggerInfo) Set(val *TasksTaskTriggerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTasksTaskTriggerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTasksTaskTriggerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTasksTaskTriggerInfo(val *TasksTaskTriggerInfo) *NullableTasksTaskTriggerInfo {
	return &NullableTasksTaskTriggerInfo{value: val, isSet: true}
}

func (v NullableTasksTaskTriggerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTasksTaskTriggerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


