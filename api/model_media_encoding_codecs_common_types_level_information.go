/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the MediaEncodingCodecsCommonTypesLevelInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaEncodingCodecsCommonTypesLevelInformation{}

// MediaEncodingCodecsCommonTypesLevelInformation struct for MediaEncodingCodecsCommonTypesLevelInformation
type MediaEncodingCodecsCommonTypesLevelInformation struct {
	ShortName *string `json:"ShortName,omitempty"`
	Description *string `json:"Description,omitempty"`
	Ordinal NullableInt32 `json:"Ordinal,omitempty"`
	MaxBitRate *MediaEncodingCodecsCommonTypesBitRate `json:"MaxBitRate,omitempty"`
	MaxBitRateDisplay *string `json:"MaxBitRateDisplay,omitempty"`
	Id *string `json:"Id,omitempty"`
	ResolutionRates []MediaEncodingCodecsCommonTypesResolutionWithRate `json:"ResolutionRates,omitempty"`
	ResolutionRateStrings []string `json:"ResolutionRateStrings,omitempty"`
	ResolutionRatesDisplay *string `json:"ResolutionRatesDisplay,omitempty"`
}

// NewMediaEncodingCodecsCommonTypesLevelInformation instantiates a new MediaEncodingCodecsCommonTypesLevelInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaEncodingCodecsCommonTypesLevelInformation() *MediaEncodingCodecsCommonTypesLevelInformation {
	this := MediaEncodingCodecsCommonTypesLevelInformation{}
	return &this
}

// NewMediaEncodingCodecsCommonTypesLevelInformationWithDefaults instantiates a new MediaEncodingCodecsCommonTypesLevelInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaEncodingCodecsCommonTypesLevelInformationWithDefaults() *MediaEncodingCodecsCommonTypesLevelInformation {
	this := MediaEncodingCodecsCommonTypesLevelInformation{}
	return &this
}

// GetShortName returns the ShortName field value if set, zero value otherwise.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) GetShortName() string {
	if o == nil || IsNil(o.ShortName) {
		var ret string
		return ret
	}
	return *o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) GetShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShortName) {
		return nil, false
	}
	return o.ShortName, true
}

// HasShortName returns a boolean if a field has been set.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) HasShortName() bool {
	if o != nil && !IsNil(o.ShortName) {
		return true
	}

	return false
}

// SetShortName gets a reference to the given string and assigns it to the ShortName field.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) SetShortName(v string) {
	o.ShortName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) SetDescription(v string) {
	o.Description = &v
}

// GetOrdinal returns the Ordinal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaEncodingCodecsCommonTypesLevelInformation) GetOrdinal() int32 {
	if o == nil || IsNil(o.Ordinal.Get()) {
		var ret int32
		return ret
	}
	return *o.Ordinal.Get()
}

// GetOrdinalOk returns a tuple with the Ordinal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaEncodingCodecsCommonTypesLevelInformation) GetOrdinalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ordinal.Get(), o.Ordinal.IsSet()
}

// HasOrdinal returns a boolean if a field has been set.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) HasOrdinal() bool {
	if o != nil && o.Ordinal.IsSet() {
		return true
	}

	return false
}

// SetOrdinal gets a reference to the given NullableInt32 and assigns it to the Ordinal field.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) SetOrdinal(v int32) {
	o.Ordinal.Set(&v)
}
// SetOrdinalNil sets the value for Ordinal to be an explicit nil
func (o *MediaEncodingCodecsCommonTypesLevelInformation) SetOrdinalNil() {
	o.Ordinal.Set(nil)
}

// UnsetOrdinal ensures that no value is present for Ordinal, not even an explicit nil
func (o *MediaEncodingCodecsCommonTypesLevelInformation) UnsetOrdinal() {
	o.Ordinal.Unset()
}

// GetMaxBitRate returns the MaxBitRate field value if set, zero value otherwise.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) GetMaxBitRate() MediaEncodingCodecsCommonTypesBitRate {
	if o == nil || IsNil(o.MaxBitRate) {
		var ret MediaEncodingCodecsCommonTypesBitRate
		return ret
	}
	return *o.MaxBitRate
}

// GetMaxBitRateOk returns a tuple with the MaxBitRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) GetMaxBitRateOk() (*MediaEncodingCodecsCommonTypesBitRate, bool) {
	if o == nil || IsNil(o.MaxBitRate) {
		return nil, false
	}
	return o.MaxBitRate, true
}

// HasMaxBitRate returns a boolean if a field has been set.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) HasMaxBitRate() bool {
	if o != nil && !IsNil(o.MaxBitRate) {
		return true
	}

	return false
}

// SetMaxBitRate gets a reference to the given MediaEncodingCodecsCommonTypesBitRate and assigns it to the MaxBitRate field.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) SetMaxBitRate(v MediaEncodingCodecsCommonTypesBitRate) {
	o.MaxBitRate = &v
}

// GetMaxBitRateDisplay returns the MaxBitRateDisplay field value if set, zero value otherwise.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) GetMaxBitRateDisplay() string {
	if o == nil || IsNil(o.MaxBitRateDisplay) {
		var ret string
		return ret
	}
	return *o.MaxBitRateDisplay
}

// GetMaxBitRateDisplayOk returns a tuple with the MaxBitRateDisplay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) GetMaxBitRateDisplayOk() (*string, bool) {
	if o == nil || IsNil(o.MaxBitRateDisplay) {
		return nil, false
	}
	return o.MaxBitRateDisplay, true
}

// HasMaxBitRateDisplay returns a boolean if a field has been set.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) HasMaxBitRateDisplay() bool {
	if o != nil && !IsNil(o.MaxBitRateDisplay) {
		return true
	}

	return false
}

// SetMaxBitRateDisplay gets a reference to the given string and assigns it to the MaxBitRateDisplay field.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) SetMaxBitRateDisplay(v string) {
	o.MaxBitRateDisplay = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) SetId(v string) {
	o.Id = &v
}

// GetResolutionRates returns the ResolutionRates field value if set, zero value otherwise.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) GetResolutionRates() []MediaEncodingCodecsCommonTypesResolutionWithRate {
	if o == nil || IsNil(o.ResolutionRates) {
		var ret []MediaEncodingCodecsCommonTypesResolutionWithRate
		return ret
	}
	return o.ResolutionRates
}

// GetResolutionRatesOk returns a tuple with the ResolutionRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) GetResolutionRatesOk() ([]MediaEncodingCodecsCommonTypesResolutionWithRate, bool) {
	if o == nil || IsNil(o.ResolutionRates) {
		return nil, false
	}
	return o.ResolutionRates, true
}

// HasResolutionRates returns a boolean if a field has been set.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) HasResolutionRates() bool {
	if o != nil && !IsNil(o.ResolutionRates) {
		return true
	}

	return false
}

// SetResolutionRates gets a reference to the given []MediaEncodingCodecsCommonTypesResolutionWithRate and assigns it to the ResolutionRates field.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) SetResolutionRates(v []MediaEncodingCodecsCommonTypesResolutionWithRate) {
	o.ResolutionRates = v
}

// GetResolutionRateStrings returns the ResolutionRateStrings field value if set, zero value otherwise.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) GetResolutionRateStrings() []string {
	if o == nil || IsNil(o.ResolutionRateStrings) {
		var ret []string
		return ret
	}
	return o.ResolutionRateStrings
}

// GetResolutionRateStringsOk returns a tuple with the ResolutionRateStrings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) GetResolutionRateStringsOk() ([]string, bool) {
	if o == nil || IsNil(o.ResolutionRateStrings) {
		return nil, false
	}
	return o.ResolutionRateStrings, true
}

// HasResolutionRateStrings returns a boolean if a field has been set.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) HasResolutionRateStrings() bool {
	if o != nil && !IsNil(o.ResolutionRateStrings) {
		return true
	}

	return false
}

// SetResolutionRateStrings gets a reference to the given []string and assigns it to the ResolutionRateStrings field.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) SetResolutionRateStrings(v []string) {
	o.ResolutionRateStrings = v
}

// GetResolutionRatesDisplay returns the ResolutionRatesDisplay field value if set, zero value otherwise.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) GetResolutionRatesDisplay() string {
	if o == nil || IsNil(o.ResolutionRatesDisplay) {
		var ret string
		return ret
	}
	return *o.ResolutionRatesDisplay
}

// GetResolutionRatesDisplayOk returns a tuple with the ResolutionRatesDisplay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) GetResolutionRatesDisplayOk() (*string, bool) {
	if o == nil || IsNil(o.ResolutionRatesDisplay) {
		return nil, false
	}
	return o.ResolutionRatesDisplay, true
}

// HasResolutionRatesDisplay returns a boolean if a field has been set.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) HasResolutionRatesDisplay() bool {
	if o != nil && !IsNil(o.ResolutionRatesDisplay) {
		return true
	}

	return false
}

// SetResolutionRatesDisplay gets a reference to the given string and assigns it to the ResolutionRatesDisplay field.
func (o *MediaEncodingCodecsCommonTypesLevelInformation) SetResolutionRatesDisplay(v string) {
	o.ResolutionRatesDisplay = &v
}

func (o MediaEncodingCodecsCommonTypesLevelInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaEncodingCodecsCommonTypesLevelInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ShortName) {
		toSerialize["ShortName"] = o.ShortName
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if o.Ordinal.IsSet() {
		toSerialize["Ordinal"] = o.Ordinal.Get()
	}
	if !IsNil(o.MaxBitRate) {
		toSerialize["MaxBitRate"] = o.MaxBitRate
	}
	if !IsNil(o.MaxBitRateDisplay) {
		toSerialize["MaxBitRateDisplay"] = o.MaxBitRateDisplay
	}
	if !IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !IsNil(o.ResolutionRates) {
		toSerialize["ResolutionRates"] = o.ResolutionRates
	}
	if !IsNil(o.ResolutionRateStrings) {
		toSerialize["ResolutionRateStrings"] = o.ResolutionRateStrings
	}
	if !IsNil(o.ResolutionRatesDisplay) {
		toSerialize["ResolutionRatesDisplay"] = o.ResolutionRatesDisplay
	}
	return toSerialize, nil
}

type NullableMediaEncodingCodecsCommonTypesLevelInformation struct {
	value *MediaEncodingCodecsCommonTypesLevelInformation
	isSet bool
}

func (v NullableMediaEncodingCodecsCommonTypesLevelInformation) Get() *MediaEncodingCodecsCommonTypesLevelInformation {
	return v.value
}

func (v *NullableMediaEncodingCodecsCommonTypesLevelInformation) Set(val *MediaEncodingCodecsCommonTypesLevelInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaEncodingCodecsCommonTypesLevelInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaEncodingCodecsCommonTypesLevelInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaEncodingCodecsCommonTypesLevelInformation(val *MediaEncodingCodecsCommonTypesLevelInformation) *NullableMediaEncodingCodecsCommonTypesLevelInformation {
	return &NullableMediaEncodingCodecsCommonTypesLevelInformation{value: val, isSet: true}
}

func (v NullableMediaEncodingCodecsCommonTypesLevelInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaEncodingCodecsCommonTypesLevelInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


