/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the DlnaDeviceProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DlnaDeviceProfile{}

// DlnaDeviceProfile struct for DlnaDeviceProfile
type DlnaDeviceProfile struct {
	Name *string `json:"Name,omitempty"`
	Id *string `json:"Id,omitempty"`
	Identification *DlnaDeviceIdentification `json:"Identification,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	Manufacturer *string `json:"Manufacturer,omitempty"`
	ManufacturerUrl *string `json:"ManufacturerUrl,omitempty"`
	ModelName *string `json:"ModelName,omitempty"`
	ModelDescription *string `json:"ModelDescription,omitempty"`
	ModelNumber *string `json:"ModelNumber,omitempty"`
	ModelUrl *string `json:"ModelUrl,omitempty"`
	SerialNumber *string `json:"SerialNumber,omitempty"`
	EnableAlbumArtInDidl *bool `json:"EnableAlbumArtInDidl,omitempty"`
	EnableSingleAlbumArtLimit *bool `json:"EnableSingleAlbumArtLimit,omitempty"`
	EnableSingleSubtitleLimit *bool `json:"EnableSingleSubtitleLimit,omitempty"`
	SupportedMediaTypes *string `json:"SupportedMediaTypes,omitempty"`
	UserId *string `json:"UserId,omitempty"`
	AlbumArtPn *string `json:"AlbumArtPn,omitempty"`
	MaxAlbumArtWidth *int32 `json:"MaxAlbumArtWidth,omitempty"`
	MaxAlbumArtHeight *int32 `json:"MaxAlbumArtHeight,omitempty"`
	MaxIconWidth NullableInt32 `json:"MaxIconWidth,omitempty"`
	MaxIconHeight NullableInt32 `json:"MaxIconHeight,omitempty"`
	MaxStreamingBitrate NullableInt64 `json:"MaxStreamingBitrate,omitempty"`
	MaxStaticBitrate NullableInt64 `json:"MaxStaticBitrate,omitempty"`
	MusicStreamingTranscodingBitrate NullableInt32 `json:"MusicStreamingTranscodingBitrate,omitempty"`
	MaxStaticMusicBitrate NullableInt32 `json:"MaxStaticMusicBitrate,omitempty"`
	SonyAggregationFlags *string `json:"SonyAggregationFlags,omitempty"`
	ProtocolInfo *string `json:"ProtocolInfo,omitempty"`
	TimelineOffsetSeconds *int32 `json:"TimelineOffsetSeconds,omitempty"`
	RequiresPlainVideoItems *bool `json:"RequiresPlainVideoItems,omitempty"`
	RequiresPlainFolders *bool `json:"RequiresPlainFolders,omitempty"`
	EnableMSMediaReceiverRegistrar *bool `json:"EnableMSMediaReceiverRegistrar,omitempty"`
	IgnoreTranscodeByteRangeRequests *bool `json:"IgnoreTranscodeByteRangeRequests,omitempty"`
	XmlRootAttributes []DlnaXmlAttribute `json:"XmlRootAttributes,omitempty"`
	DirectPlayProfiles []DlnaDirectPlayProfile `json:"DirectPlayProfiles,omitempty"`
	TranscodingProfiles []DlnaTranscodingProfile `json:"TranscodingProfiles,omitempty"`
	ContainerProfiles []DlnaContainerProfile `json:"ContainerProfiles,omitempty"`
	CodecProfiles []DlnaCodecProfile `json:"CodecProfiles,omitempty"`
	ResponseProfiles []DlnaResponseProfile `json:"ResponseProfiles,omitempty"`
	SubtitleProfiles []DlnaSubtitleProfile `json:"SubtitleProfiles,omitempty"`
}

// NewDlnaDeviceProfile instantiates a new DlnaDeviceProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDlnaDeviceProfile() *DlnaDeviceProfile {
	this := DlnaDeviceProfile{}
	return &this
}

// NewDlnaDeviceProfileWithDefaults instantiates a new DlnaDeviceProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDlnaDeviceProfileWithDefaults() *DlnaDeviceProfile {
	this := DlnaDeviceProfile{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DlnaDeviceProfile) SetName(v string) {
	o.Name = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DlnaDeviceProfile) SetId(v string) {
	o.Id = &v
}

// GetIdentification returns the Identification field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetIdentification() DlnaDeviceIdentification {
	if o == nil || IsNil(o.Identification) {
		var ret DlnaDeviceIdentification
		return ret
	}
	return *o.Identification
}

// GetIdentificationOk returns a tuple with the Identification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetIdentificationOk() (*DlnaDeviceIdentification, bool) {
	if o == nil || IsNil(o.Identification) {
		return nil, false
	}
	return o.Identification, true
}

// HasIdentification returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasIdentification() bool {
	if o != nil && !IsNil(o.Identification) {
		return true
	}

	return false
}

// SetIdentification gets a reference to the given DlnaDeviceIdentification and assigns it to the Identification field.
func (o *DlnaDeviceProfile) SetIdentification(v DlnaDeviceIdentification) {
	o.Identification = &v
}

// GetFriendlyName returns the FriendlyName field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetFriendlyName() string {
	if o == nil || IsNil(o.FriendlyName) {
		var ret string
		return ret
	}
	return *o.FriendlyName
}

// GetFriendlyNameOk returns a tuple with the FriendlyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetFriendlyNameOk() (*string, bool) {
	if o == nil || IsNil(o.FriendlyName) {
		return nil, false
	}
	return o.FriendlyName, true
}

// HasFriendlyName returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasFriendlyName() bool {
	if o != nil && !IsNil(o.FriendlyName) {
		return true
	}

	return false
}

// SetFriendlyName gets a reference to the given string and assigns it to the FriendlyName field.
func (o *DlnaDeviceProfile) SetFriendlyName(v string) {
	o.FriendlyName = &v
}

// GetManufacturer returns the Manufacturer field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetManufacturer() string {
	if o == nil || IsNil(o.Manufacturer) {
		var ret string
		return ret
	}
	return *o.Manufacturer
}

// GetManufacturerOk returns a tuple with the Manufacturer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetManufacturerOk() (*string, bool) {
	if o == nil || IsNil(o.Manufacturer) {
		return nil, false
	}
	return o.Manufacturer, true
}

// HasManufacturer returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasManufacturer() bool {
	if o != nil && !IsNil(o.Manufacturer) {
		return true
	}

	return false
}

// SetManufacturer gets a reference to the given string and assigns it to the Manufacturer field.
func (o *DlnaDeviceProfile) SetManufacturer(v string) {
	o.Manufacturer = &v
}

// GetManufacturerUrl returns the ManufacturerUrl field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetManufacturerUrl() string {
	if o == nil || IsNil(o.ManufacturerUrl) {
		var ret string
		return ret
	}
	return *o.ManufacturerUrl
}

// GetManufacturerUrlOk returns a tuple with the ManufacturerUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetManufacturerUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ManufacturerUrl) {
		return nil, false
	}
	return o.ManufacturerUrl, true
}

// HasManufacturerUrl returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasManufacturerUrl() bool {
	if o != nil && !IsNil(o.ManufacturerUrl) {
		return true
	}

	return false
}

// SetManufacturerUrl gets a reference to the given string and assigns it to the ManufacturerUrl field.
func (o *DlnaDeviceProfile) SetManufacturerUrl(v string) {
	o.ManufacturerUrl = &v
}

// GetModelName returns the ModelName field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetModelName() string {
	if o == nil || IsNil(o.ModelName) {
		var ret string
		return ret
	}
	return *o.ModelName
}

// GetModelNameOk returns a tuple with the ModelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetModelNameOk() (*string, bool) {
	if o == nil || IsNil(o.ModelName) {
		return nil, false
	}
	return o.ModelName, true
}

// HasModelName returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasModelName() bool {
	if o != nil && !IsNil(o.ModelName) {
		return true
	}

	return false
}

// SetModelName gets a reference to the given string and assigns it to the ModelName field.
func (o *DlnaDeviceProfile) SetModelName(v string) {
	o.ModelName = &v
}

// GetModelDescription returns the ModelDescription field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetModelDescription() string {
	if o == nil || IsNil(o.ModelDescription) {
		var ret string
		return ret
	}
	return *o.ModelDescription
}

// GetModelDescriptionOk returns a tuple with the ModelDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetModelDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ModelDescription) {
		return nil, false
	}
	return o.ModelDescription, true
}

// HasModelDescription returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasModelDescription() bool {
	if o != nil && !IsNil(o.ModelDescription) {
		return true
	}

	return false
}

// SetModelDescription gets a reference to the given string and assigns it to the ModelDescription field.
func (o *DlnaDeviceProfile) SetModelDescription(v string) {
	o.ModelDescription = &v
}

// GetModelNumber returns the ModelNumber field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetModelNumber() string {
	if o == nil || IsNil(o.ModelNumber) {
		var ret string
		return ret
	}
	return *o.ModelNumber
}

// GetModelNumberOk returns a tuple with the ModelNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetModelNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ModelNumber) {
		return nil, false
	}
	return o.ModelNumber, true
}

// HasModelNumber returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasModelNumber() bool {
	if o != nil && !IsNil(o.ModelNumber) {
		return true
	}

	return false
}

// SetModelNumber gets a reference to the given string and assigns it to the ModelNumber field.
func (o *DlnaDeviceProfile) SetModelNumber(v string) {
	o.ModelNumber = &v
}

// GetModelUrl returns the ModelUrl field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetModelUrl() string {
	if o == nil || IsNil(o.ModelUrl) {
		var ret string
		return ret
	}
	return *o.ModelUrl
}

// GetModelUrlOk returns a tuple with the ModelUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetModelUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ModelUrl) {
		return nil, false
	}
	return o.ModelUrl, true
}

// HasModelUrl returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasModelUrl() bool {
	if o != nil && !IsNil(o.ModelUrl) {
		return true
	}

	return false
}

// SetModelUrl gets a reference to the given string and assigns it to the ModelUrl field.
func (o *DlnaDeviceProfile) SetModelUrl(v string) {
	o.ModelUrl = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *DlnaDeviceProfile) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetEnableAlbumArtInDidl returns the EnableAlbumArtInDidl field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetEnableAlbumArtInDidl() bool {
	if o == nil || IsNil(o.EnableAlbumArtInDidl) {
		var ret bool
		return ret
	}
	return *o.EnableAlbumArtInDidl
}

// GetEnableAlbumArtInDidlOk returns a tuple with the EnableAlbumArtInDidl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetEnableAlbumArtInDidlOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAlbumArtInDidl) {
		return nil, false
	}
	return o.EnableAlbumArtInDidl, true
}

// HasEnableAlbumArtInDidl returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasEnableAlbumArtInDidl() bool {
	if o != nil && !IsNil(o.EnableAlbumArtInDidl) {
		return true
	}

	return false
}

// SetEnableAlbumArtInDidl gets a reference to the given bool and assigns it to the EnableAlbumArtInDidl field.
func (o *DlnaDeviceProfile) SetEnableAlbumArtInDidl(v bool) {
	o.EnableAlbumArtInDidl = &v
}

// GetEnableSingleAlbumArtLimit returns the EnableSingleAlbumArtLimit field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetEnableSingleAlbumArtLimit() bool {
	if o == nil || IsNil(o.EnableSingleAlbumArtLimit) {
		var ret bool
		return ret
	}
	return *o.EnableSingleAlbumArtLimit
}

// GetEnableSingleAlbumArtLimitOk returns a tuple with the EnableSingleAlbumArtLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetEnableSingleAlbumArtLimitOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSingleAlbumArtLimit) {
		return nil, false
	}
	return o.EnableSingleAlbumArtLimit, true
}

// HasEnableSingleAlbumArtLimit returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasEnableSingleAlbumArtLimit() bool {
	if o != nil && !IsNil(o.EnableSingleAlbumArtLimit) {
		return true
	}

	return false
}

// SetEnableSingleAlbumArtLimit gets a reference to the given bool and assigns it to the EnableSingleAlbumArtLimit field.
func (o *DlnaDeviceProfile) SetEnableSingleAlbumArtLimit(v bool) {
	o.EnableSingleAlbumArtLimit = &v
}

// GetEnableSingleSubtitleLimit returns the EnableSingleSubtitleLimit field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetEnableSingleSubtitleLimit() bool {
	if o == nil || IsNil(o.EnableSingleSubtitleLimit) {
		var ret bool
		return ret
	}
	return *o.EnableSingleSubtitleLimit
}

// GetEnableSingleSubtitleLimitOk returns a tuple with the EnableSingleSubtitleLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetEnableSingleSubtitleLimitOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSingleSubtitleLimit) {
		return nil, false
	}
	return o.EnableSingleSubtitleLimit, true
}

// HasEnableSingleSubtitleLimit returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasEnableSingleSubtitleLimit() bool {
	if o != nil && !IsNil(o.EnableSingleSubtitleLimit) {
		return true
	}

	return false
}

// SetEnableSingleSubtitleLimit gets a reference to the given bool and assigns it to the EnableSingleSubtitleLimit field.
func (o *DlnaDeviceProfile) SetEnableSingleSubtitleLimit(v bool) {
	o.EnableSingleSubtitleLimit = &v
}

// GetSupportedMediaTypes returns the SupportedMediaTypes field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetSupportedMediaTypes() string {
	if o == nil || IsNil(o.SupportedMediaTypes) {
		var ret string
		return ret
	}
	return *o.SupportedMediaTypes
}

// GetSupportedMediaTypesOk returns a tuple with the SupportedMediaTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetSupportedMediaTypesOk() (*string, bool) {
	if o == nil || IsNil(o.SupportedMediaTypes) {
		return nil, false
	}
	return o.SupportedMediaTypes, true
}

// HasSupportedMediaTypes returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasSupportedMediaTypes() bool {
	if o != nil && !IsNil(o.SupportedMediaTypes) {
		return true
	}

	return false
}

// SetSupportedMediaTypes gets a reference to the given string and assigns it to the SupportedMediaTypes field.
func (o *DlnaDeviceProfile) SetSupportedMediaTypes(v string) {
	o.SupportedMediaTypes = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *DlnaDeviceProfile) SetUserId(v string) {
	o.UserId = &v
}

// GetAlbumArtPn returns the AlbumArtPn field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetAlbumArtPn() string {
	if o == nil || IsNil(o.AlbumArtPn) {
		var ret string
		return ret
	}
	return *o.AlbumArtPn
}

// GetAlbumArtPnOk returns a tuple with the AlbumArtPn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetAlbumArtPnOk() (*string, bool) {
	if o == nil || IsNil(o.AlbumArtPn) {
		return nil, false
	}
	return o.AlbumArtPn, true
}

// HasAlbumArtPn returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasAlbumArtPn() bool {
	if o != nil && !IsNil(o.AlbumArtPn) {
		return true
	}

	return false
}

// SetAlbumArtPn gets a reference to the given string and assigns it to the AlbumArtPn field.
func (o *DlnaDeviceProfile) SetAlbumArtPn(v string) {
	o.AlbumArtPn = &v
}

// GetMaxAlbumArtWidth returns the MaxAlbumArtWidth field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetMaxAlbumArtWidth() int32 {
	if o == nil || IsNil(o.MaxAlbumArtWidth) {
		var ret int32
		return ret
	}
	return *o.MaxAlbumArtWidth
}

// GetMaxAlbumArtWidthOk returns a tuple with the MaxAlbumArtWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetMaxAlbumArtWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxAlbumArtWidth) {
		return nil, false
	}
	return o.MaxAlbumArtWidth, true
}

// HasMaxAlbumArtWidth returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasMaxAlbumArtWidth() bool {
	if o != nil && !IsNil(o.MaxAlbumArtWidth) {
		return true
	}

	return false
}

// SetMaxAlbumArtWidth gets a reference to the given int32 and assigns it to the MaxAlbumArtWidth field.
func (o *DlnaDeviceProfile) SetMaxAlbumArtWidth(v int32) {
	o.MaxAlbumArtWidth = &v
}

// GetMaxAlbumArtHeight returns the MaxAlbumArtHeight field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetMaxAlbumArtHeight() int32 {
	if o == nil || IsNil(o.MaxAlbumArtHeight) {
		var ret int32
		return ret
	}
	return *o.MaxAlbumArtHeight
}

// GetMaxAlbumArtHeightOk returns a tuple with the MaxAlbumArtHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetMaxAlbumArtHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxAlbumArtHeight) {
		return nil, false
	}
	return o.MaxAlbumArtHeight, true
}

// HasMaxAlbumArtHeight returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasMaxAlbumArtHeight() bool {
	if o != nil && !IsNil(o.MaxAlbumArtHeight) {
		return true
	}

	return false
}

// SetMaxAlbumArtHeight gets a reference to the given int32 and assigns it to the MaxAlbumArtHeight field.
func (o *DlnaDeviceProfile) SetMaxAlbumArtHeight(v int32) {
	o.MaxAlbumArtHeight = &v
}

// GetMaxIconWidth returns the MaxIconWidth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DlnaDeviceProfile) GetMaxIconWidth() int32 {
	if o == nil || IsNil(o.MaxIconWidth.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxIconWidth.Get()
}

// GetMaxIconWidthOk returns a tuple with the MaxIconWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DlnaDeviceProfile) GetMaxIconWidthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxIconWidth.Get(), o.MaxIconWidth.IsSet()
}

// HasMaxIconWidth returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasMaxIconWidth() bool {
	if o != nil && o.MaxIconWidth.IsSet() {
		return true
	}

	return false
}

// SetMaxIconWidth gets a reference to the given NullableInt32 and assigns it to the MaxIconWidth field.
func (o *DlnaDeviceProfile) SetMaxIconWidth(v int32) {
	o.MaxIconWidth.Set(&v)
}
// SetMaxIconWidthNil sets the value for MaxIconWidth to be an explicit nil
func (o *DlnaDeviceProfile) SetMaxIconWidthNil() {
	o.MaxIconWidth.Set(nil)
}

// UnsetMaxIconWidth ensures that no value is present for MaxIconWidth, not even an explicit nil
func (o *DlnaDeviceProfile) UnsetMaxIconWidth() {
	o.MaxIconWidth.Unset()
}

// GetMaxIconHeight returns the MaxIconHeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DlnaDeviceProfile) GetMaxIconHeight() int32 {
	if o == nil || IsNil(o.MaxIconHeight.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxIconHeight.Get()
}

// GetMaxIconHeightOk returns a tuple with the MaxIconHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DlnaDeviceProfile) GetMaxIconHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxIconHeight.Get(), o.MaxIconHeight.IsSet()
}

// HasMaxIconHeight returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasMaxIconHeight() bool {
	if o != nil && o.MaxIconHeight.IsSet() {
		return true
	}

	return false
}

// SetMaxIconHeight gets a reference to the given NullableInt32 and assigns it to the MaxIconHeight field.
func (o *DlnaDeviceProfile) SetMaxIconHeight(v int32) {
	o.MaxIconHeight.Set(&v)
}
// SetMaxIconHeightNil sets the value for MaxIconHeight to be an explicit nil
func (o *DlnaDeviceProfile) SetMaxIconHeightNil() {
	o.MaxIconHeight.Set(nil)
}

// UnsetMaxIconHeight ensures that no value is present for MaxIconHeight, not even an explicit nil
func (o *DlnaDeviceProfile) UnsetMaxIconHeight() {
	o.MaxIconHeight.Unset()
}

// GetMaxStreamingBitrate returns the MaxStreamingBitrate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DlnaDeviceProfile) GetMaxStreamingBitrate() int64 {
	if o == nil || IsNil(o.MaxStreamingBitrate.Get()) {
		var ret int64
		return ret
	}
	return *o.MaxStreamingBitrate.Get()
}

// GetMaxStreamingBitrateOk returns a tuple with the MaxStreamingBitrate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DlnaDeviceProfile) GetMaxStreamingBitrateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxStreamingBitrate.Get(), o.MaxStreamingBitrate.IsSet()
}

// HasMaxStreamingBitrate returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasMaxStreamingBitrate() bool {
	if o != nil && o.MaxStreamingBitrate.IsSet() {
		return true
	}

	return false
}

// SetMaxStreamingBitrate gets a reference to the given NullableInt64 and assigns it to the MaxStreamingBitrate field.
func (o *DlnaDeviceProfile) SetMaxStreamingBitrate(v int64) {
	o.MaxStreamingBitrate.Set(&v)
}
// SetMaxStreamingBitrateNil sets the value for MaxStreamingBitrate to be an explicit nil
func (o *DlnaDeviceProfile) SetMaxStreamingBitrateNil() {
	o.MaxStreamingBitrate.Set(nil)
}

// UnsetMaxStreamingBitrate ensures that no value is present for MaxStreamingBitrate, not even an explicit nil
func (o *DlnaDeviceProfile) UnsetMaxStreamingBitrate() {
	o.MaxStreamingBitrate.Unset()
}

// GetMaxStaticBitrate returns the MaxStaticBitrate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DlnaDeviceProfile) GetMaxStaticBitrate() int64 {
	if o == nil || IsNil(o.MaxStaticBitrate.Get()) {
		var ret int64
		return ret
	}
	return *o.MaxStaticBitrate.Get()
}

// GetMaxStaticBitrateOk returns a tuple with the MaxStaticBitrate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DlnaDeviceProfile) GetMaxStaticBitrateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxStaticBitrate.Get(), o.MaxStaticBitrate.IsSet()
}

// HasMaxStaticBitrate returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasMaxStaticBitrate() bool {
	if o != nil && o.MaxStaticBitrate.IsSet() {
		return true
	}

	return false
}

// SetMaxStaticBitrate gets a reference to the given NullableInt64 and assigns it to the MaxStaticBitrate field.
func (o *DlnaDeviceProfile) SetMaxStaticBitrate(v int64) {
	o.MaxStaticBitrate.Set(&v)
}
// SetMaxStaticBitrateNil sets the value for MaxStaticBitrate to be an explicit nil
func (o *DlnaDeviceProfile) SetMaxStaticBitrateNil() {
	o.MaxStaticBitrate.Set(nil)
}

// UnsetMaxStaticBitrate ensures that no value is present for MaxStaticBitrate, not even an explicit nil
func (o *DlnaDeviceProfile) UnsetMaxStaticBitrate() {
	o.MaxStaticBitrate.Unset()
}

// GetMusicStreamingTranscodingBitrate returns the MusicStreamingTranscodingBitrate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DlnaDeviceProfile) GetMusicStreamingTranscodingBitrate() int32 {
	if o == nil || IsNil(o.MusicStreamingTranscodingBitrate.Get()) {
		var ret int32
		return ret
	}
	return *o.MusicStreamingTranscodingBitrate.Get()
}

// GetMusicStreamingTranscodingBitrateOk returns a tuple with the MusicStreamingTranscodingBitrate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DlnaDeviceProfile) GetMusicStreamingTranscodingBitrateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MusicStreamingTranscodingBitrate.Get(), o.MusicStreamingTranscodingBitrate.IsSet()
}

// HasMusicStreamingTranscodingBitrate returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasMusicStreamingTranscodingBitrate() bool {
	if o != nil && o.MusicStreamingTranscodingBitrate.IsSet() {
		return true
	}

	return false
}

// SetMusicStreamingTranscodingBitrate gets a reference to the given NullableInt32 and assigns it to the MusicStreamingTranscodingBitrate field.
func (o *DlnaDeviceProfile) SetMusicStreamingTranscodingBitrate(v int32) {
	o.MusicStreamingTranscodingBitrate.Set(&v)
}
// SetMusicStreamingTranscodingBitrateNil sets the value for MusicStreamingTranscodingBitrate to be an explicit nil
func (o *DlnaDeviceProfile) SetMusicStreamingTranscodingBitrateNil() {
	o.MusicStreamingTranscodingBitrate.Set(nil)
}

// UnsetMusicStreamingTranscodingBitrate ensures that no value is present for MusicStreamingTranscodingBitrate, not even an explicit nil
func (o *DlnaDeviceProfile) UnsetMusicStreamingTranscodingBitrate() {
	o.MusicStreamingTranscodingBitrate.Unset()
}

// GetMaxStaticMusicBitrate returns the MaxStaticMusicBitrate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DlnaDeviceProfile) GetMaxStaticMusicBitrate() int32 {
	if o == nil || IsNil(o.MaxStaticMusicBitrate.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxStaticMusicBitrate.Get()
}

// GetMaxStaticMusicBitrateOk returns a tuple with the MaxStaticMusicBitrate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DlnaDeviceProfile) GetMaxStaticMusicBitrateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxStaticMusicBitrate.Get(), o.MaxStaticMusicBitrate.IsSet()
}

// HasMaxStaticMusicBitrate returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasMaxStaticMusicBitrate() bool {
	if o != nil && o.MaxStaticMusicBitrate.IsSet() {
		return true
	}

	return false
}

// SetMaxStaticMusicBitrate gets a reference to the given NullableInt32 and assigns it to the MaxStaticMusicBitrate field.
func (o *DlnaDeviceProfile) SetMaxStaticMusicBitrate(v int32) {
	o.MaxStaticMusicBitrate.Set(&v)
}
// SetMaxStaticMusicBitrateNil sets the value for MaxStaticMusicBitrate to be an explicit nil
func (o *DlnaDeviceProfile) SetMaxStaticMusicBitrateNil() {
	o.MaxStaticMusicBitrate.Set(nil)
}

// UnsetMaxStaticMusicBitrate ensures that no value is present for MaxStaticMusicBitrate, not even an explicit nil
func (o *DlnaDeviceProfile) UnsetMaxStaticMusicBitrate() {
	o.MaxStaticMusicBitrate.Unset()
}

// GetSonyAggregationFlags returns the SonyAggregationFlags field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetSonyAggregationFlags() string {
	if o == nil || IsNil(o.SonyAggregationFlags) {
		var ret string
		return ret
	}
	return *o.SonyAggregationFlags
}

// GetSonyAggregationFlagsOk returns a tuple with the SonyAggregationFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetSonyAggregationFlagsOk() (*string, bool) {
	if o == nil || IsNil(o.SonyAggregationFlags) {
		return nil, false
	}
	return o.SonyAggregationFlags, true
}

// HasSonyAggregationFlags returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasSonyAggregationFlags() bool {
	if o != nil && !IsNil(o.SonyAggregationFlags) {
		return true
	}

	return false
}

// SetSonyAggregationFlags gets a reference to the given string and assigns it to the SonyAggregationFlags field.
func (o *DlnaDeviceProfile) SetSonyAggregationFlags(v string) {
	o.SonyAggregationFlags = &v
}

// GetProtocolInfo returns the ProtocolInfo field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetProtocolInfo() string {
	if o == nil || IsNil(o.ProtocolInfo) {
		var ret string
		return ret
	}
	return *o.ProtocolInfo
}

// GetProtocolInfoOk returns a tuple with the ProtocolInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetProtocolInfoOk() (*string, bool) {
	if o == nil || IsNil(o.ProtocolInfo) {
		return nil, false
	}
	return o.ProtocolInfo, true
}

// HasProtocolInfo returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasProtocolInfo() bool {
	if o != nil && !IsNil(o.ProtocolInfo) {
		return true
	}

	return false
}

// SetProtocolInfo gets a reference to the given string and assigns it to the ProtocolInfo field.
func (o *DlnaDeviceProfile) SetProtocolInfo(v string) {
	o.ProtocolInfo = &v
}

// GetTimelineOffsetSeconds returns the TimelineOffsetSeconds field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetTimelineOffsetSeconds() int32 {
	if o == nil || IsNil(o.TimelineOffsetSeconds) {
		var ret int32
		return ret
	}
	return *o.TimelineOffsetSeconds
}

// GetTimelineOffsetSecondsOk returns a tuple with the TimelineOffsetSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetTimelineOffsetSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.TimelineOffsetSeconds) {
		return nil, false
	}
	return o.TimelineOffsetSeconds, true
}

// HasTimelineOffsetSeconds returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasTimelineOffsetSeconds() bool {
	if o != nil && !IsNil(o.TimelineOffsetSeconds) {
		return true
	}

	return false
}

// SetTimelineOffsetSeconds gets a reference to the given int32 and assigns it to the TimelineOffsetSeconds field.
func (o *DlnaDeviceProfile) SetTimelineOffsetSeconds(v int32) {
	o.TimelineOffsetSeconds = &v
}

// GetRequiresPlainVideoItems returns the RequiresPlainVideoItems field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetRequiresPlainVideoItems() bool {
	if o == nil || IsNil(o.RequiresPlainVideoItems) {
		var ret bool
		return ret
	}
	return *o.RequiresPlainVideoItems
}

// GetRequiresPlainVideoItemsOk returns a tuple with the RequiresPlainVideoItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetRequiresPlainVideoItemsOk() (*bool, bool) {
	if o == nil || IsNil(o.RequiresPlainVideoItems) {
		return nil, false
	}
	return o.RequiresPlainVideoItems, true
}

// HasRequiresPlainVideoItems returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasRequiresPlainVideoItems() bool {
	if o != nil && !IsNil(o.RequiresPlainVideoItems) {
		return true
	}

	return false
}

// SetRequiresPlainVideoItems gets a reference to the given bool and assigns it to the RequiresPlainVideoItems field.
func (o *DlnaDeviceProfile) SetRequiresPlainVideoItems(v bool) {
	o.RequiresPlainVideoItems = &v
}

// GetRequiresPlainFolders returns the RequiresPlainFolders field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetRequiresPlainFolders() bool {
	if o == nil || IsNil(o.RequiresPlainFolders) {
		var ret bool
		return ret
	}
	return *o.RequiresPlainFolders
}

// GetRequiresPlainFoldersOk returns a tuple with the RequiresPlainFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetRequiresPlainFoldersOk() (*bool, bool) {
	if o == nil || IsNil(o.RequiresPlainFolders) {
		return nil, false
	}
	return o.RequiresPlainFolders, true
}

// HasRequiresPlainFolders returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasRequiresPlainFolders() bool {
	if o != nil && !IsNil(o.RequiresPlainFolders) {
		return true
	}

	return false
}

// SetRequiresPlainFolders gets a reference to the given bool and assigns it to the RequiresPlainFolders field.
func (o *DlnaDeviceProfile) SetRequiresPlainFolders(v bool) {
	o.RequiresPlainFolders = &v
}

// GetEnableMSMediaReceiverRegistrar returns the EnableMSMediaReceiverRegistrar field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetEnableMSMediaReceiverRegistrar() bool {
	if o == nil || IsNil(o.EnableMSMediaReceiverRegistrar) {
		var ret bool
		return ret
	}
	return *o.EnableMSMediaReceiverRegistrar
}

// GetEnableMSMediaReceiverRegistrarOk returns a tuple with the EnableMSMediaReceiverRegistrar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetEnableMSMediaReceiverRegistrarOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMSMediaReceiverRegistrar) {
		return nil, false
	}
	return o.EnableMSMediaReceiverRegistrar, true
}

// HasEnableMSMediaReceiverRegistrar returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasEnableMSMediaReceiverRegistrar() bool {
	if o != nil && !IsNil(o.EnableMSMediaReceiverRegistrar) {
		return true
	}

	return false
}

// SetEnableMSMediaReceiverRegistrar gets a reference to the given bool and assigns it to the EnableMSMediaReceiverRegistrar field.
func (o *DlnaDeviceProfile) SetEnableMSMediaReceiverRegistrar(v bool) {
	o.EnableMSMediaReceiverRegistrar = &v
}

// GetIgnoreTranscodeByteRangeRequests returns the IgnoreTranscodeByteRangeRequests field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetIgnoreTranscodeByteRangeRequests() bool {
	if o == nil || IsNil(o.IgnoreTranscodeByteRangeRequests) {
		var ret bool
		return ret
	}
	return *o.IgnoreTranscodeByteRangeRequests
}

// GetIgnoreTranscodeByteRangeRequestsOk returns a tuple with the IgnoreTranscodeByteRangeRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetIgnoreTranscodeByteRangeRequestsOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreTranscodeByteRangeRequests) {
		return nil, false
	}
	return o.IgnoreTranscodeByteRangeRequests, true
}

// HasIgnoreTranscodeByteRangeRequests returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasIgnoreTranscodeByteRangeRequests() bool {
	if o != nil && !IsNil(o.IgnoreTranscodeByteRangeRequests) {
		return true
	}

	return false
}

// SetIgnoreTranscodeByteRangeRequests gets a reference to the given bool and assigns it to the IgnoreTranscodeByteRangeRequests field.
func (o *DlnaDeviceProfile) SetIgnoreTranscodeByteRangeRequests(v bool) {
	o.IgnoreTranscodeByteRangeRequests = &v
}

// GetXmlRootAttributes returns the XmlRootAttributes field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetXmlRootAttributes() []DlnaXmlAttribute {
	if o == nil || IsNil(o.XmlRootAttributes) {
		var ret []DlnaXmlAttribute
		return ret
	}
	return o.XmlRootAttributes
}

// GetXmlRootAttributesOk returns a tuple with the XmlRootAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetXmlRootAttributesOk() ([]DlnaXmlAttribute, bool) {
	if o == nil || IsNil(o.XmlRootAttributes) {
		return nil, false
	}
	return o.XmlRootAttributes, true
}

// HasXmlRootAttributes returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasXmlRootAttributes() bool {
	if o != nil && !IsNil(o.XmlRootAttributes) {
		return true
	}

	return false
}

// SetXmlRootAttributes gets a reference to the given []DlnaXmlAttribute and assigns it to the XmlRootAttributes field.
func (o *DlnaDeviceProfile) SetXmlRootAttributes(v []DlnaXmlAttribute) {
	o.XmlRootAttributes = v
}

// GetDirectPlayProfiles returns the DirectPlayProfiles field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetDirectPlayProfiles() []DlnaDirectPlayProfile {
	if o == nil || IsNil(o.DirectPlayProfiles) {
		var ret []DlnaDirectPlayProfile
		return ret
	}
	return o.DirectPlayProfiles
}

// GetDirectPlayProfilesOk returns a tuple with the DirectPlayProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetDirectPlayProfilesOk() ([]DlnaDirectPlayProfile, bool) {
	if o == nil || IsNil(o.DirectPlayProfiles) {
		return nil, false
	}
	return o.DirectPlayProfiles, true
}

// HasDirectPlayProfiles returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasDirectPlayProfiles() bool {
	if o != nil && !IsNil(o.DirectPlayProfiles) {
		return true
	}

	return false
}

// SetDirectPlayProfiles gets a reference to the given []DlnaDirectPlayProfile and assigns it to the DirectPlayProfiles field.
func (o *DlnaDeviceProfile) SetDirectPlayProfiles(v []DlnaDirectPlayProfile) {
	o.DirectPlayProfiles = v
}

// GetTranscodingProfiles returns the TranscodingProfiles field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetTranscodingProfiles() []DlnaTranscodingProfile {
	if o == nil || IsNil(o.TranscodingProfiles) {
		var ret []DlnaTranscodingProfile
		return ret
	}
	return o.TranscodingProfiles
}

// GetTranscodingProfilesOk returns a tuple with the TranscodingProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetTranscodingProfilesOk() ([]DlnaTranscodingProfile, bool) {
	if o == nil || IsNil(o.TranscodingProfiles) {
		return nil, false
	}
	return o.TranscodingProfiles, true
}

// HasTranscodingProfiles returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasTranscodingProfiles() bool {
	if o != nil && !IsNil(o.TranscodingProfiles) {
		return true
	}

	return false
}

// SetTranscodingProfiles gets a reference to the given []DlnaTranscodingProfile and assigns it to the TranscodingProfiles field.
func (o *DlnaDeviceProfile) SetTranscodingProfiles(v []DlnaTranscodingProfile) {
	o.TranscodingProfiles = v
}

// GetContainerProfiles returns the ContainerProfiles field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetContainerProfiles() []DlnaContainerProfile {
	if o == nil || IsNil(o.ContainerProfiles) {
		var ret []DlnaContainerProfile
		return ret
	}
	return o.ContainerProfiles
}

// GetContainerProfilesOk returns a tuple with the ContainerProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetContainerProfilesOk() ([]DlnaContainerProfile, bool) {
	if o == nil || IsNil(o.ContainerProfiles) {
		return nil, false
	}
	return o.ContainerProfiles, true
}

// HasContainerProfiles returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasContainerProfiles() bool {
	if o != nil && !IsNil(o.ContainerProfiles) {
		return true
	}

	return false
}

// SetContainerProfiles gets a reference to the given []DlnaContainerProfile and assigns it to the ContainerProfiles field.
func (o *DlnaDeviceProfile) SetContainerProfiles(v []DlnaContainerProfile) {
	o.ContainerProfiles = v
}

// GetCodecProfiles returns the CodecProfiles field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetCodecProfiles() []DlnaCodecProfile {
	if o == nil || IsNil(o.CodecProfiles) {
		var ret []DlnaCodecProfile
		return ret
	}
	return o.CodecProfiles
}

// GetCodecProfilesOk returns a tuple with the CodecProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetCodecProfilesOk() ([]DlnaCodecProfile, bool) {
	if o == nil || IsNil(o.CodecProfiles) {
		return nil, false
	}
	return o.CodecProfiles, true
}

// HasCodecProfiles returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasCodecProfiles() bool {
	if o != nil && !IsNil(o.CodecProfiles) {
		return true
	}

	return false
}

// SetCodecProfiles gets a reference to the given []DlnaCodecProfile and assigns it to the CodecProfiles field.
func (o *DlnaDeviceProfile) SetCodecProfiles(v []DlnaCodecProfile) {
	o.CodecProfiles = v
}

// GetResponseProfiles returns the ResponseProfiles field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetResponseProfiles() []DlnaResponseProfile {
	if o == nil || IsNil(o.ResponseProfiles) {
		var ret []DlnaResponseProfile
		return ret
	}
	return o.ResponseProfiles
}

// GetResponseProfilesOk returns a tuple with the ResponseProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetResponseProfilesOk() ([]DlnaResponseProfile, bool) {
	if o == nil || IsNil(o.ResponseProfiles) {
		return nil, false
	}
	return o.ResponseProfiles, true
}

// HasResponseProfiles returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasResponseProfiles() bool {
	if o != nil && !IsNil(o.ResponseProfiles) {
		return true
	}

	return false
}

// SetResponseProfiles gets a reference to the given []DlnaResponseProfile and assigns it to the ResponseProfiles field.
func (o *DlnaDeviceProfile) SetResponseProfiles(v []DlnaResponseProfile) {
	o.ResponseProfiles = v
}

// GetSubtitleProfiles returns the SubtitleProfiles field value if set, zero value otherwise.
func (o *DlnaDeviceProfile) GetSubtitleProfiles() []DlnaSubtitleProfile {
	if o == nil || IsNil(o.SubtitleProfiles) {
		var ret []DlnaSubtitleProfile
		return ret
	}
	return o.SubtitleProfiles
}

// GetSubtitleProfilesOk returns a tuple with the SubtitleProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaDeviceProfile) GetSubtitleProfilesOk() ([]DlnaSubtitleProfile, bool) {
	if o == nil || IsNil(o.SubtitleProfiles) {
		return nil, false
	}
	return o.SubtitleProfiles, true
}

// HasSubtitleProfiles returns a boolean if a field has been set.
func (o *DlnaDeviceProfile) HasSubtitleProfiles() bool {
	if o != nil && !IsNil(o.SubtitleProfiles) {
		return true
	}

	return false
}

// SetSubtitleProfiles gets a reference to the given []DlnaSubtitleProfile and assigns it to the SubtitleProfiles field.
func (o *DlnaDeviceProfile) SetSubtitleProfiles(v []DlnaSubtitleProfile) {
	o.SubtitleProfiles = v
}

func (o DlnaDeviceProfile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DlnaDeviceProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !IsNil(o.Identification) {
		toSerialize["Identification"] = o.Identification
	}
	if !IsNil(o.FriendlyName) {
		toSerialize["FriendlyName"] = o.FriendlyName
	}
	if !IsNil(o.Manufacturer) {
		toSerialize["Manufacturer"] = o.Manufacturer
	}
	if !IsNil(o.ManufacturerUrl) {
		toSerialize["ManufacturerUrl"] = o.ManufacturerUrl
	}
	if !IsNil(o.ModelName) {
		toSerialize["ModelName"] = o.ModelName
	}
	if !IsNil(o.ModelDescription) {
		toSerialize["ModelDescription"] = o.ModelDescription
	}
	if !IsNil(o.ModelNumber) {
		toSerialize["ModelNumber"] = o.ModelNumber
	}
	if !IsNil(o.ModelUrl) {
		toSerialize["ModelUrl"] = o.ModelUrl
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["SerialNumber"] = o.SerialNumber
	}
	if !IsNil(o.EnableAlbumArtInDidl) {
		toSerialize["EnableAlbumArtInDidl"] = o.EnableAlbumArtInDidl
	}
	if !IsNil(o.EnableSingleAlbumArtLimit) {
		toSerialize["EnableSingleAlbumArtLimit"] = o.EnableSingleAlbumArtLimit
	}
	if !IsNil(o.EnableSingleSubtitleLimit) {
		toSerialize["EnableSingleSubtitleLimit"] = o.EnableSingleSubtitleLimit
	}
	if !IsNil(o.SupportedMediaTypes) {
		toSerialize["SupportedMediaTypes"] = o.SupportedMediaTypes
	}
	if !IsNil(o.UserId) {
		toSerialize["UserId"] = o.UserId
	}
	if !IsNil(o.AlbumArtPn) {
		toSerialize["AlbumArtPn"] = o.AlbumArtPn
	}
	if !IsNil(o.MaxAlbumArtWidth) {
		toSerialize["MaxAlbumArtWidth"] = o.MaxAlbumArtWidth
	}
	if !IsNil(o.MaxAlbumArtHeight) {
		toSerialize["MaxAlbumArtHeight"] = o.MaxAlbumArtHeight
	}
	if o.MaxIconWidth.IsSet() {
		toSerialize["MaxIconWidth"] = o.MaxIconWidth.Get()
	}
	if o.MaxIconHeight.IsSet() {
		toSerialize["MaxIconHeight"] = o.MaxIconHeight.Get()
	}
	if o.MaxStreamingBitrate.IsSet() {
		toSerialize["MaxStreamingBitrate"] = o.MaxStreamingBitrate.Get()
	}
	if o.MaxStaticBitrate.IsSet() {
		toSerialize["MaxStaticBitrate"] = o.MaxStaticBitrate.Get()
	}
	if o.MusicStreamingTranscodingBitrate.IsSet() {
		toSerialize["MusicStreamingTranscodingBitrate"] = o.MusicStreamingTranscodingBitrate.Get()
	}
	if o.MaxStaticMusicBitrate.IsSet() {
		toSerialize["MaxStaticMusicBitrate"] = o.MaxStaticMusicBitrate.Get()
	}
	if !IsNil(o.SonyAggregationFlags) {
		toSerialize["SonyAggregationFlags"] = o.SonyAggregationFlags
	}
	if !IsNil(o.ProtocolInfo) {
		toSerialize["ProtocolInfo"] = o.ProtocolInfo
	}
	if !IsNil(o.TimelineOffsetSeconds) {
		toSerialize["TimelineOffsetSeconds"] = o.TimelineOffsetSeconds
	}
	if !IsNil(o.RequiresPlainVideoItems) {
		toSerialize["RequiresPlainVideoItems"] = o.RequiresPlainVideoItems
	}
	if !IsNil(o.RequiresPlainFolders) {
		toSerialize["RequiresPlainFolders"] = o.RequiresPlainFolders
	}
	if !IsNil(o.EnableMSMediaReceiverRegistrar) {
		toSerialize["EnableMSMediaReceiverRegistrar"] = o.EnableMSMediaReceiverRegistrar
	}
	if !IsNil(o.IgnoreTranscodeByteRangeRequests) {
		toSerialize["IgnoreTranscodeByteRangeRequests"] = o.IgnoreTranscodeByteRangeRequests
	}
	if !IsNil(o.XmlRootAttributes) {
		toSerialize["XmlRootAttributes"] = o.XmlRootAttributes
	}
	if !IsNil(o.DirectPlayProfiles) {
		toSerialize["DirectPlayProfiles"] = o.DirectPlayProfiles
	}
	if !IsNil(o.TranscodingProfiles) {
		toSerialize["TranscodingProfiles"] = o.TranscodingProfiles
	}
	if !IsNil(o.ContainerProfiles) {
		toSerialize["ContainerProfiles"] = o.ContainerProfiles
	}
	if !IsNil(o.CodecProfiles) {
		toSerialize["CodecProfiles"] = o.CodecProfiles
	}
	if !IsNil(o.ResponseProfiles) {
		toSerialize["ResponseProfiles"] = o.ResponseProfiles
	}
	if !IsNil(o.SubtitleProfiles) {
		toSerialize["SubtitleProfiles"] = o.SubtitleProfiles
	}
	return toSerialize, nil
}

type NullableDlnaDeviceProfile struct {
	value *DlnaDeviceProfile
	isSet bool
}

func (v NullableDlnaDeviceProfile) Get() *DlnaDeviceProfile {
	return v.value
}

func (v *NullableDlnaDeviceProfile) Set(val *DlnaDeviceProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableDlnaDeviceProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableDlnaDeviceProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDlnaDeviceProfile(val *DlnaDeviceProfile) *NullableDlnaDeviceProfile {
	return &NullableDlnaDeviceProfile{value: val, isSet: true}
}

func (v NullableDlnaDeviceProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDlnaDeviceProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


