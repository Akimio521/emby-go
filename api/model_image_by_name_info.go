/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ImageByNameInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageByNameInfo{}

// ImageByNameInfo struct for ImageByNameInfo
type ImageByNameInfo struct {
	Name *string `json:"Name,omitempty"`
	Theme *string `json:"Theme,omitempty"`
	Context *string `json:"Context,omitempty"`
	FileLength *int64 `json:"FileLength,omitempty"`
	Format *string `json:"Format,omitempty"`
}

// NewImageByNameInfo instantiates a new ImageByNameInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageByNameInfo() *ImageByNameInfo {
	this := ImageByNameInfo{}
	return &this
}

// NewImageByNameInfoWithDefaults instantiates a new ImageByNameInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageByNameInfoWithDefaults() *ImageByNameInfo {
	this := ImageByNameInfo{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ImageByNameInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageByNameInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ImageByNameInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ImageByNameInfo) SetName(v string) {
	o.Name = &v
}

// GetTheme returns the Theme field value if set, zero value otherwise.
func (o *ImageByNameInfo) GetTheme() string {
	if o == nil || IsNil(o.Theme) {
		var ret string
		return ret
	}
	return *o.Theme
}

// GetThemeOk returns a tuple with the Theme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageByNameInfo) GetThemeOk() (*string, bool) {
	if o == nil || IsNil(o.Theme) {
		return nil, false
	}
	return o.Theme, true
}

// HasTheme returns a boolean if a field has been set.
func (o *ImageByNameInfo) HasTheme() bool {
	if o != nil && !IsNil(o.Theme) {
		return true
	}

	return false
}

// SetTheme gets a reference to the given string and assigns it to the Theme field.
func (o *ImageByNameInfo) SetTheme(v string) {
	o.Theme = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *ImageByNameInfo) GetContext() string {
	if o == nil || IsNil(o.Context) {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageByNameInfo) GetContextOk() (*string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *ImageByNameInfo) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *ImageByNameInfo) SetContext(v string) {
	o.Context = &v
}

// GetFileLength returns the FileLength field value if set, zero value otherwise.
func (o *ImageByNameInfo) GetFileLength() int64 {
	if o == nil || IsNil(o.FileLength) {
		var ret int64
		return ret
	}
	return *o.FileLength
}

// GetFileLengthOk returns a tuple with the FileLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageByNameInfo) GetFileLengthOk() (*int64, bool) {
	if o == nil || IsNil(o.FileLength) {
		return nil, false
	}
	return o.FileLength, true
}

// HasFileLength returns a boolean if a field has been set.
func (o *ImageByNameInfo) HasFileLength() bool {
	if o != nil && !IsNil(o.FileLength) {
		return true
	}

	return false
}

// SetFileLength gets a reference to the given int64 and assigns it to the FileLength field.
func (o *ImageByNameInfo) SetFileLength(v int64) {
	o.FileLength = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *ImageByNameInfo) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageByNameInfo) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *ImageByNameInfo) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *ImageByNameInfo) SetFormat(v string) {
	o.Format = &v
}

func (o ImageByNameInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageByNameInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Theme) {
		toSerialize["Theme"] = o.Theme
	}
	if !IsNil(o.Context) {
		toSerialize["Context"] = o.Context
	}
	if !IsNil(o.FileLength) {
		toSerialize["FileLength"] = o.FileLength
	}
	if !IsNil(o.Format) {
		toSerialize["Format"] = o.Format
	}
	return toSerialize, nil
}

type NullableImageByNameInfo struct {
	value *ImageByNameInfo
	isSet bool
}

func (v NullableImageByNameInfo) Get() *ImageByNameInfo {
	return v.value
}

func (v *NullableImageByNameInfo) Set(val *ImageByNameInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableImageByNameInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableImageByNameInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageByNameInfo(val *ImageByNameInfo) *NullableImageByNameInfo {
	return &NullableImageByNameInfo{value: val, isSet: true}
}

func (v NullableImageByNameInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageByNameInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


