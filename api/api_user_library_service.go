/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type UserLibraryServiceAPI interface {

	/*
	DeleteUsersByUseridFavoriteitemsById Unmarks an item as a favorite

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId User Id
	@param id Item Id
	@return ApiDeleteUsersByUseridFavoriteitemsByIdRequest
	*/
	DeleteUsersByUseridFavoriteitemsById(ctx context.Context, userId string, id string) ApiDeleteUsersByUseridFavoriteitemsByIdRequest

	// DeleteUsersByUseridFavoriteitemsByIdExecute executes the request
	//  @return UserItemDataDto
	DeleteUsersByUseridFavoriteitemsByIdExecute(r ApiDeleteUsersByUseridFavoriteitemsByIdRequest) (*UserItemDataDto, *http.Response, error)

	/*
	DeleteUsersByUseridItemsByIdRating Deletes a user's saved personal rating for an item

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId User Id
	@param id Item Id
	@return ApiDeleteUsersByUseridItemsByIdRatingRequest
	*/
	DeleteUsersByUseridItemsByIdRating(ctx context.Context, userId string, id string) ApiDeleteUsersByUseridItemsByIdRatingRequest

	// DeleteUsersByUseridItemsByIdRatingExecute executes the request
	//  @return UserItemDataDto
	DeleteUsersByUseridItemsByIdRatingExecute(r ApiDeleteUsersByUseridItemsByIdRatingRequest) (*UserItemDataDto, *http.Response, error)

	/*
	GetLivetvProgramsById Gets a live tv program

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@return ApiGetLivetvProgramsByIdRequest
	*/
	GetLivetvProgramsById(ctx context.Context, id string) ApiGetLivetvProgramsByIdRequest

	// GetLivetvProgramsByIdExecute executes the request
	//  @return BaseItemDto
	GetLivetvProgramsByIdExecute(r ApiGetLivetvProgramsByIdRequest) (*BaseItemDto, *http.Response, error)

	/*
	GetUsersByUseridItemsById Gets an item from a user's library

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId User Id
	@param id Item Id
	@return ApiGetUsersByUseridItemsByIdRequest
	*/
	GetUsersByUseridItemsById(ctx context.Context, userId string, id string) ApiGetUsersByUseridItemsByIdRequest

	// GetUsersByUseridItemsByIdExecute executes the request
	//  @return BaseItemDto
	GetUsersByUseridItemsByIdExecute(r ApiGetUsersByUseridItemsByIdRequest) (*BaseItemDto, *http.Response, error)

	/*
	GetUsersByUseridItemsByIdIntros Gets intros to play before the main media item plays

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId User Id
	@param id Item Id
	@return ApiGetUsersByUseridItemsByIdIntrosRequest
	*/
	GetUsersByUseridItemsByIdIntros(ctx context.Context, userId string, id string) ApiGetUsersByUseridItemsByIdIntrosRequest

	// GetUsersByUseridItemsByIdIntrosExecute executes the request
	//  @return QueryResultBaseItemDto
	GetUsersByUseridItemsByIdIntrosExecute(r ApiGetUsersByUseridItemsByIdIntrosRequest) (*QueryResultBaseItemDto, *http.Response, error)

	/*
	GetUsersByUseridItemsByIdLocaltrailers Gets local trailers for an item

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId User Id
	@param id Item Id
	@return ApiGetUsersByUseridItemsByIdLocaltrailersRequest
	*/
	GetUsersByUseridItemsByIdLocaltrailers(ctx context.Context, userId string, id string) ApiGetUsersByUseridItemsByIdLocaltrailersRequest

	// GetUsersByUseridItemsByIdLocaltrailersExecute executes the request
	//  @return []BaseItemDto
	GetUsersByUseridItemsByIdLocaltrailersExecute(r ApiGetUsersByUseridItemsByIdLocaltrailersRequest) ([]BaseItemDto, *http.Response, error)

	/*
	GetUsersByUseridItemsByIdSpecialfeatures Gets special features for an item

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId User Id
	@param id Movie Id
	@return ApiGetUsersByUseridItemsByIdSpecialfeaturesRequest
	*/
	GetUsersByUseridItemsByIdSpecialfeatures(ctx context.Context, userId string, id string) ApiGetUsersByUseridItemsByIdSpecialfeaturesRequest

	// GetUsersByUseridItemsByIdSpecialfeaturesExecute executes the request
	//  @return []BaseItemDto
	GetUsersByUseridItemsByIdSpecialfeaturesExecute(r ApiGetUsersByUseridItemsByIdSpecialfeaturesRequest) ([]BaseItemDto, *http.Response, error)

	/*
	GetUsersByUseridItemsLatest Gets latest media

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId User Id
	@return ApiGetUsersByUseridItemsLatestRequest
	*/
	GetUsersByUseridItemsLatest(ctx context.Context, userId string) ApiGetUsersByUseridItemsLatestRequest

	// GetUsersByUseridItemsLatestExecute executes the request
	//  @return []BaseItemDto
	GetUsersByUseridItemsLatestExecute(r ApiGetUsersByUseridItemsLatestRequest) ([]BaseItemDto, *http.Response, error)

	/*
	GetUsersByUseridItemsRoot Gets the root folder from a user's library

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId User Id
	@return ApiGetUsersByUseridItemsRootRequest
	*/
	GetUsersByUseridItemsRoot(ctx context.Context, userId string) ApiGetUsersByUseridItemsRootRequest

	// GetUsersByUseridItemsRootExecute executes the request
	//  @return BaseItemDto
	GetUsersByUseridItemsRootExecute(r ApiGetUsersByUseridItemsRootRequest) (*BaseItemDto, *http.Response, error)

	/*
	PostUsersByUseridFavoriteitemsById Marks an item as a favorite

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId User Id
	@param id Item Id
	@return ApiPostUsersByUseridFavoriteitemsByIdRequest
	*/
	PostUsersByUseridFavoriteitemsById(ctx context.Context, userId string, id string) ApiPostUsersByUseridFavoriteitemsByIdRequest

	// PostUsersByUseridFavoriteitemsByIdExecute executes the request
	//  @return UserItemDataDto
	PostUsersByUseridFavoriteitemsByIdExecute(r ApiPostUsersByUseridFavoriteitemsByIdRequest) (*UserItemDataDto, *http.Response, error)

	/*
	PostUsersByUseridItemsByIdRating Updates a user's rating for an item

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId User Id
	@param id Item Id
	@return ApiPostUsersByUseridItemsByIdRatingRequest
	*/
	PostUsersByUseridItemsByIdRating(ctx context.Context, userId string, id string) ApiPostUsersByUseridItemsByIdRatingRequest

	// PostUsersByUseridItemsByIdRatingExecute executes the request
	//  @return UserItemDataDto
	PostUsersByUseridItemsByIdRatingExecute(r ApiPostUsersByUseridItemsByIdRatingRequest) (*UserItemDataDto, *http.Response, error)
}

// UserLibraryServiceAPIService UserLibraryServiceAPI service
type UserLibraryServiceAPIService service

type ApiDeleteUsersByUseridFavoriteitemsByIdRequest struct {
	ctx context.Context
	ApiService UserLibraryServiceAPI
	userId string
	id string
}

func (r ApiDeleteUsersByUseridFavoriteitemsByIdRequest) Execute() (*UserItemDataDto, *http.Response, error) {
	return r.ApiService.DeleteUsersByUseridFavoriteitemsByIdExecute(r)
}

/*
DeleteUsersByUseridFavoriteitemsById Unmarks an item as a favorite

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @param id Item Id
 @return ApiDeleteUsersByUseridFavoriteitemsByIdRequest
*/
func (a *UserLibraryServiceAPIService) DeleteUsersByUseridFavoriteitemsById(ctx context.Context, userId string, id string) ApiDeleteUsersByUseridFavoriteitemsByIdRequest {
	return ApiDeleteUsersByUseridFavoriteitemsByIdRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		id: id,
	}
}

// Execute executes the request
//  @return UserItemDataDto
func (a *UserLibraryServiceAPIService) DeleteUsersByUseridFavoriteitemsByIdExecute(r ApiDeleteUsersByUseridFavoriteitemsByIdRequest) (*UserItemDataDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserItemDataDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.DeleteUsersByUseridFavoriteitemsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/FavoriteItems/{Id}"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteUsersByUseridItemsByIdRatingRequest struct {
	ctx context.Context
	ApiService UserLibraryServiceAPI
	userId string
	id string
}

func (r ApiDeleteUsersByUseridItemsByIdRatingRequest) Execute() (*UserItemDataDto, *http.Response, error) {
	return r.ApiService.DeleteUsersByUseridItemsByIdRatingExecute(r)
}

/*
DeleteUsersByUseridItemsByIdRating Deletes a user's saved personal rating for an item

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @param id Item Id
 @return ApiDeleteUsersByUseridItemsByIdRatingRequest
*/
func (a *UserLibraryServiceAPIService) DeleteUsersByUseridItemsByIdRating(ctx context.Context, userId string, id string) ApiDeleteUsersByUseridItemsByIdRatingRequest {
	return ApiDeleteUsersByUseridItemsByIdRatingRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		id: id,
	}
}

// Execute executes the request
//  @return UserItemDataDto
func (a *UserLibraryServiceAPIService) DeleteUsersByUseridItemsByIdRatingExecute(r ApiDeleteUsersByUseridItemsByIdRatingRequest) (*UserItemDataDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserItemDataDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.DeleteUsersByUseridItemsByIdRating")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/Items/{Id}/Rating"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLivetvProgramsByIdRequest struct {
	ctx context.Context
	ApiService UserLibraryServiceAPI
	id string
}

func (r ApiGetLivetvProgramsByIdRequest) Execute() (*BaseItemDto, *http.Response, error) {
	return r.ApiService.GetLivetvProgramsByIdExecute(r)
}

/*
GetLivetvProgramsById Gets a live tv program

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return ApiGetLivetvProgramsByIdRequest
*/
func (a *UserLibraryServiceAPIService) GetLivetvProgramsById(ctx context.Context, id string) ApiGetLivetvProgramsByIdRequest {
	return ApiGetLivetvProgramsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BaseItemDto
func (a *UserLibraryServiceAPIService) GetLivetvProgramsByIdExecute(r ApiGetLivetvProgramsByIdRequest) (*BaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.GetLivetvProgramsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/LiveTv/Programs/{Id}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUsersByUseridItemsByIdRequest struct {
	ctx context.Context
	ApiService UserLibraryServiceAPI
	userId string
	id string
}

func (r ApiGetUsersByUseridItemsByIdRequest) Execute() (*BaseItemDto, *http.Response, error) {
	return r.ApiService.GetUsersByUseridItemsByIdExecute(r)
}

/*
GetUsersByUseridItemsById Gets an item from a user's library

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @param id Item Id
 @return ApiGetUsersByUseridItemsByIdRequest
*/
func (a *UserLibraryServiceAPIService) GetUsersByUseridItemsById(ctx context.Context, userId string, id string) ApiGetUsersByUseridItemsByIdRequest {
	return ApiGetUsersByUseridItemsByIdRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		id: id,
	}
}

// Execute executes the request
//  @return BaseItemDto
func (a *UserLibraryServiceAPIService) GetUsersByUseridItemsByIdExecute(r ApiGetUsersByUseridItemsByIdRequest) (*BaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.GetUsersByUseridItemsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/Items/{Id}"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUsersByUseridItemsByIdIntrosRequest struct {
	ctx context.Context
	ApiService UserLibraryServiceAPI
	userId string
	id string
}

func (r ApiGetUsersByUseridItemsByIdIntrosRequest) Execute() (*QueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetUsersByUseridItemsByIdIntrosExecute(r)
}

/*
GetUsersByUseridItemsByIdIntros Gets intros to play before the main media item plays

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @param id Item Id
 @return ApiGetUsersByUseridItemsByIdIntrosRequest
*/
func (a *UserLibraryServiceAPIService) GetUsersByUseridItemsByIdIntros(ctx context.Context, userId string, id string) ApiGetUsersByUseridItemsByIdIntrosRequest {
	return ApiGetUsersByUseridItemsByIdIntrosRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		id: id,
	}
}

// Execute executes the request
//  @return QueryResultBaseItemDto
func (a *UserLibraryServiceAPIService) GetUsersByUseridItemsByIdIntrosExecute(r ApiGetUsersByUseridItemsByIdIntrosRequest) (*QueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.GetUsersByUseridItemsByIdIntros")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/Items/{Id}/Intros"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUsersByUseridItemsByIdLocaltrailersRequest struct {
	ctx context.Context
	ApiService UserLibraryServiceAPI
	userId string
	id string
}

func (r ApiGetUsersByUseridItemsByIdLocaltrailersRequest) Execute() ([]BaseItemDto, *http.Response, error) {
	return r.ApiService.GetUsersByUseridItemsByIdLocaltrailersExecute(r)
}

/*
GetUsersByUseridItemsByIdLocaltrailers Gets local trailers for an item

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @param id Item Id
 @return ApiGetUsersByUseridItemsByIdLocaltrailersRequest
*/
func (a *UserLibraryServiceAPIService) GetUsersByUseridItemsByIdLocaltrailers(ctx context.Context, userId string, id string) ApiGetUsersByUseridItemsByIdLocaltrailersRequest {
	return ApiGetUsersByUseridItemsByIdLocaltrailersRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		id: id,
	}
}

// Execute executes the request
//  @return []BaseItemDto
func (a *UserLibraryServiceAPIService) GetUsersByUseridItemsByIdLocaltrailersExecute(r ApiGetUsersByUseridItemsByIdLocaltrailersRequest) ([]BaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []BaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.GetUsersByUseridItemsByIdLocaltrailers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/Items/{Id}/LocalTrailers"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUsersByUseridItemsByIdSpecialfeaturesRequest struct {
	ctx context.Context
	ApiService UserLibraryServiceAPI
	userId string
	id string
}

func (r ApiGetUsersByUseridItemsByIdSpecialfeaturesRequest) Execute() ([]BaseItemDto, *http.Response, error) {
	return r.ApiService.GetUsersByUseridItemsByIdSpecialfeaturesExecute(r)
}

/*
GetUsersByUseridItemsByIdSpecialfeatures Gets special features for an item

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @param id Movie Id
 @return ApiGetUsersByUseridItemsByIdSpecialfeaturesRequest
*/
func (a *UserLibraryServiceAPIService) GetUsersByUseridItemsByIdSpecialfeatures(ctx context.Context, userId string, id string) ApiGetUsersByUseridItemsByIdSpecialfeaturesRequest {
	return ApiGetUsersByUseridItemsByIdSpecialfeaturesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		id: id,
	}
}

// Execute executes the request
//  @return []BaseItemDto
func (a *UserLibraryServiceAPIService) GetUsersByUseridItemsByIdSpecialfeaturesExecute(r ApiGetUsersByUseridItemsByIdSpecialfeaturesRequest) ([]BaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []BaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.GetUsersByUseridItemsByIdSpecialfeatures")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/Items/{Id}/SpecialFeatures"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUsersByUseridItemsLatestRequest struct {
	ctx context.Context
	ApiService UserLibraryServiceAPI
	userId string
	limit *int32
	parentId *string
	fields *string
	includeItemTypes *string
	isFolder *bool
	isPlayed *bool
	groupItems *bool
	enableImages *bool
	imageTypeLimit *int32
	enableImageTypes *string
	enableUserData *bool
}

// Limit
func (r ApiGetUsersByUseridItemsLatestRequest) Limit(limit int32) ApiGetUsersByUseridItemsLatestRequest {
	r.limit = &limit
	return r
}

// Specify this to localize the search to a specific item or folder. Omit to use the root
func (r ApiGetUsersByUseridItemsLatestRequest) ParentId(parentId string) ApiGetUsersByUseridItemsLatestRequest {
	r.parentId = &parentId
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, SortName, Studios, Taglines
func (r ApiGetUsersByUseridItemsLatestRequest) Fields(fields string) ApiGetUsersByUseridItemsLatestRequest {
	r.fields = &fields
	return r
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r ApiGetUsersByUseridItemsLatestRequest) IncludeItemTypes(includeItemTypes string) ApiGetUsersByUseridItemsLatestRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Filter by items that are folders, or not.
func (r ApiGetUsersByUseridItemsLatestRequest) IsFolder(isFolder bool) ApiGetUsersByUseridItemsLatestRequest {
	r.isFolder = &isFolder
	return r
}

// Filter by items that are played, or not.
func (r ApiGetUsersByUseridItemsLatestRequest) IsPlayed(isPlayed bool) ApiGetUsersByUseridItemsLatestRequest {
	r.isPlayed = &isPlayed
	return r
}

// Whether or not to group items into a parent container.
func (r ApiGetUsersByUseridItemsLatestRequest) GroupItems(groupItems bool) ApiGetUsersByUseridItemsLatestRequest {
	r.groupItems = &groupItems
	return r
}

// Optional, include image information in output
func (r ApiGetUsersByUseridItemsLatestRequest) EnableImages(enableImages bool) ApiGetUsersByUseridItemsLatestRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, the max number of images to return, per image type
func (r ApiGetUsersByUseridItemsLatestRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetUsersByUseridItemsLatestRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetUsersByUseridItemsLatestRequest) EnableImageTypes(enableImageTypes string) ApiGetUsersByUseridItemsLatestRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional, include user data
func (r ApiGetUsersByUseridItemsLatestRequest) EnableUserData(enableUserData bool) ApiGetUsersByUseridItemsLatestRequest {
	r.enableUserData = &enableUserData
	return r
}

func (r ApiGetUsersByUseridItemsLatestRequest) Execute() ([]BaseItemDto, *http.Response, error) {
	return r.ApiService.GetUsersByUseridItemsLatestExecute(r)
}

/*
GetUsersByUseridItemsLatest Gets latest media

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @return ApiGetUsersByUseridItemsLatestRequest
*/
func (a *UserLibraryServiceAPIService) GetUsersByUseridItemsLatest(ctx context.Context, userId string) ApiGetUsersByUseridItemsLatestRequest {
	return ApiGetUsersByUseridItemsLatestRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return []BaseItemDto
func (a *UserLibraryServiceAPIService) GetUsersByUseridItemsLatestExecute(r ApiGetUsersByUseridItemsLatestRequest) ([]BaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []BaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.GetUsersByUseridItemsLatest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/Items/Latest"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "form", "")
	}
	if r.parentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ParentId", r.parentId, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "form", "")
	}
	if r.includeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeItemTypes", r.includeItemTypes, "form", "")
	}
	if r.isFolder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsFolder", r.isFolder, "form", "")
	}
	if r.isPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsPlayed", r.isPlayed, "form", "")
	}
	if r.groupItems != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "GroupItems", r.groupItems, "form", "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUsersByUseridItemsRootRequest struct {
	ctx context.Context
	ApiService UserLibraryServiceAPI
	userId string
}

func (r ApiGetUsersByUseridItemsRootRequest) Execute() (*BaseItemDto, *http.Response, error) {
	return r.ApiService.GetUsersByUseridItemsRootExecute(r)
}

/*
GetUsersByUseridItemsRoot Gets the root folder from a user's library

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @return ApiGetUsersByUseridItemsRootRequest
*/
func (a *UserLibraryServiceAPIService) GetUsersByUseridItemsRoot(ctx context.Context, userId string) ApiGetUsersByUseridItemsRootRequest {
	return ApiGetUsersByUseridItemsRootRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return BaseItemDto
func (a *UserLibraryServiceAPIService) GetUsersByUseridItemsRootExecute(r ApiGetUsersByUseridItemsRootRequest) (*BaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.GetUsersByUseridItemsRoot")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/Items/Root"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostUsersByUseridFavoriteitemsByIdRequest struct {
	ctx context.Context
	ApiService UserLibraryServiceAPI
	userId string
	id string
}

func (r ApiPostUsersByUseridFavoriteitemsByIdRequest) Execute() (*UserItemDataDto, *http.Response, error) {
	return r.ApiService.PostUsersByUseridFavoriteitemsByIdExecute(r)
}

/*
PostUsersByUseridFavoriteitemsById Marks an item as a favorite

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @param id Item Id
 @return ApiPostUsersByUseridFavoriteitemsByIdRequest
*/
func (a *UserLibraryServiceAPIService) PostUsersByUseridFavoriteitemsById(ctx context.Context, userId string, id string) ApiPostUsersByUseridFavoriteitemsByIdRequest {
	return ApiPostUsersByUseridFavoriteitemsByIdRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		id: id,
	}
}

// Execute executes the request
//  @return UserItemDataDto
func (a *UserLibraryServiceAPIService) PostUsersByUseridFavoriteitemsByIdExecute(r ApiPostUsersByUseridFavoriteitemsByIdRequest) (*UserItemDataDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserItemDataDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.PostUsersByUseridFavoriteitemsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/FavoriteItems/{Id}"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostUsersByUseridItemsByIdRatingRequest struct {
	ctx context.Context
	ApiService UserLibraryServiceAPI
	userId string
	id string
	likes *bool
}

// Whether the user likes the item or not. true/false
func (r ApiPostUsersByUseridItemsByIdRatingRequest) Likes(likes bool) ApiPostUsersByUseridItemsByIdRatingRequest {
	r.likes = &likes
	return r
}

func (r ApiPostUsersByUseridItemsByIdRatingRequest) Execute() (*UserItemDataDto, *http.Response, error) {
	return r.ApiService.PostUsersByUseridItemsByIdRatingExecute(r)
}

/*
PostUsersByUseridItemsByIdRating Updates a user's rating for an item

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @param id Item Id
 @return ApiPostUsersByUseridItemsByIdRatingRequest
*/
func (a *UserLibraryServiceAPIService) PostUsersByUseridItemsByIdRating(ctx context.Context, userId string, id string) ApiPostUsersByUseridItemsByIdRatingRequest {
	return ApiPostUsersByUseridItemsByIdRatingRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		id: id,
	}
}

// Execute executes the request
//  @return UserItemDataDto
func (a *UserLibraryServiceAPIService) PostUsersByUseridItemsByIdRatingExecute(r ApiPostUsersByUseridItemsByIdRatingRequest) (*UserItemDataDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserItemDataDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.PostUsersByUseridItemsByIdRating")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/Items/{Id}/Rating"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.likes == nil {
		return localVarReturnValue, nil, reportError("likes is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Likes", r.likes, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
