/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type VideoHlsServiceAPI interface {

	/*
	GetVideosByIdLiveM3u8 Method for GetVideosByIdLiveM3u8

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@return ApiGetVideosByIdLiveM3u8Request
	*/
	GetVideosByIdLiveM3u8(ctx context.Context, id string) ApiGetVideosByIdLiveM3u8Request

	// GetVideosByIdLiveM3u8Execute executes the request
	GetVideosByIdLiveM3u8Execute(r ApiGetVideosByIdLiveM3u8Request) (*http.Response, error)
}

// VideoHlsServiceAPIService VideoHlsServiceAPI service
type VideoHlsServiceAPIService service

type ApiGetVideosByIdLiveM3u8Request struct {
	ctx context.Context
	ApiService VideoHlsServiceAPI
	id string
	container *string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *string
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Container
func (r ApiGetVideosByIdLiveM3u8Request) Container(container string) ApiGetVideosByIdLiveM3u8Request {
	r.container = &container
	return r
}

// Optional. The dlna device profile id to utilize.
func (r ApiGetVideosByIdLiveM3u8Request) DeviceProfileId(deviceProfileId string) ApiGetVideosByIdLiveM3u8Request {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r ApiGetVideosByIdLiveM3u8Request) DeviceId(deviceId string) ApiGetVideosByIdLiveM3u8Request {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r ApiGetVideosByIdLiveM3u8Request) AudioCodec(audioCodec string) ApiGetVideosByIdLiveM3u8Request {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r ApiGetVideosByIdLiveM3u8Request) EnableAutoStreamCopy(enableAutoStreamCopy bool) ApiGetVideosByIdLiveM3u8Request {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r ApiGetVideosByIdLiveM3u8Request) AudioSampleRate(audioSampleRate int32) ApiGetVideosByIdLiveM3u8Request {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r ApiGetVideosByIdLiveM3u8Request) AudioBitRate(audioBitRate int32) ApiGetVideosByIdLiveM3u8Request {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r ApiGetVideosByIdLiveM3u8Request) AudioChannels(audioChannels int32) ApiGetVideosByIdLiveM3u8Request {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r ApiGetVideosByIdLiveM3u8Request) MaxAudioChannels(maxAudioChannels int32) ApiGetVideosByIdLiveM3u8Request {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r ApiGetVideosByIdLiveM3u8Request) Static(static bool) ApiGetVideosByIdLiveM3u8Request {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r ApiGetVideosByIdLiveM3u8Request) Profile(profile string) ApiGetVideosByIdLiveM3u8Request {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r ApiGetVideosByIdLiveM3u8Request) Level(level string) ApiGetVideosByIdLiveM3u8Request {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiGetVideosByIdLiveM3u8Request) Framerate(framerate float32) ApiGetVideosByIdLiveM3u8Request {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiGetVideosByIdLiveM3u8Request) MaxFramerate(maxFramerate float32) ApiGetVideosByIdLiveM3u8Request {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r ApiGetVideosByIdLiveM3u8Request) CopyTimestamps(copyTimestamps bool) ApiGetVideosByIdLiveM3u8Request {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
func (r ApiGetVideosByIdLiveM3u8Request) StartTimeTicks(startTimeTicks int64) ApiGetVideosByIdLiveM3u8Request {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r ApiGetVideosByIdLiveM3u8Request) Width(width int32) ApiGetVideosByIdLiveM3u8Request {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r ApiGetVideosByIdLiveM3u8Request) Height(height int32) ApiGetVideosByIdLiveM3u8Request {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r ApiGetVideosByIdLiveM3u8Request) MaxWidth(maxWidth int32) ApiGetVideosByIdLiveM3u8Request {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r ApiGetVideosByIdLiveM3u8Request) MaxHeight(maxHeight int32) ApiGetVideosByIdLiveM3u8Request {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r ApiGetVideosByIdLiveM3u8Request) VideoBitRate(videoBitRate int32) ApiGetVideosByIdLiveM3u8Request {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r ApiGetVideosByIdLiveM3u8Request) SubtitleStreamIndex(subtitleStreamIndex int32) ApiGetVideosByIdLiveM3u8Request {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r ApiGetVideosByIdLiveM3u8Request) SubtitleMethod(subtitleMethod string) ApiGetVideosByIdLiveM3u8Request {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r ApiGetVideosByIdLiveM3u8Request) MaxRefFrames(maxRefFrames int32) ApiGetVideosByIdLiveM3u8Request {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r ApiGetVideosByIdLiveM3u8Request) MaxVideoBitDepth(maxVideoBitDepth int32) ApiGetVideosByIdLiveM3u8Request {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r ApiGetVideosByIdLiveM3u8Request) VideoCodec(videoCodec string) ApiGetVideosByIdLiveM3u8Request {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r ApiGetVideosByIdLiveM3u8Request) AudioStreamIndex(audioStreamIndex int32) ApiGetVideosByIdLiveM3u8Request {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r ApiGetVideosByIdLiveM3u8Request) VideoStreamIndex(videoStreamIndex int32) ApiGetVideosByIdLiveM3u8Request {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r ApiGetVideosByIdLiveM3u8Request) Execute() (*http.Response, error) {
	return r.ApiService.GetVideosByIdLiveM3u8Execute(r)
}

/*
GetVideosByIdLiveM3u8 Method for GetVideosByIdLiveM3u8

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return ApiGetVideosByIdLiveM3u8Request
*/
func (a *VideoHlsServiceAPIService) GetVideosByIdLiveM3u8(ctx context.Context, id string) ApiGetVideosByIdLiveM3u8Request {
	return ApiGetVideosByIdLiveM3u8Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *VideoHlsServiceAPIService) GetVideosByIdLiveM3u8Execute(r ApiGetVideosByIdLiveM3u8Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideoHlsServiceAPIService.GetVideosByIdLiveM3u8")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/live.m3u8"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.container == nil {
		return nil, reportError("container is required and must be specified")
	}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "form", "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Container", r.container, "form", "")
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "form", "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "form", "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "form", "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "form", "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "form", "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "form", "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "form", "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "form", "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "form", "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "form", "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "form", "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
