/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type UserViewsServiceAPI interface {

	/*
	GetUsersByUseridGroupingoptions Method for GetUsersByUseridGroupingoptions

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId User Id
	@return ApiGetUsersByUseridGroupingoptionsRequest
	*/
	GetUsersByUseridGroupingoptions(ctx context.Context, userId string) ApiGetUsersByUseridGroupingoptionsRequest

	// GetUsersByUseridGroupingoptionsExecute executes the request
	//  @return []BaseItemDto
	GetUsersByUseridGroupingoptionsExecute(r ApiGetUsersByUseridGroupingoptionsRequest) ([]BaseItemDto, *http.Response, error)

	/*
	GetUsersByUseridViews Method for GetUsersByUseridViews

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId User Id
	@return ApiGetUsersByUseridViewsRequest
	*/
	GetUsersByUseridViews(ctx context.Context, userId string) ApiGetUsersByUseridViewsRequest

	// GetUsersByUseridViewsExecute executes the request
	//  @return QueryResultBaseItemDto
	GetUsersByUseridViewsExecute(r ApiGetUsersByUseridViewsRequest) (*QueryResultBaseItemDto, *http.Response, error)
}

// UserViewsServiceAPIService UserViewsServiceAPI service
type UserViewsServiceAPIService service

type ApiGetUsersByUseridGroupingoptionsRequest struct {
	ctx context.Context
	ApiService UserViewsServiceAPI
	userId string
}

func (r ApiGetUsersByUseridGroupingoptionsRequest) Execute() ([]BaseItemDto, *http.Response, error) {
	return r.ApiService.GetUsersByUseridGroupingoptionsExecute(r)
}

/*
GetUsersByUseridGroupingoptions Method for GetUsersByUseridGroupingoptions

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @return ApiGetUsersByUseridGroupingoptionsRequest
*/
func (a *UserViewsServiceAPIService) GetUsersByUseridGroupingoptions(ctx context.Context, userId string) ApiGetUsersByUseridGroupingoptionsRequest {
	return ApiGetUsersByUseridGroupingoptionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return []BaseItemDto
func (a *UserViewsServiceAPIService) GetUsersByUseridGroupingoptionsExecute(r ApiGetUsersByUseridGroupingoptionsRequest) ([]BaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []BaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserViewsServiceAPIService.GetUsersByUseridGroupingoptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/GroupingOptions"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUsersByUseridViewsRequest struct {
	ctx context.Context
	ApiService UserViewsServiceAPI
	userId string
	includeExternalContent *bool
}

// Whether or not to include external views such as channels or live tv
func (r ApiGetUsersByUseridViewsRequest) IncludeExternalContent(includeExternalContent bool) ApiGetUsersByUseridViewsRequest {
	r.includeExternalContent = &includeExternalContent
	return r
}

func (r ApiGetUsersByUseridViewsRequest) Execute() (*QueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetUsersByUseridViewsExecute(r)
}

/*
GetUsersByUseridViews Method for GetUsersByUseridViews

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @return ApiGetUsersByUseridViewsRequest
*/
func (a *UserViewsServiceAPIService) GetUsersByUseridViews(ctx context.Context, userId string) ApiGetUsersByUseridViewsRequest {
	return ApiGetUsersByUseridViewsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return QueryResultBaseItemDto
func (a *UserViewsServiceAPIService) GetUsersByUseridViewsExecute(r ApiGetUsersByUseridViewsRequest) (*QueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserViewsServiceAPIService.GetUsersByUseridViews")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/Views"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.includeExternalContent == nil {
		return localVarReturnValue, nil, reportError("includeExternalContent is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeExternalContent", r.includeExternalContent, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
