/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


type ImageServiceAPI interface {

	/*
	DeleteItemsByIdImagesByType Method for DeleteItemsByIdImagesByType

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@param type_ Image Type
	@return ApiDeleteItemsByIdImagesByTypeRequest
	*/
	DeleteItemsByIdImagesByType(ctx context.Context, id string, type_ string) ApiDeleteItemsByIdImagesByTypeRequest

	// DeleteItemsByIdImagesByTypeExecute executes the request
	DeleteItemsByIdImagesByTypeExecute(r ApiDeleteItemsByIdImagesByTypeRequest) (*http.Response, error)

	/*
	DeleteItemsByIdImagesByTypeByIndex Method for DeleteItemsByIdImagesByTypeByIndex

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@param type_ Image Type
	@param index Image Index
	@return ApiDeleteItemsByIdImagesByTypeByIndexRequest
	*/
	DeleteItemsByIdImagesByTypeByIndex(ctx context.Context, id string, type_ string, index int32) ApiDeleteItemsByIdImagesByTypeByIndexRequest

	// DeleteItemsByIdImagesByTypeByIndexExecute executes the request
	DeleteItemsByIdImagesByTypeByIndexExecute(r ApiDeleteItemsByIdImagesByTypeByIndexRequest) (*http.Response, error)

	/*
	DeleteUsersByIdImagesByType Method for DeleteUsersByIdImagesByType

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id User Id
	@param type_ Image Type
	@return ApiDeleteUsersByIdImagesByTypeRequest
	*/
	DeleteUsersByIdImagesByType(ctx context.Context, id string, type_ string) ApiDeleteUsersByIdImagesByTypeRequest

	// DeleteUsersByIdImagesByTypeExecute executes the request
	DeleteUsersByIdImagesByTypeExecute(r ApiDeleteUsersByIdImagesByTypeRequest) (*http.Response, error)

	/*
	DeleteUsersByIdImagesByTypeByIndex Method for DeleteUsersByIdImagesByTypeByIndex

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id User Id
	@param type_ Image Type
	@param index Image Index
	@return ApiDeleteUsersByIdImagesByTypeByIndexRequest
	*/
	DeleteUsersByIdImagesByTypeByIndex(ctx context.Context, id string, type_ string, index int32) ApiDeleteUsersByIdImagesByTypeByIndexRequest

	// DeleteUsersByIdImagesByTypeByIndexExecute executes the request
	DeleteUsersByIdImagesByTypeByIndexExecute(r ApiDeleteUsersByIdImagesByTypeByIndexRequest) (*http.Response, error)

	/*
	GetArtistsByNameImagesByType Method for GetArtistsByNameImagesByType

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Item name
	@param type_ Image Type
	@return ApiGetArtistsByNameImagesByTypeRequest
	*/
	GetArtistsByNameImagesByType(ctx context.Context, name string, type_ string) ApiGetArtistsByNameImagesByTypeRequest

	// GetArtistsByNameImagesByTypeExecute executes the request
	GetArtistsByNameImagesByTypeExecute(r ApiGetArtistsByNameImagesByTypeRequest) (*http.Response, error)

	/*
	GetArtistsByNameImagesByTypeByIndex Method for GetArtistsByNameImagesByTypeByIndex

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Item name
	@param type_ Image Type
	@param index Image Index
	@return ApiGetArtistsByNameImagesByTypeByIndexRequest
	*/
	GetArtistsByNameImagesByTypeByIndex(ctx context.Context, name string, type_ string, index int32) ApiGetArtistsByNameImagesByTypeByIndexRequest

	// GetArtistsByNameImagesByTypeByIndexExecute executes the request
	GetArtistsByNameImagesByTypeByIndexExecute(r ApiGetArtistsByNameImagesByTypeByIndexRequest) (*http.Response, error)

	/*
	GetGamegenresByNameImagesByType Method for GetGamegenresByNameImagesByType

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Item name
	@param type_ Image Type
	@return ApiGetGamegenresByNameImagesByTypeRequest
	*/
	GetGamegenresByNameImagesByType(ctx context.Context, name string, type_ string) ApiGetGamegenresByNameImagesByTypeRequest

	// GetGamegenresByNameImagesByTypeExecute executes the request
	GetGamegenresByNameImagesByTypeExecute(r ApiGetGamegenresByNameImagesByTypeRequest) (*http.Response, error)

	/*
	GetGamegenresByNameImagesByTypeByIndex Method for GetGamegenresByNameImagesByTypeByIndex

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Item name
	@param type_ Image Type
	@param index Image Index
	@return ApiGetGamegenresByNameImagesByTypeByIndexRequest
	*/
	GetGamegenresByNameImagesByTypeByIndex(ctx context.Context, name string, type_ string, index int32) ApiGetGamegenresByNameImagesByTypeByIndexRequest

	// GetGamegenresByNameImagesByTypeByIndexExecute executes the request
	GetGamegenresByNameImagesByTypeByIndexExecute(r ApiGetGamegenresByNameImagesByTypeByIndexRequest) (*http.Response, error)

	/*
	GetGenresByNameImagesByType Method for GetGenresByNameImagesByType

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Item name
	@param type_ Image Type
	@return ApiGetGenresByNameImagesByTypeRequest
	*/
	GetGenresByNameImagesByType(ctx context.Context, name string, type_ string) ApiGetGenresByNameImagesByTypeRequest

	// GetGenresByNameImagesByTypeExecute executes the request
	GetGenresByNameImagesByTypeExecute(r ApiGetGenresByNameImagesByTypeRequest) (*http.Response, error)

	/*
	GetGenresByNameImagesByTypeByIndex Method for GetGenresByNameImagesByTypeByIndex

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Item name
	@param type_ Image Type
	@param index Image Index
	@return ApiGetGenresByNameImagesByTypeByIndexRequest
	*/
	GetGenresByNameImagesByTypeByIndex(ctx context.Context, name string, type_ string, index int32) ApiGetGenresByNameImagesByTypeByIndexRequest

	// GetGenresByNameImagesByTypeByIndexExecute executes the request
	GetGenresByNameImagesByTypeByIndexExecute(r ApiGetGenresByNameImagesByTypeByIndexRequest) (*http.Response, error)

	/*
	GetItemsByIdImages Gets information about an item's images

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@return ApiGetItemsByIdImagesRequest
	*/
	GetItemsByIdImages(ctx context.Context, id string) ApiGetItemsByIdImagesRequest

	// GetItemsByIdImagesExecute executes the request
	//  @return []ImageInfo
	GetItemsByIdImagesExecute(r ApiGetItemsByIdImagesRequest) ([]ImageInfo, *http.Response, error)

	/*
	GetItemsByIdImagesByType Method for GetItemsByIdImagesByType

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@param type_ Image Type
	@return ApiGetItemsByIdImagesByTypeRequest
	*/
	GetItemsByIdImagesByType(ctx context.Context, id string, type_ string) ApiGetItemsByIdImagesByTypeRequest

	// GetItemsByIdImagesByTypeExecute executes the request
	GetItemsByIdImagesByTypeExecute(r ApiGetItemsByIdImagesByTypeRequest) (*http.Response, error)

	/*
	GetItemsByIdImagesByTypeByIndex Method for GetItemsByIdImagesByTypeByIndex

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@param type_ Image Type
	@param index Image Index
	@return ApiGetItemsByIdImagesByTypeByIndexRequest
	*/
	GetItemsByIdImagesByTypeByIndex(ctx context.Context, id string, type_ string, index int32) ApiGetItemsByIdImagesByTypeByIndexRequest

	// GetItemsByIdImagesByTypeByIndexExecute executes the request
	GetItemsByIdImagesByTypeByIndexExecute(r ApiGetItemsByIdImagesByTypeByIndexRequest) (*http.Response, error)

	/*
	GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount Method for GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@param maxWidth The maximum image width to return.
	@param maxHeight The maximum image height to return.
	@param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
	@param format Determines the output foramt of the image - original,gif,jpg,png
	@param percentPlayed Optional percent to render for the percent played overlay
	@param unplayedCount Optional unplayed count overlay to render
	@param type_ Image Type
	@param index Image Index
	@return ApiGetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest
	*/
	GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount(ctx context.Context, id string, maxWidth int32, maxHeight int32, tag string, format string, percentPlayed float64, unplayedCount int32, type_ string, index int32) ApiGetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest

	// GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountExecute executes the request
	GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountExecute(r ApiGetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest) (*http.Response, error)

	/*
	GetMusicgenresByNameImagesByType Method for GetMusicgenresByNameImagesByType

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Item name
	@param type_ Image Type
	@return ApiGetMusicgenresByNameImagesByTypeRequest
	*/
	GetMusicgenresByNameImagesByType(ctx context.Context, name string, type_ string) ApiGetMusicgenresByNameImagesByTypeRequest

	// GetMusicgenresByNameImagesByTypeExecute executes the request
	GetMusicgenresByNameImagesByTypeExecute(r ApiGetMusicgenresByNameImagesByTypeRequest) (*http.Response, error)

	/*
	GetMusicgenresByNameImagesByTypeByIndex Method for GetMusicgenresByNameImagesByTypeByIndex

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Item name
	@param type_ Image Type
	@param index Image Index
	@return ApiGetMusicgenresByNameImagesByTypeByIndexRequest
	*/
	GetMusicgenresByNameImagesByTypeByIndex(ctx context.Context, name string, type_ string, index int32) ApiGetMusicgenresByNameImagesByTypeByIndexRequest

	// GetMusicgenresByNameImagesByTypeByIndexExecute executes the request
	GetMusicgenresByNameImagesByTypeByIndexExecute(r ApiGetMusicgenresByNameImagesByTypeByIndexRequest) (*http.Response, error)

	/*
	GetPersonsByNameImagesByType Method for GetPersonsByNameImagesByType

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Item name
	@param type_ Image Type
	@return ApiGetPersonsByNameImagesByTypeRequest
	*/
	GetPersonsByNameImagesByType(ctx context.Context, name string, type_ string) ApiGetPersonsByNameImagesByTypeRequest

	// GetPersonsByNameImagesByTypeExecute executes the request
	GetPersonsByNameImagesByTypeExecute(r ApiGetPersonsByNameImagesByTypeRequest) (*http.Response, error)

	/*
	GetPersonsByNameImagesByTypeByIndex Method for GetPersonsByNameImagesByTypeByIndex

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Item name
	@param type_ Image Type
	@param index Image Index
	@return ApiGetPersonsByNameImagesByTypeByIndexRequest
	*/
	GetPersonsByNameImagesByTypeByIndex(ctx context.Context, name string, type_ string, index int32) ApiGetPersonsByNameImagesByTypeByIndexRequest

	// GetPersonsByNameImagesByTypeByIndexExecute executes the request
	GetPersonsByNameImagesByTypeByIndexExecute(r ApiGetPersonsByNameImagesByTypeByIndexRequest) (*http.Response, error)

	/*
	GetStudiosByNameImagesByType Method for GetStudiosByNameImagesByType

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Item name
	@param type_ Image Type
	@return ApiGetStudiosByNameImagesByTypeRequest
	*/
	GetStudiosByNameImagesByType(ctx context.Context, name string, type_ string) ApiGetStudiosByNameImagesByTypeRequest

	// GetStudiosByNameImagesByTypeExecute executes the request
	GetStudiosByNameImagesByTypeExecute(r ApiGetStudiosByNameImagesByTypeRequest) (*http.Response, error)

	/*
	GetStudiosByNameImagesByTypeByIndex Method for GetStudiosByNameImagesByTypeByIndex

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Item name
	@param type_ Image Type
	@param index Image Index
	@return ApiGetStudiosByNameImagesByTypeByIndexRequest
	*/
	GetStudiosByNameImagesByTypeByIndex(ctx context.Context, name string, type_ string, index int32) ApiGetStudiosByNameImagesByTypeByIndexRequest

	// GetStudiosByNameImagesByTypeByIndexExecute executes the request
	GetStudiosByNameImagesByTypeByIndexExecute(r ApiGetStudiosByNameImagesByTypeByIndexRequest) (*http.Response, error)

	/*
	GetUsersByIdImagesByType Method for GetUsersByIdImagesByType

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id User Id
	@param type_ Image Type
	@return ApiGetUsersByIdImagesByTypeRequest
	*/
	GetUsersByIdImagesByType(ctx context.Context, id string, type_ string) ApiGetUsersByIdImagesByTypeRequest

	// GetUsersByIdImagesByTypeExecute executes the request
	GetUsersByIdImagesByTypeExecute(r ApiGetUsersByIdImagesByTypeRequest) (*http.Response, error)

	/*
	GetUsersByIdImagesByTypeByIndex Method for GetUsersByIdImagesByTypeByIndex

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id User Id
	@param type_ Image Type
	@param index Image Index
	@return ApiGetUsersByIdImagesByTypeByIndexRequest
	*/
	GetUsersByIdImagesByTypeByIndex(ctx context.Context, id string, type_ string, index int32) ApiGetUsersByIdImagesByTypeByIndexRequest

	// GetUsersByIdImagesByTypeByIndexExecute executes the request
	GetUsersByIdImagesByTypeByIndexExecute(r ApiGetUsersByIdImagesByTypeByIndexRequest) (*http.Response, error)

	/*
	HeadArtistsByNameImagesByType Method for HeadArtistsByNameImagesByType

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Item name
	@param type_ Image Type
	@return ApiHeadArtistsByNameImagesByTypeRequest
	*/
	HeadArtistsByNameImagesByType(ctx context.Context, name string, type_ string) ApiHeadArtistsByNameImagesByTypeRequest

	// HeadArtistsByNameImagesByTypeExecute executes the request
	HeadArtistsByNameImagesByTypeExecute(r ApiHeadArtistsByNameImagesByTypeRequest) (*http.Response, error)

	/*
	HeadArtistsByNameImagesByTypeByIndex Method for HeadArtistsByNameImagesByTypeByIndex

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Item name
	@param type_ Image Type
	@param index Image Index
	@return ApiHeadArtistsByNameImagesByTypeByIndexRequest
	*/
	HeadArtistsByNameImagesByTypeByIndex(ctx context.Context, name string, type_ string, index int32) ApiHeadArtistsByNameImagesByTypeByIndexRequest

	// HeadArtistsByNameImagesByTypeByIndexExecute executes the request
	HeadArtistsByNameImagesByTypeByIndexExecute(r ApiHeadArtistsByNameImagesByTypeByIndexRequest) (*http.Response, error)

	/*
	HeadGamegenresByNameImagesByType Method for HeadGamegenresByNameImagesByType

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Item name
	@param type_ Image Type
	@return ApiHeadGamegenresByNameImagesByTypeRequest
	*/
	HeadGamegenresByNameImagesByType(ctx context.Context, name string, type_ string) ApiHeadGamegenresByNameImagesByTypeRequest

	// HeadGamegenresByNameImagesByTypeExecute executes the request
	HeadGamegenresByNameImagesByTypeExecute(r ApiHeadGamegenresByNameImagesByTypeRequest) (*http.Response, error)

	/*
	HeadGamegenresByNameImagesByTypeByIndex Method for HeadGamegenresByNameImagesByTypeByIndex

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Item name
	@param type_ Image Type
	@param index Image Index
	@return ApiHeadGamegenresByNameImagesByTypeByIndexRequest
	*/
	HeadGamegenresByNameImagesByTypeByIndex(ctx context.Context, name string, type_ string, index int32) ApiHeadGamegenresByNameImagesByTypeByIndexRequest

	// HeadGamegenresByNameImagesByTypeByIndexExecute executes the request
	HeadGamegenresByNameImagesByTypeByIndexExecute(r ApiHeadGamegenresByNameImagesByTypeByIndexRequest) (*http.Response, error)

	/*
	HeadGenresByNameImagesByType Method for HeadGenresByNameImagesByType

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Item name
	@param type_ Image Type
	@return ApiHeadGenresByNameImagesByTypeRequest
	*/
	HeadGenresByNameImagesByType(ctx context.Context, name string, type_ string) ApiHeadGenresByNameImagesByTypeRequest

	// HeadGenresByNameImagesByTypeExecute executes the request
	HeadGenresByNameImagesByTypeExecute(r ApiHeadGenresByNameImagesByTypeRequest) (*http.Response, error)

	/*
	HeadGenresByNameImagesByTypeByIndex Method for HeadGenresByNameImagesByTypeByIndex

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Item name
	@param type_ Image Type
	@param index Image Index
	@return ApiHeadGenresByNameImagesByTypeByIndexRequest
	*/
	HeadGenresByNameImagesByTypeByIndex(ctx context.Context, name string, type_ string, index int32) ApiHeadGenresByNameImagesByTypeByIndexRequest

	// HeadGenresByNameImagesByTypeByIndexExecute executes the request
	HeadGenresByNameImagesByTypeByIndexExecute(r ApiHeadGenresByNameImagesByTypeByIndexRequest) (*http.Response, error)

	/*
	HeadItemsByIdImagesByType Method for HeadItemsByIdImagesByType

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@param type_ Image Type
	@return ApiHeadItemsByIdImagesByTypeRequest
	*/
	HeadItemsByIdImagesByType(ctx context.Context, id string, type_ string) ApiHeadItemsByIdImagesByTypeRequest

	// HeadItemsByIdImagesByTypeExecute executes the request
	HeadItemsByIdImagesByTypeExecute(r ApiHeadItemsByIdImagesByTypeRequest) (*http.Response, error)

	/*
	HeadItemsByIdImagesByTypeByIndex Method for HeadItemsByIdImagesByTypeByIndex

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@param type_ Image Type
	@param index Image Index
	@return ApiHeadItemsByIdImagesByTypeByIndexRequest
	*/
	HeadItemsByIdImagesByTypeByIndex(ctx context.Context, id string, type_ string, index int32) ApiHeadItemsByIdImagesByTypeByIndexRequest

	// HeadItemsByIdImagesByTypeByIndexExecute executes the request
	HeadItemsByIdImagesByTypeByIndexExecute(r ApiHeadItemsByIdImagesByTypeByIndexRequest) (*http.Response, error)

	/*
	HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount Method for HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@param maxWidth The maximum image width to return.
	@param maxHeight The maximum image height to return.
	@param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
	@param format Determines the output foramt of the image - original,gif,jpg,png
	@param percentPlayed Optional percent to render for the percent played overlay
	@param unplayedCount Optional unplayed count overlay to render
	@param type_ Image Type
	@param index Image Index
	@return ApiHeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest
	*/
	HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount(ctx context.Context, id string, maxWidth int32, maxHeight int32, tag string, format string, percentPlayed float64, unplayedCount int32, type_ string, index int32) ApiHeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest

	// HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountExecute executes the request
	HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountExecute(r ApiHeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest) (*http.Response, error)

	/*
	HeadMusicgenresByNameImagesByType Method for HeadMusicgenresByNameImagesByType

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Item name
	@param type_ Image Type
	@return ApiHeadMusicgenresByNameImagesByTypeRequest
	*/
	HeadMusicgenresByNameImagesByType(ctx context.Context, name string, type_ string) ApiHeadMusicgenresByNameImagesByTypeRequest

	// HeadMusicgenresByNameImagesByTypeExecute executes the request
	HeadMusicgenresByNameImagesByTypeExecute(r ApiHeadMusicgenresByNameImagesByTypeRequest) (*http.Response, error)

	/*
	HeadMusicgenresByNameImagesByTypeByIndex Method for HeadMusicgenresByNameImagesByTypeByIndex

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Item name
	@param type_ Image Type
	@param index Image Index
	@return ApiHeadMusicgenresByNameImagesByTypeByIndexRequest
	*/
	HeadMusicgenresByNameImagesByTypeByIndex(ctx context.Context, name string, type_ string, index int32) ApiHeadMusicgenresByNameImagesByTypeByIndexRequest

	// HeadMusicgenresByNameImagesByTypeByIndexExecute executes the request
	HeadMusicgenresByNameImagesByTypeByIndexExecute(r ApiHeadMusicgenresByNameImagesByTypeByIndexRequest) (*http.Response, error)

	/*
	HeadPersonsByNameImagesByType Method for HeadPersonsByNameImagesByType

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Item name
	@param type_ Image Type
	@return ApiHeadPersonsByNameImagesByTypeRequest
	*/
	HeadPersonsByNameImagesByType(ctx context.Context, name string, type_ string) ApiHeadPersonsByNameImagesByTypeRequest

	// HeadPersonsByNameImagesByTypeExecute executes the request
	HeadPersonsByNameImagesByTypeExecute(r ApiHeadPersonsByNameImagesByTypeRequest) (*http.Response, error)

	/*
	HeadPersonsByNameImagesByTypeByIndex Method for HeadPersonsByNameImagesByTypeByIndex

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Item name
	@param type_ Image Type
	@param index Image Index
	@return ApiHeadPersonsByNameImagesByTypeByIndexRequest
	*/
	HeadPersonsByNameImagesByTypeByIndex(ctx context.Context, name string, type_ string, index int32) ApiHeadPersonsByNameImagesByTypeByIndexRequest

	// HeadPersonsByNameImagesByTypeByIndexExecute executes the request
	HeadPersonsByNameImagesByTypeByIndexExecute(r ApiHeadPersonsByNameImagesByTypeByIndexRequest) (*http.Response, error)

	/*
	HeadStudiosByNameImagesByType Method for HeadStudiosByNameImagesByType

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Item name
	@param type_ Image Type
	@return ApiHeadStudiosByNameImagesByTypeRequest
	*/
	HeadStudiosByNameImagesByType(ctx context.Context, name string, type_ string) ApiHeadStudiosByNameImagesByTypeRequest

	// HeadStudiosByNameImagesByTypeExecute executes the request
	HeadStudiosByNameImagesByTypeExecute(r ApiHeadStudiosByNameImagesByTypeRequest) (*http.Response, error)

	/*
	HeadStudiosByNameImagesByTypeByIndex Method for HeadStudiosByNameImagesByTypeByIndex

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Item name
	@param type_ Image Type
	@param index Image Index
	@return ApiHeadStudiosByNameImagesByTypeByIndexRequest
	*/
	HeadStudiosByNameImagesByTypeByIndex(ctx context.Context, name string, type_ string, index int32) ApiHeadStudiosByNameImagesByTypeByIndexRequest

	// HeadStudiosByNameImagesByTypeByIndexExecute executes the request
	HeadStudiosByNameImagesByTypeByIndexExecute(r ApiHeadStudiosByNameImagesByTypeByIndexRequest) (*http.Response, error)

	/*
	HeadUsersByIdImagesByType Method for HeadUsersByIdImagesByType

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id User Id
	@param type_ Image Type
	@return ApiHeadUsersByIdImagesByTypeRequest
	*/
	HeadUsersByIdImagesByType(ctx context.Context, id string, type_ string) ApiHeadUsersByIdImagesByTypeRequest

	// HeadUsersByIdImagesByTypeExecute executes the request
	HeadUsersByIdImagesByTypeExecute(r ApiHeadUsersByIdImagesByTypeRequest) (*http.Response, error)

	/*
	HeadUsersByIdImagesByTypeByIndex Method for HeadUsersByIdImagesByTypeByIndex

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id User Id
	@param type_ Image Type
	@param index Image Index
	@return ApiHeadUsersByIdImagesByTypeByIndexRequest
	*/
	HeadUsersByIdImagesByTypeByIndex(ctx context.Context, id string, type_ string, index int32) ApiHeadUsersByIdImagesByTypeByIndexRequest

	// HeadUsersByIdImagesByTypeByIndexExecute executes the request
	HeadUsersByIdImagesByTypeByIndexExecute(r ApiHeadUsersByIdImagesByTypeByIndexRequest) (*http.Response, error)

	/*
	PostItemsByIdImagesByType Method for PostItemsByIdImagesByType

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@param type_ Image Type
	@return ApiPostItemsByIdImagesByTypeRequest
	*/
	PostItemsByIdImagesByType(ctx context.Context, id string, type_ string) ApiPostItemsByIdImagesByTypeRequest

	// PostItemsByIdImagesByTypeExecute executes the request
	PostItemsByIdImagesByTypeExecute(r ApiPostItemsByIdImagesByTypeRequest) (*http.Response, error)

	/*
	PostItemsByIdImagesByTypeByIndex Method for PostItemsByIdImagesByTypeByIndex

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@param type_ Image Type
	@param index Image Index
	@return ApiPostItemsByIdImagesByTypeByIndexRequest
	*/
	PostItemsByIdImagesByTypeByIndex(ctx context.Context, id string, type_ string, index int32) ApiPostItemsByIdImagesByTypeByIndexRequest

	// PostItemsByIdImagesByTypeByIndexExecute executes the request
	PostItemsByIdImagesByTypeByIndexExecute(r ApiPostItemsByIdImagesByTypeByIndexRequest) (*http.Response, error)

	/*
	PostItemsByIdImagesByTypeByIndexIndex Updates the index for an item image

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@param type_ Image Type
	@param index Image Index
	@return ApiPostItemsByIdImagesByTypeByIndexIndexRequest
	*/
	PostItemsByIdImagesByTypeByIndexIndex(ctx context.Context, id string, type_ string, index int32) ApiPostItemsByIdImagesByTypeByIndexIndexRequest

	// PostItemsByIdImagesByTypeByIndexIndexExecute executes the request
	PostItemsByIdImagesByTypeByIndexIndexExecute(r ApiPostItemsByIdImagesByTypeByIndexIndexRequest) (*http.Response, error)

	/*
	PostUsersByIdImagesByType Method for PostUsersByIdImagesByType

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id User Id
	@param type_ Image Type
	@return ApiPostUsersByIdImagesByTypeRequest
	*/
	PostUsersByIdImagesByType(ctx context.Context, id string, type_ string) ApiPostUsersByIdImagesByTypeRequest

	// PostUsersByIdImagesByTypeExecute executes the request
	PostUsersByIdImagesByTypeExecute(r ApiPostUsersByIdImagesByTypeRequest) (*http.Response, error)

	/*
	PostUsersByIdImagesByTypeByIndex Method for PostUsersByIdImagesByTypeByIndex

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id User Id
	@param type_ Image Type
	@param index Image Index
	@return ApiPostUsersByIdImagesByTypeByIndexRequest
	*/
	PostUsersByIdImagesByTypeByIndex(ctx context.Context, id string, type_ string, index int32) ApiPostUsersByIdImagesByTypeByIndexRequest

	// PostUsersByIdImagesByTypeByIndexExecute executes the request
	PostUsersByIdImagesByTypeByIndexExecute(r ApiPostUsersByIdImagesByTypeByIndexRequest) (*http.Response, error)
}

// ImageServiceAPIService ImageServiceAPI service
type ImageServiceAPIService service

type ApiDeleteItemsByIdImagesByTypeRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	id string
	type_ string
	index *int32
}

// Image Index
func (r ApiDeleteItemsByIdImagesByTypeRequest) Index(index int32) ApiDeleteItemsByIdImagesByTypeRequest {
	r.index = &index
	return r
}

func (r ApiDeleteItemsByIdImagesByTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteItemsByIdImagesByTypeExecute(r)
}

/*
DeleteItemsByIdImagesByType Method for DeleteItemsByIdImagesByType

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param type_ Image Type
 @return ApiDeleteItemsByIdImagesByTypeRequest
*/
func (a *ImageServiceAPIService) DeleteItemsByIdImagesByType(ctx context.Context, id string, type_ string) ApiDeleteItemsByIdImagesByTypeRequest {
	return ApiDeleteItemsByIdImagesByTypeRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		type_: type_,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) DeleteItemsByIdImagesByTypeExecute(r ApiDeleteItemsByIdImagesByTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.DeleteItemsByIdImagesByType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/Images/{Type}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.index != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Index", r.index, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteItemsByIdImagesByTypeByIndexRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	id string
	type_ string
	index int32
}

func (r ApiDeleteItemsByIdImagesByTypeByIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteItemsByIdImagesByTypeByIndexExecute(r)
}

/*
DeleteItemsByIdImagesByTypeByIndex Method for DeleteItemsByIdImagesByTypeByIndex

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param type_ Image Type
 @param index Image Index
 @return ApiDeleteItemsByIdImagesByTypeByIndexRequest
*/
func (a *ImageServiceAPIService) DeleteItemsByIdImagesByTypeByIndex(ctx context.Context, id string, type_ string, index int32) ApiDeleteItemsByIdImagesByTypeByIndexRequest {
	return ApiDeleteItemsByIdImagesByTypeByIndexRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		type_: type_,
		index: index,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) DeleteItemsByIdImagesByTypeByIndexExecute(r ApiDeleteItemsByIdImagesByTypeByIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.DeleteItemsByIdImagesByTypeByIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/Images/{Type}/{Index}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteUsersByIdImagesByTypeRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	id string
	type_ string
	index *int32
}

// Image Index
func (r ApiDeleteUsersByIdImagesByTypeRequest) Index(index int32) ApiDeleteUsersByIdImagesByTypeRequest {
	r.index = &index
	return r
}

func (r ApiDeleteUsersByIdImagesByTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteUsersByIdImagesByTypeExecute(r)
}

/*
DeleteUsersByIdImagesByType Method for DeleteUsersByIdImagesByType

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id User Id
 @param type_ Image Type
 @return ApiDeleteUsersByIdImagesByTypeRequest
*/
func (a *ImageServiceAPIService) DeleteUsersByIdImagesByType(ctx context.Context, id string, type_ string) ApiDeleteUsersByIdImagesByTypeRequest {
	return ApiDeleteUsersByIdImagesByTypeRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		type_: type_,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) DeleteUsersByIdImagesByTypeExecute(r ApiDeleteUsersByIdImagesByTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.DeleteUsersByIdImagesByType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{Id}/Images/{Type}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.index != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Index", r.index, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteUsersByIdImagesByTypeByIndexRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	id string
	type_ string
	index int32
}

func (r ApiDeleteUsersByIdImagesByTypeByIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteUsersByIdImagesByTypeByIndexExecute(r)
}

/*
DeleteUsersByIdImagesByTypeByIndex Method for DeleteUsersByIdImagesByTypeByIndex

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id User Id
 @param type_ Image Type
 @param index Image Index
 @return ApiDeleteUsersByIdImagesByTypeByIndexRequest
*/
func (a *ImageServiceAPIService) DeleteUsersByIdImagesByTypeByIndex(ctx context.Context, id string, type_ string, index int32) ApiDeleteUsersByIdImagesByTypeByIndexRequest {
	return ApiDeleteUsersByIdImagesByTypeByIndexRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		type_: type_,
		index: index,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) DeleteUsersByIdImagesByTypeByIndexExecute(r ApiDeleteUsersByIdImagesByTypeByIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.DeleteUsersByIdImagesByTypeByIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{Id}/Images/{Type}/{Index}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetArtistsByNameImagesByTypeRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	name string
	type_ string
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
	index *int32
}

// The maximum image width to return.
func (r ApiGetArtistsByNameImagesByTypeRequest) MaxWidth(maxWidth int32) ApiGetArtistsByNameImagesByTypeRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiGetArtistsByNameImagesByTypeRequest) MaxHeight(maxHeight int32) ApiGetArtistsByNameImagesByTypeRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiGetArtistsByNameImagesByTypeRequest) Width(width int32) ApiGetArtistsByNameImagesByTypeRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiGetArtistsByNameImagesByTypeRequest) Height(height int32) ApiGetArtistsByNameImagesByTypeRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiGetArtistsByNameImagesByTypeRequest) Quality(quality int32) ApiGetArtistsByNameImagesByTypeRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiGetArtistsByNameImagesByTypeRequest) Tag(tag string) ApiGetArtistsByNameImagesByTypeRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiGetArtistsByNameImagesByTypeRequest) CropWhitespace(cropWhitespace bool) ApiGetArtistsByNameImagesByTypeRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiGetArtistsByNameImagesByTypeRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiGetArtistsByNameImagesByTypeRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiGetArtistsByNameImagesByTypeRequest) Format(format string) ApiGetArtistsByNameImagesByTypeRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiGetArtistsByNameImagesByTypeRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiGetArtistsByNameImagesByTypeRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiGetArtistsByNameImagesByTypeRequest) PercentPlayed(percentPlayed float64) ApiGetArtistsByNameImagesByTypeRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiGetArtistsByNameImagesByTypeRequest) UnplayedCount(unplayedCount int32) ApiGetArtistsByNameImagesByTypeRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiGetArtistsByNameImagesByTypeRequest) BackgroundColor(backgroundColor string) ApiGetArtistsByNameImagesByTypeRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiGetArtistsByNameImagesByTypeRequest) ForegroundLayer(foregroundLayer string) ApiGetArtistsByNameImagesByTypeRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

// Image Index
func (r ApiGetArtistsByNameImagesByTypeRequest) Index(index int32) ApiGetArtistsByNameImagesByTypeRequest {
	r.index = &index
	return r
}

func (r ApiGetArtistsByNameImagesByTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetArtistsByNameImagesByTypeExecute(r)
}

/*
GetArtistsByNameImagesByType Method for GetArtistsByNameImagesByType

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Item name
 @param type_ Image Type
 @return ApiGetArtistsByNameImagesByTypeRequest
*/
func (a *ImageServiceAPIService) GetArtistsByNameImagesByType(ctx context.Context, name string, type_ string) ApiGetArtistsByNameImagesByTypeRequest {
	return ApiGetArtistsByNameImagesByTypeRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		type_: type_,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) GetArtistsByNameImagesByTypeExecute(r ApiGetArtistsByNameImagesByTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.GetArtistsByNameImagesByType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Artists/{Name}/Images/{Type}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	if r.index != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Index", r.index, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetArtistsByNameImagesByTypeByIndexRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	name string
	type_ string
	index int32
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
}

// The maximum image width to return.
func (r ApiGetArtistsByNameImagesByTypeByIndexRequest) MaxWidth(maxWidth int32) ApiGetArtistsByNameImagesByTypeByIndexRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiGetArtistsByNameImagesByTypeByIndexRequest) MaxHeight(maxHeight int32) ApiGetArtistsByNameImagesByTypeByIndexRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiGetArtistsByNameImagesByTypeByIndexRequest) Width(width int32) ApiGetArtistsByNameImagesByTypeByIndexRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiGetArtistsByNameImagesByTypeByIndexRequest) Height(height int32) ApiGetArtistsByNameImagesByTypeByIndexRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiGetArtistsByNameImagesByTypeByIndexRequest) Quality(quality int32) ApiGetArtistsByNameImagesByTypeByIndexRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiGetArtistsByNameImagesByTypeByIndexRequest) Tag(tag string) ApiGetArtistsByNameImagesByTypeByIndexRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiGetArtistsByNameImagesByTypeByIndexRequest) CropWhitespace(cropWhitespace bool) ApiGetArtistsByNameImagesByTypeByIndexRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiGetArtistsByNameImagesByTypeByIndexRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiGetArtistsByNameImagesByTypeByIndexRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiGetArtistsByNameImagesByTypeByIndexRequest) Format(format string) ApiGetArtistsByNameImagesByTypeByIndexRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiGetArtistsByNameImagesByTypeByIndexRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiGetArtistsByNameImagesByTypeByIndexRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiGetArtistsByNameImagesByTypeByIndexRequest) PercentPlayed(percentPlayed float64) ApiGetArtistsByNameImagesByTypeByIndexRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiGetArtistsByNameImagesByTypeByIndexRequest) UnplayedCount(unplayedCount int32) ApiGetArtistsByNameImagesByTypeByIndexRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiGetArtistsByNameImagesByTypeByIndexRequest) BackgroundColor(backgroundColor string) ApiGetArtistsByNameImagesByTypeByIndexRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiGetArtistsByNameImagesByTypeByIndexRequest) ForegroundLayer(foregroundLayer string) ApiGetArtistsByNameImagesByTypeByIndexRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

func (r ApiGetArtistsByNameImagesByTypeByIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetArtistsByNameImagesByTypeByIndexExecute(r)
}

/*
GetArtistsByNameImagesByTypeByIndex Method for GetArtistsByNameImagesByTypeByIndex

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Item name
 @param type_ Image Type
 @param index Image Index
 @return ApiGetArtistsByNameImagesByTypeByIndexRequest
*/
func (a *ImageServiceAPIService) GetArtistsByNameImagesByTypeByIndex(ctx context.Context, name string, type_ string, index int32) ApiGetArtistsByNameImagesByTypeByIndexRequest {
	return ApiGetArtistsByNameImagesByTypeByIndexRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		type_: type_,
		index: index,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) GetArtistsByNameImagesByTypeByIndexExecute(r ApiGetArtistsByNameImagesByTypeByIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.GetArtistsByNameImagesByTypeByIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Artists/{Name}/Images/{Type}/{Index}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetGamegenresByNameImagesByTypeRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	name string
	type_ string
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
	index *int32
}

// The maximum image width to return.
func (r ApiGetGamegenresByNameImagesByTypeRequest) MaxWidth(maxWidth int32) ApiGetGamegenresByNameImagesByTypeRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiGetGamegenresByNameImagesByTypeRequest) MaxHeight(maxHeight int32) ApiGetGamegenresByNameImagesByTypeRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiGetGamegenresByNameImagesByTypeRequest) Width(width int32) ApiGetGamegenresByNameImagesByTypeRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiGetGamegenresByNameImagesByTypeRequest) Height(height int32) ApiGetGamegenresByNameImagesByTypeRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiGetGamegenresByNameImagesByTypeRequest) Quality(quality int32) ApiGetGamegenresByNameImagesByTypeRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiGetGamegenresByNameImagesByTypeRequest) Tag(tag string) ApiGetGamegenresByNameImagesByTypeRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiGetGamegenresByNameImagesByTypeRequest) CropWhitespace(cropWhitespace bool) ApiGetGamegenresByNameImagesByTypeRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiGetGamegenresByNameImagesByTypeRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiGetGamegenresByNameImagesByTypeRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiGetGamegenresByNameImagesByTypeRequest) Format(format string) ApiGetGamegenresByNameImagesByTypeRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiGetGamegenresByNameImagesByTypeRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiGetGamegenresByNameImagesByTypeRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiGetGamegenresByNameImagesByTypeRequest) PercentPlayed(percentPlayed float64) ApiGetGamegenresByNameImagesByTypeRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiGetGamegenresByNameImagesByTypeRequest) UnplayedCount(unplayedCount int32) ApiGetGamegenresByNameImagesByTypeRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiGetGamegenresByNameImagesByTypeRequest) BackgroundColor(backgroundColor string) ApiGetGamegenresByNameImagesByTypeRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiGetGamegenresByNameImagesByTypeRequest) ForegroundLayer(foregroundLayer string) ApiGetGamegenresByNameImagesByTypeRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

// Image Index
func (r ApiGetGamegenresByNameImagesByTypeRequest) Index(index int32) ApiGetGamegenresByNameImagesByTypeRequest {
	r.index = &index
	return r
}

func (r ApiGetGamegenresByNameImagesByTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetGamegenresByNameImagesByTypeExecute(r)
}

/*
GetGamegenresByNameImagesByType Method for GetGamegenresByNameImagesByType

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Item name
 @param type_ Image Type
 @return ApiGetGamegenresByNameImagesByTypeRequest
*/
func (a *ImageServiceAPIService) GetGamegenresByNameImagesByType(ctx context.Context, name string, type_ string) ApiGetGamegenresByNameImagesByTypeRequest {
	return ApiGetGamegenresByNameImagesByTypeRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		type_: type_,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) GetGamegenresByNameImagesByTypeExecute(r ApiGetGamegenresByNameImagesByTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.GetGamegenresByNameImagesByType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/GameGenres/{Name}/Images/{Type}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	if r.index != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Index", r.index, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetGamegenresByNameImagesByTypeByIndexRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	name string
	type_ string
	index int32
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
}

// The maximum image width to return.
func (r ApiGetGamegenresByNameImagesByTypeByIndexRequest) MaxWidth(maxWidth int32) ApiGetGamegenresByNameImagesByTypeByIndexRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiGetGamegenresByNameImagesByTypeByIndexRequest) MaxHeight(maxHeight int32) ApiGetGamegenresByNameImagesByTypeByIndexRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiGetGamegenresByNameImagesByTypeByIndexRequest) Width(width int32) ApiGetGamegenresByNameImagesByTypeByIndexRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiGetGamegenresByNameImagesByTypeByIndexRequest) Height(height int32) ApiGetGamegenresByNameImagesByTypeByIndexRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiGetGamegenresByNameImagesByTypeByIndexRequest) Quality(quality int32) ApiGetGamegenresByNameImagesByTypeByIndexRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiGetGamegenresByNameImagesByTypeByIndexRequest) Tag(tag string) ApiGetGamegenresByNameImagesByTypeByIndexRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiGetGamegenresByNameImagesByTypeByIndexRequest) CropWhitespace(cropWhitespace bool) ApiGetGamegenresByNameImagesByTypeByIndexRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiGetGamegenresByNameImagesByTypeByIndexRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiGetGamegenresByNameImagesByTypeByIndexRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiGetGamegenresByNameImagesByTypeByIndexRequest) Format(format string) ApiGetGamegenresByNameImagesByTypeByIndexRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiGetGamegenresByNameImagesByTypeByIndexRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiGetGamegenresByNameImagesByTypeByIndexRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiGetGamegenresByNameImagesByTypeByIndexRequest) PercentPlayed(percentPlayed float64) ApiGetGamegenresByNameImagesByTypeByIndexRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiGetGamegenresByNameImagesByTypeByIndexRequest) UnplayedCount(unplayedCount int32) ApiGetGamegenresByNameImagesByTypeByIndexRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiGetGamegenresByNameImagesByTypeByIndexRequest) BackgroundColor(backgroundColor string) ApiGetGamegenresByNameImagesByTypeByIndexRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiGetGamegenresByNameImagesByTypeByIndexRequest) ForegroundLayer(foregroundLayer string) ApiGetGamegenresByNameImagesByTypeByIndexRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

func (r ApiGetGamegenresByNameImagesByTypeByIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetGamegenresByNameImagesByTypeByIndexExecute(r)
}

/*
GetGamegenresByNameImagesByTypeByIndex Method for GetGamegenresByNameImagesByTypeByIndex

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Item name
 @param type_ Image Type
 @param index Image Index
 @return ApiGetGamegenresByNameImagesByTypeByIndexRequest
*/
func (a *ImageServiceAPIService) GetGamegenresByNameImagesByTypeByIndex(ctx context.Context, name string, type_ string, index int32) ApiGetGamegenresByNameImagesByTypeByIndexRequest {
	return ApiGetGamegenresByNameImagesByTypeByIndexRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		type_: type_,
		index: index,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) GetGamegenresByNameImagesByTypeByIndexExecute(r ApiGetGamegenresByNameImagesByTypeByIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.GetGamegenresByNameImagesByTypeByIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/GameGenres/{Name}/Images/{Type}/{Index}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetGenresByNameImagesByTypeRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	name string
	type_ string
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
	index *int32
}

// The maximum image width to return.
func (r ApiGetGenresByNameImagesByTypeRequest) MaxWidth(maxWidth int32) ApiGetGenresByNameImagesByTypeRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiGetGenresByNameImagesByTypeRequest) MaxHeight(maxHeight int32) ApiGetGenresByNameImagesByTypeRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiGetGenresByNameImagesByTypeRequest) Width(width int32) ApiGetGenresByNameImagesByTypeRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiGetGenresByNameImagesByTypeRequest) Height(height int32) ApiGetGenresByNameImagesByTypeRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiGetGenresByNameImagesByTypeRequest) Quality(quality int32) ApiGetGenresByNameImagesByTypeRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiGetGenresByNameImagesByTypeRequest) Tag(tag string) ApiGetGenresByNameImagesByTypeRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiGetGenresByNameImagesByTypeRequest) CropWhitespace(cropWhitespace bool) ApiGetGenresByNameImagesByTypeRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiGetGenresByNameImagesByTypeRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiGetGenresByNameImagesByTypeRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiGetGenresByNameImagesByTypeRequest) Format(format string) ApiGetGenresByNameImagesByTypeRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiGetGenresByNameImagesByTypeRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiGetGenresByNameImagesByTypeRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiGetGenresByNameImagesByTypeRequest) PercentPlayed(percentPlayed float64) ApiGetGenresByNameImagesByTypeRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiGetGenresByNameImagesByTypeRequest) UnplayedCount(unplayedCount int32) ApiGetGenresByNameImagesByTypeRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiGetGenresByNameImagesByTypeRequest) BackgroundColor(backgroundColor string) ApiGetGenresByNameImagesByTypeRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiGetGenresByNameImagesByTypeRequest) ForegroundLayer(foregroundLayer string) ApiGetGenresByNameImagesByTypeRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

// Image Index
func (r ApiGetGenresByNameImagesByTypeRequest) Index(index int32) ApiGetGenresByNameImagesByTypeRequest {
	r.index = &index
	return r
}

func (r ApiGetGenresByNameImagesByTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetGenresByNameImagesByTypeExecute(r)
}

/*
GetGenresByNameImagesByType Method for GetGenresByNameImagesByType

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Item name
 @param type_ Image Type
 @return ApiGetGenresByNameImagesByTypeRequest
*/
func (a *ImageServiceAPIService) GetGenresByNameImagesByType(ctx context.Context, name string, type_ string) ApiGetGenresByNameImagesByTypeRequest {
	return ApiGetGenresByNameImagesByTypeRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		type_: type_,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) GetGenresByNameImagesByTypeExecute(r ApiGetGenresByNameImagesByTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.GetGenresByNameImagesByType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Genres/{Name}/Images/{Type}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	if r.index != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Index", r.index, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetGenresByNameImagesByTypeByIndexRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	name string
	type_ string
	index int32
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
}

// The maximum image width to return.
func (r ApiGetGenresByNameImagesByTypeByIndexRequest) MaxWidth(maxWidth int32) ApiGetGenresByNameImagesByTypeByIndexRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiGetGenresByNameImagesByTypeByIndexRequest) MaxHeight(maxHeight int32) ApiGetGenresByNameImagesByTypeByIndexRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiGetGenresByNameImagesByTypeByIndexRequest) Width(width int32) ApiGetGenresByNameImagesByTypeByIndexRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiGetGenresByNameImagesByTypeByIndexRequest) Height(height int32) ApiGetGenresByNameImagesByTypeByIndexRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiGetGenresByNameImagesByTypeByIndexRequest) Quality(quality int32) ApiGetGenresByNameImagesByTypeByIndexRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiGetGenresByNameImagesByTypeByIndexRequest) Tag(tag string) ApiGetGenresByNameImagesByTypeByIndexRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiGetGenresByNameImagesByTypeByIndexRequest) CropWhitespace(cropWhitespace bool) ApiGetGenresByNameImagesByTypeByIndexRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiGetGenresByNameImagesByTypeByIndexRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiGetGenresByNameImagesByTypeByIndexRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiGetGenresByNameImagesByTypeByIndexRequest) Format(format string) ApiGetGenresByNameImagesByTypeByIndexRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiGetGenresByNameImagesByTypeByIndexRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiGetGenresByNameImagesByTypeByIndexRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiGetGenresByNameImagesByTypeByIndexRequest) PercentPlayed(percentPlayed float64) ApiGetGenresByNameImagesByTypeByIndexRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiGetGenresByNameImagesByTypeByIndexRequest) UnplayedCount(unplayedCount int32) ApiGetGenresByNameImagesByTypeByIndexRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiGetGenresByNameImagesByTypeByIndexRequest) BackgroundColor(backgroundColor string) ApiGetGenresByNameImagesByTypeByIndexRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiGetGenresByNameImagesByTypeByIndexRequest) ForegroundLayer(foregroundLayer string) ApiGetGenresByNameImagesByTypeByIndexRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

func (r ApiGetGenresByNameImagesByTypeByIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetGenresByNameImagesByTypeByIndexExecute(r)
}

/*
GetGenresByNameImagesByTypeByIndex Method for GetGenresByNameImagesByTypeByIndex

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Item name
 @param type_ Image Type
 @param index Image Index
 @return ApiGetGenresByNameImagesByTypeByIndexRequest
*/
func (a *ImageServiceAPIService) GetGenresByNameImagesByTypeByIndex(ctx context.Context, name string, type_ string, index int32) ApiGetGenresByNameImagesByTypeByIndexRequest {
	return ApiGetGenresByNameImagesByTypeByIndexRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		type_: type_,
		index: index,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) GetGenresByNameImagesByTypeByIndexExecute(r ApiGetGenresByNameImagesByTypeByIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.GetGenresByNameImagesByTypeByIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Genres/{Name}/Images/{Type}/{Index}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetItemsByIdImagesRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	id string
}

func (r ApiGetItemsByIdImagesRequest) Execute() ([]ImageInfo, *http.Response, error) {
	return r.ApiService.GetItemsByIdImagesExecute(r)
}

/*
GetItemsByIdImages Gets information about an item's images

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return ApiGetItemsByIdImagesRequest
*/
func (a *ImageServiceAPIService) GetItemsByIdImages(ctx context.Context, id string) ApiGetItemsByIdImagesRequest {
	return ApiGetItemsByIdImagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []ImageInfo
func (a *ImageServiceAPIService) GetItemsByIdImagesExecute(r ApiGetItemsByIdImagesRequest) ([]ImageInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ImageInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.GetItemsByIdImages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/Images"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetItemsByIdImagesByTypeRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	id string
	type_ string
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
	index *int32
}

// The maximum image width to return.
func (r ApiGetItemsByIdImagesByTypeRequest) MaxWidth(maxWidth int32) ApiGetItemsByIdImagesByTypeRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiGetItemsByIdImagesByTypeRequest) MaxHeight(maxHeight int32) ApiGetItemsByIdImagesByTypeRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiGetItemsByIdImagesByTypeRequest) Width(width int32) ApiGetItemsByIdImagesByTypeRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiGetItemsByIdImagesByTypeRequest) Height(height int32) ApiGetItemsByIdImagesByTypeRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiGetItemsByIdImagesByTypeRequest) Quality(quality int32) ApiGetItemsByIdImagesByTypeRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiGetItemsByIdImagesByTypeRequest) Tag(tag string) ApiGetItemsByIdImagesByTypeRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiGetItemsByIdImagesByTypeRequest) CropWhitespace(cropWhitespace bool) ApiGetItemsByIdImagesByTypeRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiGetItemsByIdImagesByTypeRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiGetItemsByIdImagesByTypeRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiGetItemsByIdImagesByTypeRequest) Format(format string) ApiGetItemsByIdImagesByTypeRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiGetItemsByIdImagesByTypeRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiGetItemsByIdImagesByTypeRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiGetItemsByIdImagesByTypeRequest) PercentPlayed(percentPlayed float64) ApiGetItemsByIdImagesByTypeRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiGetItemsByIdImagesByTypeRequest) UnplayedCount(unplayedCount int32) ApiGetItemsByIdImagesByTypeRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiGetItemsByIdImagesByTypeRequest) BackgroundColor(backgroundColor string) ApiGetItemsByIdImagesByTypeRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiGetItemsByIdImagesByTypeRequest) ForegroundLayer(foregroundLayer string) ApiGetItemsByIdImagesByTypeRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

// Image Index
func (r ApiGetItemsByIdImagesByTypeRequest) Index(index int32) ApiGetItemsByIdImagesByTypeRequest {
	r.index = &index
	return r
}

func (r ApiGetItemsByIdImagesByTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetItemsByIdImagesByTypeExecute(r)
}

/*
GetItemsByIdImagesByType Method for GetItemsByIdImagesByType

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param type_ Image Type
 @return ApiGetItemsByIdImagesByTypeRequest
*/
func (a *ImageServiceAPIService) GetItemsByIdImagesByType(ctx context.Context, id string, type_ string) ApiGetItemsByIdImagesByTypeRequest {
	return ApiGetItemsByIdImagesByTypeRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		type_: type_,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) GetItemsByIdImagesByTypeExecute(r ApiGetItemsByIdImagesByTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.GetItemsByIdImagesByType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/Images/{Type}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	if r.index != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Index", r.index, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetItemsByIdImagesByTypeByIndexRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	id string
	type_ string
	index int32
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
}

// The maximum image width to return.
func (r ApiGetItemsByIdImagesByTypeByIndexRequest) MaxWidth(maxWidth int32) ApiGetItemsByIdImagesByTypeByIndexRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiGetItemsByIdImagesByTypeByIndexRequest) MaxHeight(maxHeight int32) ApiGetItemsByIdImagesByTypeByIndexRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiGetItemsByIdImagesByTypeByIndexRequest) Width(width int32) ApiGetItemsByIdImagesByTypeByIndexRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiGetItemsByIdImagesByTypeByIndexRequest) Height(height int32) ApiGetItemsByIdImagesByTypeByIndexRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiGetItemsByIdImagesByTypeByIndexRequest) Quality(quality int32) ApiGetItemsByIdImagesByTypeByIndexRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiGetItemsByIdImagesByTypeByIndexRequest) Tag(tag string) ApiGetItemsByIdImagesByTypeByIndexRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiGetItemsByIdImagesByTypeByIndexRequest) CropWhitespace(cropWhitespace bool) ApiGetItemsByIdImagesByTypeByIndexRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiGetItemsByIdImagesByTypeByIndexRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiGetItemsByIdImagesByTypeByIndexRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiGetItemsByIdImagesByTypeByIndexRequest) Format(format string) ApiGetItemsByIdImagesByTypeByIndexRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiGetItemsByIdImagesByTypeByIndexRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiGetItemsByIdImagesByTypeByIndexRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiGetItemsByIdImagesByTypeByIndexRequest) PercentPlayed(percentPlayed float64) ApiGetItemsByIdImagesByTypeByIndexRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiGetItemsByIdImagesByTypeByIndexRequest) UnplayedCount(unplayedCount int32) ApiGetItemsByIdImagesByTypeByIndexRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiGetItemsByIdImagesByTypeByIndexRequest) BackgroundColor(backgroundColor string) ApiGetItemsByIdImagesByTypeByIndexRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiGetItemsByIdImagesByTypeByIndexRequest) ForegroundLayer(foregroundLayer string) ApiGetItemsByIdImagesByTypeByIndexRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

func (r ApiGetItemsByIdImagesByTypeByIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetItemsByIdImagesByTypeByIndexExecute(r)
}

/*
GetItemsByIdImagesByTypeByIndex Method for GetItemsByIdImagesByTypeByIndex

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param type_ Image Type
 @param index Image Index
 @return ApiGetItemsByIdImagesByTypeByIndexRequest
*/
func (a *ImageServiceAPIService) GetItemsByIdImagesByTypeByIndex(ctx context.Context, id string, type_ string, index int32) ApiGetItemsByIdImagesByTypeByIndexRequest {
	return ApiGetItemsByIdImagesByTypeByIndexRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		type_: type_,
		index: index,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) GetItemsByIdImagesByTypeByIndexExecute(r ApiGetItemsByIdImagesByTypeByIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.GetItemsByIdImagesByTypeByIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/Images/{Type}/{Index}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	id string
	maxWidth int32
	maxHeight int32
	tag string
	format string
	percentPlayed float64
	unplayedCount int32
	type_ string
	index int32
	width *int32
	height *int32
	quality *int32
	cropWhitespace *bool
	enableImageEnhancers *bool
	addPlayedIndicator *bool
	backgroundColor *string
	foregroundLayer *string
}

// The fixed image width to return.
func (r ApiGetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest) Width(width int32) ApiGetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiGetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest) Height(height int32) ApiGetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiGetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest) Quality(quality int32) ApiGetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest {
	r.quality = &quality
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiGetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest) CropWhitespace(cropWhitespace bool) ApiGetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiGetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiGetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Optional. Add a played indicator
func (r ApiGetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiGetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiGetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest) BackgroundColor(backgroundColor string) ApiGetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiGetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest) ForegroundLayer(foregroundLayer string) ApiGetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

func (r ApiGetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountExecute(r)
}

/*
GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount Method for GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param maxWidth The maximum image width to return.
 @param maxHeight The maximum image height to return.
 @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
 @param format Determines the output foramt of the image - original,gif,jpg,png
 @param percentPlayed Optional percent to render for the percent played overlay
 @param unplayedCount Optional unplayed count overlay to render
 @param type_ Image Type
 @param index Image Index
 @return ApiGetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest
*/
func (a *ImageServiceAPIService) GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount(ctx context.Context, id string, maxWidth int32, maxHeight int32, tag string, format string, percentPlayed float64, unplayedCount int32, type_ string, index int32) ApiGetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest {
	return ApiGetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		maxWidth: maxWidth,
		maxHeight: maxHeight,
		tag: tag,
		format: format,
		percentPlayed: percentPlayed,
		unplayedCount: unplayedCount,
		type_: type_,
		index: index,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountExecute(r ApiGetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/Images/{Type}/{Index}/{Tag}/{Format}/{MaxWidth}/{MaxHeight}/{PercentPlayed}/{UnplayedCount}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"MaxWidth"+"}", url.PathEscape(parameterValueToString(r.maxWidth, "maxWidth")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"MaxHeight"+"}", url.PathEscape(parameterValueToString(r.maxHeight, "maxHeight")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Tag"+"}", url.PathEscape(parameterValueToString(r.tag, "tag")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Format"+"}", url.PathEscape(parameterValueToString(r.format, "format")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"PercentPlayed"+"}", url.PathEscape(parameterValueToString(r.percentPlayed, "percentPlayed")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"UnplayedCount"+"}", url.PathEscape(parameterValueToString(r.unplayedCount, "unplayedCount")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMusicgenresByNameImagesByTypeRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	name string
	type_ string
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
	index *int32
}

// The maximum image width to return.
func (r ApiGetMusicgenresByNameImagesByTypeRequest) MaxWidth(maxWidth int32) ApiGetMusicgenresByNameImagesByTypeRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiGetMusicgenresByNameImagesByTypeRequest) MaxHeight(maxHeight int32) ApiGetMusicgenresByNameImagesByTypeRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiGetMusicgenresByNameImagesByTypeRequest) Width(width int32) ApiGetMusicgenresByNameImagesByTypeRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiGetMusicgenresByNameImagesByTypeRequest) Height(height int32) ApiGetMusicgenresByNameImagesByTypeRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiGetMusicgenresByNameImagesByTypeRequest) Quality(quality int32) ApiGetMusicgenresByNameImagesByTypeRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiGetMusicgenresByNameImagesByTypeRequest) Tag(tag string) ApiGetMusicgenresByNameImagesByTypeRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiGetMusicgenresByNameImagesByTypeRequest) CropWhitespace(cropWhitespace bool) ApiGetMusicgenresByNameImagesByTypeRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiGetMusicgenresByNameImagesByTypeRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiGetMusicgenresByNameImagesByTypeRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiGetMusicgenresByNameImagesByTypeRequest) Format(format string) ApiGetMusicgenresByNameImagesByTypeRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiGetMusicgenresByNameImagesByTypeRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiGetMusicgenresByNameImagesByTypeRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiGetMusicgenresByNameImagesByTypeRequest) PercentPlayed(percentPlayed float64) ApiGetMusicgenresByNameImagesByTypeRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiGetMusicgenresByNameImagesByTypeRequest) UnplayedCount(unplayedCount int32) ApiGetMusicgenresByNameImagesByTypeRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiGetMusicgenresByNameImagesByTypeRequest) BackgroundColor(backgroundColor string) ApiGetMusicgenresByNameImagesByTypeRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiGetMusicgenresByNameImagesByTypeRequest) ForegroundLayer(foregroundLayer string) ApiGetMusicgenresByNameImagesByTypeRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

// Image Index
func (r ApiGetMusicgenresByNameImagesByTypeRequest) Index(index int32) ApiGetMusicgenresByNameImagesByTypeRequest {
	r.index = &index
	return r
}

func (r ApiGetMusicgenresByNameImagesByTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetMusicgenresByNameImagesByTypeExecute(r)
}

/*
GetMusicgenresByNameImagesByType Method for GetMusicgenresByNameImagesByType

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Item name
 @param type_ Image Type
 @return ApiGetMusicgenresByNameImagesByTypeRequest
*/
func (a *ImageServiceAPIService) GetMusicgenresByNameImagesByType(ctx context.Context, name string, type_ string) ApiGetMusicgenresByNameImagesByTypeRequest {
	return ApiGetMusicgenresByNameImagesByTypeRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		type_: type_,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) GetMusicgenresByNameImagesByTypeExecute(r ApiGetMusicgenresByNameImagesByTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.GetMusicgenresByNameImagesByType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/MusicGenres/{Name}/Images/{Type}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	if r.index != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Index", r.index, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMusicgenresByNameImagesByTypeByIndexRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	name string
	type_ string
	index int32
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
}

// The maximum image width to return.
func (r ApiGetMusicgenresByNameImagesByTypeByIndexRequest) MaxWidth(maxWidth int32) ApiGetMusicgenresByNameImagesByTypeByIndexRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiGetMusicgenresByNameImagesByTypeByIndexRequest) MaxHeight(maxHeight int32) ApiGetMusicgenresByNameImagesByTypeByIndexRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiGetMusicgenresByNameImagesByTypeByIndexRequest) Width(width int32) ApiGetMusicgenresByNameImagesByTypeByIndexRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiGetMusicgenresByNameImagesByTypeByIndexRequest) Height(height int32) ApiGetMusicgenresByNameImagesByTypeByIndexRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiGetMusicgenresByNameImagesByTypeByIndexRequest) Quality(quality int32) ApiGetMusicgenresByNameImagesByTypeByIndexRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiGetMusicgenresByNameImagesByTypeByIndexRequest) Tag(tag string) ApiGetMusicgenresByNameImagesByTypeByIndexRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiGetMusicgenresByNameImagesByTypeByIndexRequest) CropWhitespace(cropWhitespace bool) ApiGetMusicgenresByNameImagesByTypeByIndexRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiGetMusicgenresByNameImagesByTypeByIndexRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiGetMusicgenresByNameImagesByTypeByIndexRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiGetMusicgenresByNameImagesByTypeByIndexRequest) Format(format string) ApiGetMusicgenresByNameImagesByTypeByIndexRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiGetMusicgenresByNameImagesByTypeByIndexRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiGetMusicgenresByNameImagesByTypeByIndexRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiGetMusicgenresByNameImagesByTypeByIndexRequest) PercentPlayed(percentPlayed float64) ApiGetMusicgenresByNameImagesByTypeByIndexRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiGetMusicgenresByNameImagesByTypeByIndexRequest) UnplayedCount(unplayedCount int32) ApiGetMusicgenresByNameImagesByTypeByIndexRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiGetMusicgenresByNameImagesByTypeByIndexRequest) BackgroundColor(backgroundColor string) ApiGetMusicgenresByNameImagesByTypeByIndexRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiGetMusicgenresByNameImagesByTypeByIndexRequest) ForegroundLayer(foregroundLayer string) ApiGetMusicgenresByNameImagesByTypeByIndexRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

func (r ApiGetMusicgenresByNameImagesByTypeByIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetMusicgenresByNameImagesByTypeByIndexExecute(r)
}

/*
GetMusicgenresByNameImagesByTypeByIndex Method for GetMusicgenresByNameImagesByTypeByIndex

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Item name
 @param type_ Image Type
 @param index Image Index
 @return ApiGetMusicgenresByNameImagesByTypeByIndexRequest
*/
func (a *ImageServiceAPIService) GetMusicgenresByNameImagesByTypeByIndex(ctx context.Context, name string, type_ string, index int32) ApiGetMusicgenresByNameImagesByTypeByIndexRequest {
	return ApiGetMusicgenresByNameImagesByTypeByIndexRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		type_: type_,
		index: index,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) GetMusicgenresByNameImagesByTypeByIndexExecute(r ApiGetMusicgenresByNameImagesByTypeByIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.GetMusicgenresByNameImagesByTypeByIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/MusicGenres/{Name}/Images/{Type}/{Index}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetPersonsByNameImagesByTypeRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	name string
	type_ string
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
	index *int32
}

// The maximum image width to return.
func (r ApiGetPersonsByNameImagesByTypeRequest) MaxWidth(maxWidth int32) ApiGetPersonsByNameImagesByTypeRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiGetPersonsByNameImagesByTypeRequest) MaxHeight(maxHeight int32) ApiGetPersonsByNameImagesByTypeRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiGetPersonsByNameImagesByTypeRequest) Width(width int32) ApiGetPersonsByNameImagesByTypeRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiGetPersonsByNameImagesByTypeRequest) Height(height int32) ApiGetPersonsByNameImagesByTypeRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiGetPersonsByNameImagesByTypeRequest) Quality(quality int32) ApiGetPersonsByNameImagesByTypeRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiGetPersonsByNameImagesByTypeRequest) Tag(tag string) ApiGetPersonsByNameImagesByTypeRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiGetPersonsByNameImagesByTypeRequest) CropWhitespace(cropWhitespace bool) ApiGetPersonsByNameImagesByTypeRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiGetPersonsByNameImagesByTypeRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiGetPersonsByNameImagesByTypeRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiGetPersonsByNameImagesByTypeRequest) Format(format string) ApiGetPersonsByNameImagesByTypeRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiGetPersonsByNameImagesByTypeRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiGetPersonsByNameImagesByTypeRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiGetPersonsByNameImagesByTypeRequest) PercentPlayed(percentPlayed float64) ApiGetPersonsByNameImagesByTypeRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiGetPersonsByNameImagesByTypeRequest) UnplayedCount(unplayedCount int32) ApiGetPersonsByNameImagesByTypeRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiGetPersonsByNameImagesByTypeRequest) BackgroundColor(backgroundColor string) ApiGetPersonsByNameImagesByTypeRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiGetPersonsByNameImagesByTypeRequest) ForegroundLayer(foregroundLayer string) ApiGetPersonsByNameImagesByTypeRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

// Image Index
func (r ApiGetPersonsByNameImagesByTypeRequest) Index(index int32) ApiGetPersonsByNameImagesByTypeRequest {
	r.index = &index
	return r
}

func (r ApiGetPersonsByNameImagesByTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetPersonsByNameImagesByTypeExecute(r)
}

/*
GetPersonsByNameImagesByType Method for GetPersonsByNameImagesByType

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Item name
 @param type_ Image Type
 @return ApiGetPersonsByNameImagesByTypeRequest
*/
func (a *ImageServiceAPIService) GetPersonsByNameImagesByType(ctx context.Context, name string, type_ string) ApiGetPersonsByNameImagesByTypeRequest {
	return ApiGetPersonsByNameImagesByTypeRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		type_: type_,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) GetPersonsByNameImagesByTypeExecute(r ApiGetPersonsByNameImagesByTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.GetPersonsByNameImagesByType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Persons/{Name}/Images/{Type}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	if r.index != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Index", r.index, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetPersonsByNameImagesByTypeByIndexRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	name string
	type_ string
	index int32
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
}

// The maximum image width to return.
func (r ApiGetPersonsByNameImagesByTypeByIndexRequest) MaxWidth(maxWidth int32) ApiGetPersonsByNameImagesByTypeByIndexRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiGetPersonsByNameImagesByTypeByIndexRequest) MaxHeight(maxHeight int32) ApiGetPersonsByNameImagesByTypeByIndexRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiGetPersonsByNameImagesByTypeByIndexRequest) Width(width int32) ApiGetPersonsByNameImagesByTypeByIndexRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiGetPersonsByNameImagesByTypeByIndexRequest) Height(height int32) ApiGetPersonsByNameImagesByTypeByIndexRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiGetPersonsByNameImagesByTypeByIndexRequest) Quality(quality int32) ApiGetPersonsByNameImagesByTypeByIndexRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiGetPersonsByNameImagesByTypeByIndexRequest) Tag(tag string) ApiGetPersonsByNameImagesByTypeByIndexRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiGetPersonsByNameImagesByTypeByIndexRequest) CropWhitespace(cropWhitespace bool) ApiGetPersonsByNameImagesByTypeByIndexRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiGetPersonsByNameImagesByTypeByIndexRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiGetPersonsByNameImagesByTypeByIndexRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiGetPersonsByNameImagesByTypeByIndexRequest) Format(format string) ApiGetPersonsByNameImagesByTypeByIndexRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiGetPersonsByNameImagesByTypeByIndexRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiGetPersonsByNameImagesByTypeByIndexRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiGetPersonsByNameImagesByTypeByIndexRequest) PercentPlayed(percentPlayed float64) ApiGetPersonsByNameImagesByTypeByIndexRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiGetPersonsByNameImagesByTypeByIndexRequest) UnplayedCount(unplayedCount int32) ApiGetPersonsByNameImagesByTypeByIndexRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiGetPersonsByNameImagesByTypeByIndexRequest) BackgroundColor(backgroundColor string) ApiGetPersonsByNameImagesByTypeByIndexRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiGetPersonsByNameImagesByTypeByIndexRequest) ForegroundLayer(foregroundLayer string) ApiGetPersonsByNameImagesByTypeByIndexRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

func (r ApiGetPersonsByNameImagesByTypeByIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetPersonsByNameImagesByTypeByIndexExecute(r)
}

/*
GetPersonsByNameImagesByTypeByIndex Method for GetPersonsByNameImagesByTypeByIndex

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Item name
 @param type_ Image Type
 @param index Image Index
 @return ApiGetPersonsByNameImagesByTypeByIndexRequest
*/
func (a *ImageServiceAPIService) GetPersonsByNameImagesByTypeByIndex(ctx context.Context, name string, type_ string, index int32) ApiGetPersonsByNameImagesByTypeByIndexRequest {
	return ApiGetPersonsByNameImagesByTypeByIndexRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		type_: type_,
		index: index,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) GetPersonsByNameImagesByTypeByIndexExecute(r ApiGetPersonsByNameImagesByTypeByIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.GetPersonsByNameImagesByTypeByIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Persons/{Name}/Images/{Type}/{Index}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetStudiosByNameImagesByTypeRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	name string
	type_ string
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
	index *int32
}

// The maximum image width to return.
func (r ApiGetStudiosByNameImagesByTypeRequest) MaxWidth(maxWidth int32) ApiGetStudiosByNameImagesByTypeRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiGetStudiosByNameImagesByTypeRequest) MaxHeight(maxHeight int32) ApiGetStudiosByNameImagesByTypeRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiGetStudiosByNameImagesByTypeRequest) Width(width int32) ApiGetStudiosByNameImagesByTypeRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiGetStudiosByNameImagesByTypeRequest) Height(height int32) ApiGetStudiosByNameImagesByTypeRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiGetStudiosByNameImagesByTypeRequest) Quality(quality int32) ApiGetStudiosByNameImagesByTypeRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiGetStudiosByNameImagesByTypeRequest) Tag(tag string) ApiGetStudiosByNameImagesByTypeRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiGetStudiosByNameImagesByTypeRequest) CropWhitespace(cropWhitespace bool) ApiGetStudiosByNameImagesByTypeRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiGetStudiosByNameImagesByTypeRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiGetStudiosByNameImagesByTypeRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiGetStudiosByNameImagesByTypeRequest) Format(format string) ApiGetStudiosByNameImagesByTypeRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiGetStudiosByNameImagesByTypeRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiGetStudiosByNameImagesByTypeRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiGetStudiosByNameImagesByTypeRequest) PercentPlayed(percentPlayed float64) ApiGetStudiosByNameImagesByTypeRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiGetStudiosByNameImagesByTypeRequest) UnplayedCount(unplayedCount int32) ApiGetStudiosByNameImagesByTypeRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiGetStudiosByNameImagesByTypeRequest) BackgroundColor(backgroundColor string) ApiGetStudiosByNameImagesByTypeRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiGetStudiosByNameImagesByTypeRequest) ForegroundLayer(foregroundLayer string) ApiGetStudiosByNameImagesByTypeRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

// Image Index
func (r ApiGetStudiosByNameImagesByTypeRequest) Index(index int32) ApiGetStudiosByNameImagesByTypeRequest {
	r.index = &index
	return r
}

func (r ApiGetStudiosByNameImagesByTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetStudiosByNameImagesByTypeExecute(r)
}

/*
GetStudiosByNameImagesByType Method for GetStudiosByNameImagesByType

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Item name
 @param type_ Image Type
 @return ApiGetStudiosByNameImagesByTypeRequest
*/
func (a *ImageServiceAPIService) GetStudiosByNameImagesByType(ctx context.Context, name string, type_ string) ApiGetStudiosByNameImagesByTypeRequest {
	return ApiGetStudiosByNameImagesByTypeRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		type_: type_,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) GetStudiosByNameImagesByTypeExecute(r ApiGetStudiosByNameImagesByTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.GetStudiosByNameImagesByType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Studios/{Name}/Images/{Type}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	if r.index != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Index", r.index, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetStudiosByNameImagesByTypeByIndexRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	name string
	type_ string
	index int32
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
}

// The maximum image width to return.
func (r ApiGetStudiosByNameImagesByTypeByIndexRequest) MaxWidth(maxWidth int32) ApiGetStudiosByNameImagesByTypeByIndexRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiGetStudiosByNameImagesByTypeByIndexRequest) MaxHeight(maxHeight int32) ApiGetStudiosByNameImagesByTypeByIndexRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiGetStudiosByNameImagesByTypeByIndexRequest) Width(width int32) ApiGetStudiosByNameImagesByTypeByIndexRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiGetStudiosByNameImagesByTypeByIndexRequest) Height(height int32) ApiGetStudiosByNameImagesByTypeByIndexRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiGetStudiosByNameImagesByTypeByIndexRequest) Quality(quality int32) ApiGetStudiosByNameImagesByTypeByIndexRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiGetStudiosByNameImagesByTypeByIndexRequest) Tag(tag string) ApiGetStudiosByNameImagesByTypeByIndexRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiGetStudiosByNameImagesByTypeByIndexRequest) CropWhitespace(cropWhitespace bool) ApiGetStudiosByNameImagesByTypeByIndexRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiGetStudiosByNameImagesByTypeByIndexRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiGetStudiosByNameImagesByTypeByIndexRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiGetStudiosByNameImagesByTypeByIndexRequest) Format(format string) ApiGetStudiosByNameImagesByTypeByIndexRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiGetStudiosByNameImagesByTypeByIndexRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiGetStudiosByNameImagesByTypeByIndexRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiGetStudiosByNameImagesByTypeByIndexRequest) PercentPlayed(percentPlayed float64) ApiGetStudiosByNameImagesByTypeByIndexRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiGetStudiosByNameImagesByTypeByIndexRequest) UnplayedCount(unplayedCount int32) ApiGetStudiosByNameImagesByTypeByIndexRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiGetStudiosByNameImagesByTypeByIndexRequest) BackgroundColor(backgroundColor string) ApiGetStudiosByNameImagesByTypeByIndexRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiGetStudiosByNameImagesByTypeByIndexRequest) ForegroundLayer(foregroundLayer string) ApiGetStudiosByNameImagesByTypeByIndexRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

func (r ApiGetStudiosByNameImagesByTypeByIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetStudiosByNameImagesByTypeByIndexExecute(r)
}

/*
GetStudiosByNameImagesByTypeByIndex Method for GetStudiosByNameImagesByTypeByIndex

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Item name
 @param type_ Image Type
 @param index Image Index
 @return ApiGetStudiosByNameImagesByTypeByIndexRequest
*/
func (a *ImageServiceAPIService) GetStudiosByNameImagesByTypeByIndex(ctx context.Context, name string, type_ string, index int32) ApiGetStudiosByNameImagesByTypeByIndexRequest {
	return ApiGetStudiosByNameImagesByTypeByIndexRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		type_: type_,
		index: index,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) GetStudiosByNameImagesByTypeByIndexExecute(r ApiGetStudiosByNameImagesByTypeByIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.GetStudiosByNameImagesByTypeByIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Studios/{Name}/Images/{Type}/{Index}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetUsersByIdImagesByTypeRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	id string
	type_ string
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
	index *int32
}

// The maximum image width to return.
func (r ApiGetUsersByIdImagesByTypeRequest) MaxWidth(maxWidth int32) ApiGetUsersByIdImagesByTypeRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiGetUsersByIdImagesByTypeRequest) MaxHeight(maxHeight int32) ApiGetUsersByIdImagesByTypeRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiGetUsersByIdImagesByTypeRequest) Width(width int32) ApiGetUsersByIdImagesByTypeRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiGetUsersByIdImagesByTypeRequest) Height(height int32) ApiGetUsersByIdImagesByTypeRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiGetUsersByIdImagesByTypeRequest) Quality(quality int32) ApiGetUsersByIdImagesByTypeRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiGetUsersByIdImagesByTypeRequest) Tag(tag string) ApiGetUsersByIdImagesByTypeRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiGetUsersByIdImagesByTypeRequest) CropWhitespace(cropWhitespace bool) ApiGetUsersByIdImagesByTypeRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiGetUsersByIdImagesByTypeRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiGetUsersByIdImagesByTypeRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiGetUsersByIdImagesByTypeRequest) Format(format string) ApiGetUsersByIdImagesByTypeRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiGetUsersByIdImagesByTypeRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiGetUsersByIdImagesByTypeRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiGetUsersByIdImagesByTypeRequest) PercentPlayed(percentPlayed float64) ApiGetUsersByIdImagesByTypeRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiGetUsersByIdImagesByTypeRequest) UnplayedCount(unplayedCount int32) ApiGetUsersByIdImagesByTypeRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiGetUsersByIdImagesByTypeRequest) BackgroundColor(backgroundColor string) ApiGetUsersByIdImagesByTypeRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiGetUsersByIdImagesByTypeRequest) ForegroundLayer(foregroundLayer string) ApiGetUsersByIdImagesByTypeRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

// Image Index
func (r ApiGetUsersByIdImagesByTypeRequest) Index(index int32) ApiGetUsersByIdImagesByTypeRequest {
	r.index = &index
	return r
}

func (r ApiGetUsersByIdImagesByTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetUsersByIdImagesByTypeExecute(r)
}

/*
GetUsersByIdImagesByType Method for GetUsersByIdImagesByType

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id User Id
 @param type_ Image Type
 @return ApiGetUsersByIdImagesByTypeRequest
*/
func (a *ImageServiceAPIService) GetUsersByIdImagesByType(ctx context.Context, id string, type_ string) ApiGetUsersByIdImagesByTypeRequest {
	return ApiGetUsersByIdImagesByTypeRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		type_: type_,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) GetUsersByIdImagesByTypeExecute(r ApiGetUsersByIdImagesByTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.GetUsersByIdImagesByType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{Id}/Images/{Type}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	if r.index != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Index", r.index, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetUsersByIdImagesByTypeByIndexRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	id string
	type_ string
	index int32
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
}

// The maximum image width to return.
func (r ApiGetUsersByIdImagesByTypeByIndexRequest) MaxWidth(maxWidth int32) ApiGetUsersByIdImagesByTypeByIndexRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiGetUsersByIdImagesByTypeByIndexRequest) MaxHeight(maxHeight int32) ApiGetUsersByIdImagesByTypeByIndexRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiGetUsersByIdImagesByTypeByIndexRequest) Width(width int32) ApiGetUsersByIdImagesByTypeByIndexRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiGetUsersByIdImagesByTypeByIndexRequest) Height(height int32) ApiGetUsersByIdImagesByTypeByIndexRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiGetUsersByIdImagesByTypeByIndexRequest) Quality(quality int32) ApiGetUsersByIdImagesByTypeByIndexRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiGetUsersByIdImagesByTypeByIndexRequest) Tag(tag string) ApiGetUsersByIdImagesByTypeByIndexRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiGetUsersByIdImagesByTypeByIndexRequest) CropWhitespace(cropWhitespace bool) ApiGetUsersByIdImagesByTypeByIndexRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiGetUsersByIdImagesByTypeByIndexRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiGetUsersByIdImagesByTypeByIndexRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiGetUsersByIdImagesByTypeByIndexRequest) Format(format string) ApiGetUsersByIdImagesByTypeByIndexRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiGetUsersByIdImagesByTypeByIndexRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiGetUsersByIdImagesByTypeByIndexRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiGetUsersByIdImagesByTypeByIndexRequest) PercentPlayed(percentPlayed float64) ApiGetUsersByIdImagesByTypeByIndexRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiGetUsersByIdImagesByTypeByIndexRequest) UnplayedCount(unplayedCount int32) ApiGetUsersByIdImagesByTypeByIndexRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiGetUsersByIdImagesByTypeByIndexRequest) BackgroundColor(backgroundColor string) ApiGetUsersByIdImagesByTypeByIndexRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiGetUsersByIdImagesByTypeByIndexRequest) ForegroundLayer(foregroundLayer string) ApiGetUsersByIdImagesByTypeByIndexRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

func (r ApiGetUsersByIdImagesByTypeByIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetUsersByIdImagesByTypeByIndexExecute(r)
}

/*
GetUsersByIdImagesByTypeByIndex Method for GetUsersByIdImagesByTypeByIndex

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id User Id
 @param type_ Image Type
 @param index Image Index
 @return ApiGetUsersByIdImagesByTypeByIndexRequest
*/
func (a *ImageServiceAPIService) GetUsersByIdImagesByTypeByIndex(ctx context.Context, id string, type_ string, index int32) ApiGetUsersByIdImagesByTypeByIndexRequest {
	return ApiGetUsersByIdImagesByTypeByIndexRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		type_: type_,
		index: index,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) GetUsersByIdImagesByTypeByIndexExecute(r ApiGetUsersByIdImagesByTypeByIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.GetUsersByIdImagesByTypeByIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{Id}/Images/{Type}/{Index}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHeadArtistsByNameImagesByTypeRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	name string
	type_ string
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
	index *int32
}

// The maximum image width to return.
func (r ApiHeadArtistsByNameImagesByTypeRequest) MaxWidth(maxWidth int32) ApiHeadArtistsByNameImagesByTypeRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiHeadArtistsByNameImagesByTypeRequest) MaxHeight(maxHeight int32) ApiHeadArtistsByNameImagesByTypeRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiHeadArtistsByNameImagesByTypeRequest) Width(width int32) ApiHeadArtistsByNameImagesByTypeRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiHeadArtistsByNameImagesByTypeRequest) Height(height int32) ApiHeadArtistsByNameImagesByTypeRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiHeadArtistsByNameImagesByTypeRequest) Quality(quality int32) ApiHeadArtistsByNameImagesByTypeRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiHeadArtistsByNameImagesByTypeRequest) Tag(tag string) ApiHeadArtistsByNameImagesByTypeRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiHeadArtistsByNameImagesByTypeRequest) CropWhitespace(cropWhitespace bool) ApiHeadArtistsByNameImagesByTypeRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiHeadArtistsByNameImagesByTypeRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiHeadArtistsByNameImagesByTypeRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiHeadArtistsByNameImagesByTypeRequest) Format(format string) ApiHeadArtistsByNameImagesByTypeRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiHeadArtistsByNameImagesByTypeRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiHeadArtistsByNameImagesByTypeRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiHeadArtistsByNameImagesByTypeRequest) PercentPlayed(percentPlayed float64) ApiHeadArtistsByNameImagesByTypeRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiHeadArtistsByNameImagesByTypeRequest) UnplayedCount(unplayedCount int32) ApiHeadArtistsByNameImagesByTypeRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiHeadArtistsByNameImagesByTypeRequest) BackgroundColor(backgroundColor string) ApiHeadArtistsByNameImagesByTypeRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiHeadArtistsByNameImagesByTypeRequest) ForegroundLayer(foregroundLayer string) ApiHeadArtistsByNameImagesByTypeRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

// Image Index
func (r ApiHeadArtistsByNameImagesByTypeRequest) Index(index int32) ApiHeadArtistsByNameImagesByTypeRequest {
	r.index = &index
	return r
}

func (r ApiHeadArtistsByNameImagesByTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadArtistsByNameImagesByTypeExecute(r)
}

/*
HeadArtistsByNameImagesByType Method for HeadArtistsByNameImagesByType

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Item name
 @param type_ Image Type
 @return ApiHeadArtistsByNameImagesByTypeRequest
*/
func (a *ImageServiceAPIService) HeadArtistsByNameImagesByType(ctx context.Context, name string, type_ string) ApiHeadArtistsByNameImagesByTypeRequest {
	return ApiHeadArtistsByNameImagesByTypeRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		type_: type_,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) HeadArtistsByNameImagesByTypeExecute(r ApiHeadArtistsByNameImagesByTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.HeadArtistsByNameImagesByType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Artists/{Name}/Images/{Type}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	if r.index != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Index", r.index, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHeadArtistsByNameImagesByTypeByIndexRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	name string
	type_ string
	index int32
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
}

// The maximum image width to return.
func (r ApiHeadArtistsByNameImagesByTypeByIndexRequest) MaxWidth(maxWidth int32) ApiHeadArtistsByNameImagesByTypeByIndexRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiHeadArtistsByNameImagesByTypeByIndexRequest) MaxHeight(maxHeight int32) ApiHeadArtistsByNameImagesByTypeByIndexRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiHeadArtistsByNameImagesByTypeByIndexRequest) Width(width int32) ApiHeadArtistsByNameImagesByTypeByIndexRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiHeadArtistsByNameImagesByTypeByIndexRequest) Height(height int32) ApiHeadArtistsByNameImagesByTypeByIndexRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiHeadArtistsByNameImagesByTypeByIndexRequest) Quality(quality int32) ApiHeadArtistsByNameImagesByTypeByIndexRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiHeadArtistsByNameImagesByTypeByIndexRequest) Tag(tag string) ApiHeadArtistsByNameImagesByTypeByIndexRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiHeadArtistsByNameImagesByTypeByIndexRequest) CropWhitespace(cropWhitespace bool) ApiHeadArtistsByNameImagesByTypeByIndexRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiHeadArtistsByNameImagesByTypeByIndexRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiHeadArtistsByNameImagesByTypeByIndexRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiHeadArtistsByNameImagesByTypeByIndexRequest) Format(format string) ApiHeadArtistsByNameImagesByTypeByIndexRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiHeadArtistsByNameImagesByTypeByIndexRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiHeadArtistsByNameImagesByTypeByIndexRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiHeadArtistsByNameImagesByTypeByIndexRequest) PercentPlayed(percentPlayed float64) ApiHeadArtistsByNameImagesByTypeByIndexRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiHeadArtistsByNameImagesByTypeByIndexRequest) UnplayedCount(unplayedCount int32) ApiHeadArtistsByNameImagesByTypeByIndexRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiHeadArtistsByNameImagesByTypeByIndexRequest) BackgroundColor(backgroundColor string) ApiHeadArtistsByNameImagesByTypeByIndexRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiHeadArtistsByNameImagesByTypeByIndexRequest) ForegroundLayer(foregroundLayer string) ApiHeadArtistsByNameImagesByTypeByIndexRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

func (r ApiHeadArtistsByNameImagesByTypeByIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadArtistsByNameImagesByTypeByIndexExecute(r)
}

/*
HeadArtistsByNameImagesByTypeByIndex Method for HeadArtistsByNameImagesByTypeByIndex

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Item name
 @param type_ Image Type
 @param index Image Index
 @return ApiHeadArtistsByNameImagesByTypeByIndexRequest
*/
func (a *ImageServiceAPIService) HeadArtistsByNameImagesByTypeByIndex(ctx context.Context, name string, type_ string, index int32) ApiHeadArtistsByNameImagesByTypeByIndexRequest {
	return ApiHeadArtistsByNameImagesByTypeByIndexRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		type_: type_,
		index: index,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) HeadArtistsByNameImagesByTypeByIndexExecute(r ApiHeadArtistsByNameImagesByTypeByIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.HeadArtistsByNameImagesByTypeByIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Artists/{Name}/Images/{Type}/{Index}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHeadGamegenresByNameImagesByTypeRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	name string
	type_ string
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
	index *int32
}

// The maximum image width to return.
func (r ApiHeadGamegenresByNameImagesByTypeRequest) MaxWidth(maxWidth int32) ApiHeadGamegenresByNameImagesByTypeRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiHeadGamegenresByNameImagesByTypeRequest) MaxHeight(maxHeight int32) ApiHeadGamegenresByNameImagesByTypeRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiHeadGamegenresByNameImagesByTypeRequest) Width(width int32) ApiHeadGamegenresByNameImagesByTypeRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiHeadGamegenresByNameImagesByTypeRequest) Height(height int32) ApiHeadGamegenresByNameImagesByTypeRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiHeadGamegenresByNameImagesByTypeRequest) Quality(quality int32) ApiHeadGamegenresByNameImagesByTypeRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiHeadGamegenresByNameImagesByTypeRequest) Tag(tag string) ApiHeadGamegenresByNameImagesByTypeRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiHeadGamegenresByNameImagesByTypeRequest) CropWhitespace(cropWhitespace bool) ApiHeadGamegenresByNameImagesByTypeRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiHeadGamegenresByNameImagesByTypeRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiHeadGamegenresByNameImagesByTypeRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiHeadGamegenresByNameImagesByTypeRequest) Format(format string) ApiHeadGamegenresByNameImagesByTypeRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiHeadGamegenresByNameImagesByTypeRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiHeadGamegenresByNameImagesByTypeRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiHeadGamegenresByNameImagesByTypeRequest) PercentPlayed(percentPlayed float64) ApiHeadGamegenresByNameImagesByTypeRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiHeadGamegenresByNameImagesByTypeRequest) UnplayedCount(unplayedCount int32) ApiHeadGamegenresByNameImagesByTypeRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiHeadGamegenresByNameImagesByTypeRequest) BackgroundColor(backgroundColor string) ApiHeadGamegenresByNameImagesByTypeRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiHeadGamegenresByNameImagesByTypeRequest) ForegroundLayer(foregroundLayer string) ApiHeadGamegenresByNameImagesByTypeRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

// Image Index
func (r ApiHeadGamegenresByNameImagesByTypeRequest) Index(index int32) ApiHeadGamegenresByNameImagesByTypeRequest {
	r.index = &index
	return r
}

func (r ApiHeadGamegenresByNameImagesByTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadGamegenresByNameImagesByTypeExecute(r)
}

/*
HeadGamegenresByNameImagesByType Method for HeadGamegenresByNameImagesByType

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Item name
 @param type_ Image Type
 @return ApiHeadGamegenresByNameImagesByTypeRequest
*/
func (a *ImageServiceAPIService) HeadGamegenresByNameImagesByType(ctx context.Context, name string, type_ string) ApiHeadGamegenresByNameImagesByTypeRequest {
	return ApiHeadGamegenresByNameImagesByTypeRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		type_: type_,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) HeadGamegenresByNameImagesByTypeExecute(r ApiHeadGamegenresByNameImagesByTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.HeadGamegenresByNameImagesByType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/GameGenres/{Name}/Images/{Type}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	if r.index != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Index", r.index, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHeadGamegenresByNameImagesByTypeByIndexRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	name string
	type_ string
	index int32
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
}

// The maximum image width to return.
func (r ApiHeadGamegenresByNameImagesByTypeByIndexRequest) MaxWidth(maxWidth int32) ApiHeadGamegenresByNameImagesByTypeByIndexRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiHeadGamegenresByNameImagesByTypeByIndexRequest) MaxHeight(maxHeight int32) ApiHeadGamegenresByNameImagesByTypeByIndexRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiHeadGamegenresByNameImagesByTypeByIndexRequest) Width(width int32) ApiHeadGamegenresByNameImagesByTypeByIndexRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiHeadGamegenresByNameImagesByTypeByIndexRequest) Height(height int32) ApiHeadGamegenresByNameImagesByTypeByIndexRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiHeadGamegenresByNameImagesByTypeByIndexRequest) Quality(quality int32) ApiHeadGamegenresByNameImagesByTypeByIndexRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiHeadGamegenresByNameImagesByTypeByIndexRequest) Tag(tag string) ApiHeadGamegenresByNameImagesByTypeByIndexRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiHeadGamegenresByNameImagesByTypeByIndexRequest) CropWhitespace(cropWhitespace bool) ApiHeadGamegenresByNameImagesByTypeByIndexRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiHeadGamegenresByNameImagesByTypeByIndexRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiHeadGamegenresByNameImagesByTypeByIndexRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiHeadGamegenresByNameImagesByTypeByIndexRequest) Format(format string) ApiHeadGamegenresByNameImagesByTypeByIndexRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiHeadGamegenresByNameImagesByTypeByIndexRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiHeadGamegenresByNameImagesByTypeByIndexRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiHeadGamegenresByNameImagesByTypeByIndexRequest) PercentPlayed(percentPlayed float64) ApiHeadGamegenresByNameImagesByTypeByIndexRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiHeadGamegenresByNameImagesByTypeByIndexRequest) UnplayedCount(unplayedCount int32) ApiHeadGamegenresByNameImagesByTypeByIndexRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiHeadGamegenresByNameImagesByTypeByIndexRequest) BackgroundColor(backgroundColor string) ApiHeadGamegenresByNameImagesByTypeByIndexRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiHeadGamegenresByNameImagesByTypeByIndexRequest) ForegroundLayer(foregroundLayer string) ApiHeadGamegenresByNameImagesByTypeByIndexRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

func (r ApiHeadGamegenresByNameImagesByTypeByIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadGamegenresByNameImagesByTypeByIndexExecute(r)
}

/*
HeadGamegenresByNameImagesByTypeByIndex Method for HeadGamegenresByNameImagesByTypeByIndex

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Item name
 @param type_ Image Type
 @param index Image Index
 @return ApiHeadGamegenresByNameImagesByTypeByIndexRequest
*/
func (a *ImageServiceAPIService) HeadGamegenresByNameImagesByTypeByIndex(ctx context.Context, name string, type_ string, index int32) ApiHeadGamegenresByNameImagesByTypeByIndexRequest {
	return ApiHeadGamegenresByNameImagesByTypeByIndexRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		type_: type_,
		index: index,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) HeadGamegenresByNameImagesByTypeByIndexExecute(r ApiHeadGamegenresByNameImagesByTypeByIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.HeadGamegenresByNameImagesByTypeByIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/GameGenres/{Name}/Images/{Type}/{Index}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHeadGenresByNameImagesByTypeRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	name string
	type_ string
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
	index *int32
}

// The maximum image width to return.
func (r ApiHeadGenresByNameImagesByTypeRequest) MaxWidth(maxWidth int32) ApiHeadGenresByNameImagesByTypeRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiHeadGenresByNameImagesByTypeRequest) MaxHeight(maxHeight int32) ApiHeadGenresByNameImagesByTypeRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiHeadGenresByNameImagesByTypeRequest) Width(width int32) ApiHeadGenresByNameImagesByTypeRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiHeadGenresByNameImagesByTypeRequest) Height(height int32) ApiHeadGenresByNameImagesByTypeRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiHeadGenresByNameImagesByTypeRequest) Quality(quality int32) ApiHeadGenresByNameImagesByTypeRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiHeadGenresByNameImagesByTypeRequest) Tag(tag string) ApiHeadGenresByNameImagesByTypeRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiHeadGenresByNameImagesByTypeRequest) CropWhitespace(cropWhitespace bool) ApiHeadGenresByNameImagesByTypeRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiHeadGenresByNameImagesByTypeRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiHeadGenresByNameImagesByTypeRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiHeadGenresByNameImagesByTypeRequest) Format(format string) ApiHeadGenresByNameImagesByTypeRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiHeadGenresByNameImagesByTypeRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiHeadGenresByNameImagesByTypeRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiHeadGenresByNameImagesByTypeRequest) PercentPlayed(percentPlayed float64) ApiHeadGenresByNameImagesByTypeRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiHeadGenresByNameImagesByTypeRequest) UnplayedCount(unplayedCount int32) ApiHeadGenresByNameImagesByTypeRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiHeadGenresByNameImagesByTypeRequest) BackgroundColor(backgroundColor string) ApiHeadGenresByNameImagesByTypeRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiHeadGenresByNameImagesByTypeRequest) ForegroundLayer(foregroundLayer string) ApiHeadGenresByNameImagesByTypeRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

// Image Index
func (r ApiHeadGenresByNameImagesByTypeRequest) Index(index int32) ApiHeadGenresByNameImagesByTypeRequest {
	r.index = &index
	return r
}

func (r ApiHeadGenresByNameImagesByTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadGenresByNameImagesByTypeExecute(r)
}

/*
HeadGenresByNameImagesByType Method for HeadGenresByNameImagesByType

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Item name
 @param type_ Image Type
 @return ApiHeadGenresByNameImagesByTypeRequest
*/
func (a *ImageServiceAPIService) HeadGenresByNameImagesByType(ctx context.Context, name string, type_ string) ApiHeadGenresByNameImagesByTypeRequest {
	return ApiHeadGenresByNameImagesByTypeRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		type_: type_,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) HeadGenresByNameImagesByTypeExecute(r ApiHeadGenresByNameImagesByTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.HeadGenresByNameImagesByType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Genres/{Name}/Images/{Type}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	if r.index != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Index", r.index, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHeadGenresByNameImagesByTypeByIndexRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	name string
	type_ string
	index int32
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
}

// The maximum image width to return.
func (r ApiHeadGenresByNameImagesByTypeByIndexRequest) MaxWidth(maxWidth int32) ApiHeadGenresByNameImagesByTypeByIndexRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiHeadGenresByNameImagesByTypeByIndexRequest) MaxHeight(maxHeight int32) ApiHeadGenresByNameImagesByTypeByIndexRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiHeadGenresByNameImagesByTypeByIndexRequest) Width(width int32) ApiHeadGenresByNameImagesByTypeByIndexRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiHeadGenresByNameImagesByTypeByIndexRequest) Height(height int32) ApiHeadGenresByNameImagesByTypeByIndexRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiHeadGenresByNameImagesByTypeByIndexRequest) Quality(quality int32) ApiHeadGenresByNameImagesByTypeByIndexRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiHeadGenresByNameImagesByTypeByIndexRequest) Tag(tag string) ApiHeadGenresByNameImagesByTypeByIndexRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiHeadGenresByNameImagesByTypeByIndexRequest) CropWhitespace(cropWhitespace bool) ApiHeadGenresByNameImagesByTypeByIndexRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiHeadGenresByNameImagesByTypeByIndexRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiHeadGenresByNameImagesByTypeByIndexRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiHeadGenresByNameImagesByTypeByIndexRequest) Format(format string) ApiHeadGenresByNameImagesByTypeByIndexRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiHeadGenresByNameImagesByTypeByIndexRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiHeadGenresByNameImagesByTypeByIndexRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiHeadGenresByNameImagesByTypeByIndexRequest) PercentPlayed(percentPlayed float64) ApiHeadGenresByNameImagesByTypeByIndexRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiHeadGenresByNameImagesByTypeByIndexRequest) UnplayedCount(unplayedCount int32) ApiHeadGenresByNameImagesByTypeByIndexRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiHeadGenresByNameImagesByTypeByIndexRequest) BackgroundColor(backgroundColor string) ApiHeadGenresByNameImagesByTypeByIndexRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiHeadGenresByNameImagesByTypeByIndexRequest) ForegroundLayer(foregroundLayer string) ApiHeadGenresByNameImagesByTypeByIndexRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

func (r ApiHeadGenresByNameImagesByTypeByIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadGenresByNameImagesByTypeByIndexExecute(r)
}

/*
HeadGenresByNameImagesByTypeByIndex Method for HeadGenresByNameImagesByTypeByIndex

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Item name
 @param type_ Image Type
 @param index Image Index
 @return ApiHeadGenresByNameImagesByTypeByIndexRequest
*/
func (a *ImageServiceAPIService) HeadGenresByNameImagesByTypeByIndex(ctx context.Context, name string, type_ string, index int32) ApiHeadGenresByNameImagesByTypeByIndexRequest {
	return ApiHeadGenresByNameImagesByTypeByIndexRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		type_: type_,
		index: index,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) HeadGenresByNameImagesByTypeByIndexExecute(r ApiHeadGenresByNameImagesByTypeByIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.HeadGenresByNameImagesByTypeByIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Genres/{Name}/Images/{Type}/{Index}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHeadItemsByIdImagesByTypeRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	id string
	type_ string
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
	index *int32
}

// The maximum image width to return.
func (r ApiHeadItemsByIdImagesByTypeRequest) MaxWidth(maxWidth int32) ApiHeadItemsByIdImagesByTypeRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiHeadItemsByIdImagesByTypeRequest) MaxHeight(maxHeight int32) ApiHeadItemsByIdImagesByTypeRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiHeadItemsByIdImagesByTypeRequest) Width(width int32) ApiHeadItemsByIdImagesByTypeRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiHeadItemsByIdImagesByTypeRequest) Height(height int32) ApiHeadItemsByIdImagesByTypeRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiHeadItemsByIdImagesByTypeRequest) Quality(quality int32) ApiHeadItemsByIdImagesByTypeRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiHeadItemsByIdImagesByTypeRequest) Tag(tag string) ApiHeadItemsByIdImagesByTypeRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiHeadItemsByIdImagesByTypeRequest) CropWhitespace(cropWhitespace bool) ApiHeadItemsByIdImagesByTypeRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiHeadItemsByIdImagesByTypeRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiHeadItemsByIdImagesByTypeRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiHeadItemsByIdImagesByTypeRequest) Format(format string) ApiHeadItemsByIdImagesByTypeRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiHeadItemsByIdImagesByTypeRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiHeadItemsByIdImagesByTypeRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiHeadItemsByIdImagesByTypeRequest) PercentPlayed(percentPlayed float64) ApiHeadItemsByIdImagesByTypeRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiHeadItemsByIdImagesByTypeRequest) UnplayedCount(unplayedCount int32) ApiHeadItemsByIdImagesByTypeRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiHeadItemsByIdImagesByTypeRequest) BackgroundColor(backgroundColor string) ApiHeadItemsByIdImagesByTypeRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiHeadItemsByIdImagesByTypeRequest) ForegroundLayer(foregroundLayer string) ApiHeadItemsByIdImagesByTypeRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

// Image Index
func (r ApiHeadItemsByIdImagesByTypeRequest) Index(index int32) ApiHeadItemsByIdImagesByTypeRequest {
	r.index = &index
	return r
}

func (r ApiHeadItemsByIdImagesByTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadItemsByIdImagesByTypeExecute(r)
}

/*
HeadItemsByIdImagesByType Method for HeadItemsByIdImagesByType

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param type_ Image Type
 @return ApiHeadItemsByIdImagesByTypeRequest
*/
func (a *ImageServiceAPIService) HeadItemsByIdImagesByType(ctx context.Context, id string, type_ string) ApiHeadItemsByIdImagesByTypeRequest {
	return ApiHeadItemsByIdImagesByTypeRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		type_: type_,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) HeadItemsByIdImagesByTypeExecute(r ApiHeadItemsByIdImagesByTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.HeadItemsByIdImagesByType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/Images/{Type}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	if r.index != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Index", r.index, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHeadItemsByIdImagesByTypeByIndexRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	id string
	type_ string
	index int32
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
}

// The maximum image width to return.
func (r ApiHeadItemsByIdImagesByTypeByIndexRequest) MaxWidth(maxWidth int32) ApiHeadItemsByIdImagesByTypeByIndexRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiHeadItemsByIdImagesByTypeByIndexRequest) MaxHeight(maxHeight int32) ApiHeadItemsByIdImagesByTypeByIndexRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiHeadItemsByIdImagesByTypeByIndexRequest) Width(width int32) ApiHeadItemsByIdImagesByTypeByIndexRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiHeadItemsByIdImagesByTypeByIndexRequest) Height(height int32) ApiHeadItemsByIdImagesByTypeByIndexRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiHeadItemsByIdImagesByTypeByIndexRequest) Quality(quality int32) ApiHeadItemsByIdImagesByTypeByIndexRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiHeadItemsByIdImagesByTypeByIndexRequest) Tag(tag string) ApiHeadItemsByIdImagesByTypeByIndexRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiHeadItemsByIdImagesByTypeByIndexRequest) CropWhitespace(cropWhitespace bool) ApiHeadItemsByIdImagesByTypeByIndexRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiHeadItemsByIdImagesByTypeByIndexRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiHeadItemsByIdImagesByTypeByIndexRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiHeadItemsByIdImagesByTypeByIndexRequest) Format(format string) ApiHeadItemsByIdImagesByTypeByIndexRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiHeadItemsByIdImagesByTypeByIndexRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiHeadItemsByIdImagesByTypeByIndexRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiHeadItemsByIdImagesByTypeByIndexRequest) PercentPlayed(percentPlayed float64) ApiHeadItemsByIdImagesByTypeByIndexRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiHeadItemsByIdImagesByTypeByIndexRequest) UnplayedCount(unplayedCount int32) ApiHeadItemsByIdImagesByTypeByIndexRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiHeadItemsByIdImagesByTypeByIndexRequest) BackgroundColor(backgroundColor string) ApiHeadItemsByIdImagesByTypeByIndexRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiHeadItemsByIdImagesByTypeByIndexRequest) ForegroundLayer(foregroundLayer string) ApiHeadItemsByIdImagesByTypeByIndexRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

func (r ApiHeadItemsByIdImagesByTypeByIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadItemsByIdImagesByTypeByIndexExecute(r)
}

/*
HeadItemsByIdImagesByTypeByIndex Method for HeadItemsByIdImagesByTypeByIndex

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param type_ Image Type
 @param index Image Index
 @return ApiHeadItemsByIdImagesByTypeByIndexRequest
*/
func (a *ImageServiceAPIService) HeadItemsByIdImagesByTypeByIndex(ctx context.Context, id string, type_ string, index int32) ApiHeadItemsByIdImagesByTypeByIndexRequest {
	return ApiHeadItemsByIdImagesByTypeByIndexRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		type_: type_,
		index: index,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) HeadItemsByIdImagesByTypeByIndexExecute(r ApiHeadItemsByIdImagesByTypeByIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.HeadItemsByIdImagesByTypeByIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/Images/{Type}/{Index}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	id string
	maxWidth int32
	maxHeight int32
	tag string
	format string
	percentPlayed float64
	unplayedCount int32
	type_ string
	index int32
	width *int32
	height *int32
	quality *int32
	cropWhitespace *bool
	enableImageEnhancers *bool
	addPlayedIndicator *bool
	backgroundColor *string
	foregroundLayer *string
}

// The fixed image width to return.
func (r ApiHeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest) Width(width int32) ApiHeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiHeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest) Height(height int32) ApiHeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiHeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest) Quality(quality int32) ApiHeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest {
	r.quality = &quality
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiHeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest) CropWhitespace(cropWhitespace bool) ApiHeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiHeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiHeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Optional. Add a played indicator
func (r ApiHeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiHeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiHeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest) BackgroundColor(backgroundColor string) ApiHeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiHeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest) ForegroundLayer(foregroundLayer string) ApiHeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

func (r ApiHeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountExecute(r)
}

/*
HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount Method for HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param maxWidth The maximum image width to return.
 @param maxHeight The maximum image height to return.
 @param tag Optional. Supply the cache tag from the item object to receive strong caching headers.
 @param format Determines the output foramt of the image - original,gif,jpg,png
 @param percentPlayed Optional percent to render for the percent played overlay
 @param unplayedCount Optional unplayed count overlay to render
 @param type_ Image Type
 @param index Image Index
 @return ApiHeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest
*/
func (a *ImageServiceAPIService) HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount(ctx context.Context, id string, maxWidth int32, maxHeight int32, tag string, format string, percentPlayed float64, unplayedCount int32, type_ string, index int32) ApiHeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest {
	return ApiHeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		maxWidth: maxWidth,
		maxHeight: maxHeight,
		tag: tag,
		format: format,
		percentPlayed: percentPlayed,
		unplayedCount: unplayedCount,
		type_: type_,
		index: index,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountExecute(r ApiHeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/Images/{Type}/{Index}/{Tag}/{Format}/{MaxWidth}/{MaxHeight}/{PercentPlayed}/{UnplayedCount}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"MaxWidth"+"}", url.PathEscape(parameterValueToString(r.maxWidth, "maxWidth")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"MaxHeight"+"}", url.PathEscape(parameterValueToString(r.maxHeight, "maxHeight")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Tag"+"}", url.PathEscape(parameterValueToString(r.tag, "tag")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Format"+"}", url.PathEscape(parameterValueToString(r.format, "format")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"PercentPlayed"+"}", url.PathEscape(parameterValueToString(r.percentPlayed, "percentPlayed")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"UnplayedCount"+"}", url.PathEscape(parameterValueToString(r.unplayedCount, "unplayedCount")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHeadMusicgenresByNameImagesByTypeRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	name string
	type_ string
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
	index *int32
}

// The maximum image width to return.
func (r ApiHeadMusicgenresByNameImagesByTypeRequest) MaxWidth(maxWidth int32) ApiHeadMusicgenresByNameImagesByTypeRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiHeadMusicgenresByNameImagesByTypeRequest) MaxHeight(maxHeight int32) ApiHeadMusicgenresByNameImagesByTypeRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiHeadMusicgenresByNameImagesByTypeRequest) Width(width int32) ApiHeadMusicgenresByNameImagesByTypeRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiHeadMusicgenresByNameImagesByTypeRequest) Height(height int32) ApiHeadMusicgenresByNameImagesByTypeRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiHeadMusicgenresByNameImagesByTypeRequest) Quality(quality int32) ApiHeadMusicgenresByNameImagesByTypeRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiHeadMusicgenresByNameImagesByTypeRequest) Tag(tag string) ApiHeadMusicgenresByNameImagesByTypeRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiHeadMusicgenresByNameImagesByTypeRequest) CropWhitespace(cropWhitespace bool) ApiHeadMusicgenresByNameImagesByTypeRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiHeadMusicgenresByNameImagesByTypeRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiHeadMusicgenresByNameImagesByTypeRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiHeadMusicgenresByNameImagesByTypeRequest) Format(format string) ApiHeadMusicgenresByNameImagesByTypeRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiHeadMusicgenresByNameImagesByTypeRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiHeadMusicgenresByNameImagesByTypeRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiHeadMusicgenresByNameImagesByTypeRequest) PercentPlayed(percentPlayed float64) ApiHeadMusicgenresByNameImagesByTypeRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiHeadMusicgenresByNameImagesByTypeRequest) UnplayedCount(unplayedCount int32) ApiHeadMusicgenresByNameImagesByTypeRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiHeadMusicgenresByNameImagesByTypeRequest) BackgroundColor(backgroundColor string) ApiHeadMusicgenresByNameImagesByTypeRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiHeadMusicgenresByNameImagesByTypeRequest) ForegroundLayer(foregroundLayer string) ApiHeadMusicgenresByNameImagesByTypeRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

// Image Index
func (r ApiHeadMusicgenresByNameImagesByTypeRequest) Index(index int32) ApiHeadMusicgenresByNameImagesByTypeRequest {
	r.index = &index
	return r
}

func (r ApiHeadMusicgenresByNameImagesByTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadMusicgenresByNameImagesByTypeExecute(r)
}

/*
HeadMusicgenresByNameImagesByType Method for HeadMusicgenresByNameImagesByType

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Item name
 @param type_ Image Type
 @return ApiHeadMusicgenresByNameImagesByTypeRequest
*/
func (a *ImageServiceAPIService) HeadMusicgenresByNameImagesByType(ctx context.Context, name string, type_ string) ApiHeadMusicgenresByNameImagesByTypeRequest {
	return ApiHeadMusicgenresByNameImagesByTypeRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		type_: type_,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) HeadMusicgenresByNameImagesByTypeExecute(r ApiHeadMusicgenresByNameImagesByTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.HeadMusicgenresByNameImagesByType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/MusicGenres/{Name}/Images/{Type}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	if r.index != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Index", r.index, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHeadMusicgenresByNameImagesByTypeByIndexRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	name string
	type_ string
	index int32
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
}

// The maximum image width to return.
func (r ApiHeadMusicgenresByNameImagesByTypeByIndexRequest) MaxWidth(maxWidth int32) ApiHeadMusicgenresByNameImagesByTypeByIndexRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiHeadMusicgenresByNameImagesByTypeByIndexRequest) MaxHeight(maxHeight int32) ApiHeadMusicgenresByNameImagesByTypeByIndexRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiHeadMusicgenresByNameImagesByTypeByIndexRequest) Width(width int32) ApiHeadMusicgenresByNameImagesByTypeByIndexRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiHeadMusicgenresByNameImagesByTypeByIndexRequest) Height(height int32) ApiHeadMusicgenresByNameImagesByTypeByIndexRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiHeadMusicgenresByNameImagesByTypeByIndexRequest) Quality(quality int32) ApiHeadMusicgenresByNameImagesByTypeByIndexRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiHeadMusicgenresByNameImagesByTypeByIndexRequest) Tag(tag string) ApiHeadMusicgenresByNameImagesByTypeByIndexRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiHeadMusicgenresByNameImagesByTypeByIndexRequest) CropWhitespace(cropWhitespace bool) ApiHeadMusicgenresByNameImagesByTypeByIndexRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiHeadMusicgenresByNameImagesByTypeByIndexRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiHeadMusicgenresByNameImagesByTypeByIndexRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiHeadMusicgenresByNameImagesByTypeByIndexRequest) Format(format string) ApiHeadMusicgenresByNameImagesByTypeByIndexRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiHeadMusicgenresByNameImagesByTypeByIndexRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiHeadMusicgenresByNameImagesByTypeByIndexRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiHeadMusicgenresByNameImagesByTypeByIndexRequest) PercentPlayed(percentPlayed float64) ApiHeadMusicgenresByNameImagesByTypeByIndexRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiHeadMusicgenresByNameImagesByTypeByIndexRequest) UnplayedCount(unplayedCount int32) ApiHeadMusicgenresByNameImagesByTypeByIndexRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiHeadMusicgenresByNameImagesByTypeByIndexRequest) BackgroundColor(backgroundColor string) ApiHeadMusicgenresByNameImagesByTypeByIndexRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiHeadMusicgenresByNameImagesByTypeByIndexRequest) ForegroundLayer(foregroundLayer string) ApiHeadMusicgenresByNameImagesByTypeByIndexRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

func (r ApiHeadMusicgenresByNameImagesByTypeByIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadMusicgenresByNameImagesByTypeByIndexExecute(r)
}

/*
HeadMusicgenresByNameImagesByTypeByIndex Method for HeadMusicgenresByNameImagesByTypeByIndex

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Item name
 @param type_ Image Type
 @param index Image Index
 @return ApiHeadMusicgenresByNameImagesByTypeByIndexRequest
*/
func (a *ImageServiceAPIService) HeadMusicgenresByNameImagesByTypeByIndex(ctx context.Context, name string, type_ string, index int32) ApiHeadMusicgenresByNameImagesByTypeByIndexRequest {
	return ApiHeadMusicgenresByNameImagesByTypeByIndexRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		type_: type_,
		index: index,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) HeadMusicgenresByNameImagesByTypeByIndexExecute(r ApiHeadMusicgenresByNameImagesByTypeByIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.HeadMusicgenresByNameImagesByTypeByIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/MusicGenres/{Name}/Images/{Type}/{Index}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHeadPersonsByNameImagesByTypeRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	name string
	type_ string
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
	index *int32
}

// The maximum image width to return.
func (r ApiHeadPersonsByNameImagesByTypeRequest) MaxWidth(maxWidth int32) ApiHeadPersonsByNameImagesByTypeRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiHeadPersonsByNameImagesByTypeRequest) MaxHeight(maxHeight int32) ApiHeadPersonsByNameImagesByTypeRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiHeadPersonsByNameImagesByTypeRequest) Width(width int32) ApiHeadPersonsByNameImagesByTypeRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiHeadPersonsByNameImagesByTypeRequest) Height(height int32) ApiHeadPersonsByNameImagesByTypeRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiHeadPersonsByNameImagesByTypeRequest) Quality(quality int32) ApiHeadPersonsByNameImagesByTypeRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiHeadPersonsByNameImagesByTypeRequest) Tag(tag string) ApiHeadPersonsByNameImagesByTypeRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiHeadPersonsByNameImagesByTypeRequest) CropWhitespace(cropWhitespace bool) ApiHeadPersonsByNameImagesByTypeRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiHeadPersonsByNameImagesByTypeRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiHeadPersonsByNameImagesByTypeRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiHeadPersonsByNameImagesByTypeRequest) Format(format string) ApiHeadPersonsByNameImagesByTypeRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiHeadPersonsByNameImagesByTypeRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiHeadPersonsByNameImagesByTypeRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiHeadPersonsByNameImagesByTypeRequest) PercentPlayed(percentPlayed float64) ApiHeadPersonsByNameImagesByTypeRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiHeadPersonsByNameImagesByTypeRequest) UnplayedCount(unplayedCount int32) ApiHeadPersonsByNameImagesByTypeRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiHeadPersonsByNameImagesByTypeRequest) BackgroundColor(backgroundColor string) ApiHeadPersonsByNameImagesByTypeRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiHeadPersonsByNameImagesByTypeRequest) ForegroundLayer(foregroundLayer string) ApiHeadPersonsByNameImagesByTypeRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

// Image Index
func (r ApiHeadPersonsByNameImagesByTypeRequest) Index(index int32) ApiHeadPersonsByNameImagesByTypeRequest {
	r.index = &index
	return r
}

func (r ApiHeadPersonsByNameImagesByTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadPersonsByNameImagesByTypeExecute(r)
}

/*
HeadPersonsByNameImagesByType Method for HeadPersonsByNameImagesByType

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Item name
 @param type_ Image Type
 @return ApiHeadPersonsByNameImagesByTypeRequest
*/
func (a *ImageServiceAPIService) HeadPersonsByNameImagesByType(ctx context.Context, name string, type_ string) ApiHeadPersonsByNameImagesByTypeRequest {
	return ApiHeadPersonsByNameImagesByTypeRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		type_: type_,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) HeadPersonsByNameImagesByTypeExecute(r ApiHeadPersonsByNameImagesByTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.HeadPersonsByNameImagesByType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Persons/{Name}/Images/{Type}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	if r.index != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Index", r.index, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHeadPersonsByNameImagesByTypeByIndexRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	name string
	type_ string
	index int32
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
}

// The maximum image width to return.
func (r ApiHeadPersonsByNameImagesByTypeByIndexRequest) MaxWidth(maxWidth int32) ApiHeadPersonsByNameImagesByTypeByIndexRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiHeadPersonsByNameImagesByTypeByIndexRequest) MaxHeight(maxHeight int32) ApiHeadPersonsByNameImagesByTypeByIndexRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiHeadPersonsByNameImagesByTypeByIndexRequest) Width(width int32) ApiHeadPersonsByNameImagesByTypeByIndexRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiHeadPersonsByNameImagesByTypeByIndexRequest) Height(height int32) ApiHeadPersonsByNameImagesByTypeByIndexRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiHeadPersonsByNameImagesByTypeByIndexRequest) Quality(quality int32) ApiHeadPersonsByNameImagesByTypeByIndexRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiHeadPersonsByNameImagesByTypeByIndexRequest) Tag(tag string) ApiHeadPersonsByNameImagesByTypeByIndexRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiHeadPersonsByNameImagesByTypeByIndexRequest) CropWhitespace(cropWhitespace bool) ApiHeadPersonsByNameImagesByTypeByIndexRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiHeadPersonsByNameImagesByTypeByIndexRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiHeadPersonsByNameImagesByTypeByIndexRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiHeadPersonsByNameImagesByTypeByIndexRequest) Format(format string) ApiHeadPersonsByNameImagesByTypeByIndexRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiHeadPersonsByNameImagesByTypeByIndexRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiHeadPersonsByNameImagesByTypeByIndexRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiHeadPersonsByNameImagesByTypeByIndexRequest) PercentPlayed(percentPlayed float64) ApiHeadPersonsByNameImagesByTypeByIndexRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiHeadPersonsByNameImagesByTypeByIndexRequest) UnplayedCount(unplayedCount int32) ApiHeadPersonsByNameImagesByTypeByIndexRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiHeadPersonsByNameImagesByTypeByIndexRequest) BackgroundColor(backgroundColor string) ApiHeadPersonsByNameImagesByTypeByIndexRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiHeadPersonsByNameImagesByTypeByIndexRequest) ForegroundLayer(foregroundLayer string) ApiHeadPersonsByNameImagesByTypeByIndexRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

func (r ApiHeadPersonsByNameImagesByTypeByIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadPersonsByNameImagesByTypeByIndexExecute(r)
}

/*
HeadPersonsByNameImagesByTypeByIndex Method for HeadPersonsByNameImagesByTypeByIndex

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Item name
 @param type_ Image Type
 @param index Image Index
 @return ApiHeadPersonsByNameImagesByTypeByIndexRequest
*/
func (a *ImageServiceAPIService) HeadPersonsByNameImagesByTypeByIndex(ctx context.Context, name string, type_ string, index int32) ApiHeadPersonsByNameImagesByTypeByIndexRequest {
	return ApiHeadPersonsByNameImagesByTypeByIndexRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		type_: type_,
		index: index,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) HeadPersonsByNameImagesByTypeByIndexExecute(r ApiHeadPersonsByNameImagesByTypeByIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.HeadPersonsByNameImagesByTypeByIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Persons/{Name}/Images/{Type}/{Index}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHeadStudiosByNameImagesByTypeRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	name string
	type_ string
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
	index *int32
}

// The maximum image width to return.
func (r ApiHeadStudiosByNameImagesByTypeRequest) MaxWidth(maxWidth int32) ApiHeadStudiosByNameImagesByTypeRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiHeadStudiosByNameImagesByTypeRequest) MaxHeight(maxHeight int32) ApiHeadStudiosByNameImagesByTypeRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiHeadStudiosByNameImagesByTypeRequest) Width(width int32) ApiHeadStudiosByNameImagesByTypeRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiHeadStudiosByNameImagesByTypeRequest) Height(height int32) ApiHeadStudiosByNameImagesByTypeRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiHeadStudiosByNameImagesByTypeRequest) Quality(quality int32) ApiHeadStudiosByNameImagesByTypeRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiHeadStudiosByNameImagesByTypeRequest) Tag(tag string) ApiHeadStudiosByNameImagesByTypeRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiHeadStudiosByNameImagesByTypeRequest) CropWhitespace(cropWhitespace bool) ApiHeadStudiosByNameImagesByTypeRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiHeadStudiosByNameImagesByTypeRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiHeadStudiosByNameImagesByTypeRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiHeadStudiosByNameImagesByTypeRequest) Format(format string) ApiHeadStudiosByNameImagesByTypeRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiHeadStudiosByNameImagesByTypeRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiHeadStudiosByNameImagesByTypeRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiHeadStudiosByNameImagesByTypeRequest) PercentPlayed(percentPlayed float64) ApiHeadStudiosByNameImagesByTypeRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiHeadStudiosByNameImagesByTypeRequest) UnplayedCount(unplayedCount int32) ApiHeadStudiosByNameImagesByTypeRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiHeadStudiosByNameImagesByTypeRequest) BackgroundColor(backgroundColor string) ApiHeadStudiosByNameImagesByTypeRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiHeadStudiosByNameImagesByTypeRequest) ForegroundLayer(foregroundLayer string) ApiHeadStudiosByNameImagesByTypeRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

// Image Index
func (r ApiHeadStudiosByNameImagesByTypeRequest) Index(index int32) ApiHeadStudiosByNameImagesByTypeRequest {
	r.index = &index
	return r
}

func (r ApiHeadStudiosByNameImagesByTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadStudiosByNameImagesByTypeExecute(r)
}

/*
HeadStudiosByNameImagesByType Method for HeadStudiosByNameImagesByType

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Item name
 @param type_ Image Type
 @return ApiHeadStudiosByNameImagesByTypeRequest
*/
func (a *ImageServiceAPIService) HeadStudiosByNameImagesByType(ctx context.Context, name string, type_ string) ApiHeadStudiosByNameImagesByTypeRequest {
	return ApiHeadStudiosByNameImagesByTypeRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		type_: type_,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) HeadStudiosByNameImagesByTypeExecute(r ApiHeadStudiosByNameImagesByTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.HeadStudiosByNameImagesByType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Studios/{Name}/Images/{Type}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	if r.index != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Index", r.index, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHeadStudiosByNameImagesByTypeByIndexRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	name string
	type_ string
	index int32
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
}

// The maximum image width to return.
func (r ApiHeadStudiosByNameImagesByTypeByIndexRequest) MaxWidth(maxWidth int32) ApiHeadStudiosByNameImagesByTypeByIndexRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiHeadStudiosByNameImagesByTypeByIndexRequest) MaxHeight(maxHeight int32) ApiHeadStudiosByNameImagesByTypeByIndexRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiHeadStudiosByNameImagesByTypeByIndexRequest) Width(width int32) ApiHeadStudiosByNameImagesByTypeByIndexRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiHeadStudiosByNameImagesByTypeByIndexRequest) Height(height int32) ApiHeadStudiosByNameImagesByTypeByIndexRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiHeadStudiosByNameImagesByTypeByIndexRequest) Quality(quality int32) ApiHeadStudiosByNameImagesByTypeByIndexRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiHeadStudiosByNameImagesByTypeByIndexRequest) Tag(tag string) ApiHeadStudiosByNameImagesByTypeByIndexRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiHeadStudiosByNameImagesByTypeByIndexRequest) CropWhitespace(cropWhitespace bool) ApiHeadStudiosByNameImagesByTypeByIndexRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiHeadStudiosByNameImagesByTypeByIndexRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiHeadStudiosByNameImagesByTypeByIndexRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiHeadStudiosByNameImagesByTypeByIndexRequest) Format(format string) ApiHeadStudiosByNameImagesByTypeByIndexRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiHeadStudiosByNameImagesByTypeByIndexRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiHeadStudiosByNameImagesByTypeByIndexRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiHeadStudiosByNameImagesByTypeByIndexRequest) PercentPlayed(percentPlayed float64) ApiHeadStudiosByNameImagesByTypeByIndexRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiHeadStudiosByNameImagesByTypeByIndexRequest) UnplayedCount(unplayedCount int32) ApiHeadStudiosByNameImagesByTypeByIndexRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiHeadStudiosByNameImagesByTypeByIndexRequest) BackgroundColor(backgroundColor string) ApiHeadStudiosByNameImagesByTypeByIndexRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiHeadStudiosByNameImagesByTypeByIndexRequest) ForegroundLayer(foregroundLayer string) ApiHeadStudiosByNameImagesByTypeByIndexRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

func (r ApiHeadStudiosByNameImagesByTypeByIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadStudiosByNameImagesByTypeByIndexExecute(r)
}

/*
HeadStudiosByNameImagesByTypeByIndex Method for HeadStudiosByNameImagesByTypeByIndex

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Item name
 @param type_ Image Type
 @param index Image Index
 @return ApiHeadStudiosByNameImagesByTypeByIndexRequest
*/
func (a *ImageServiceAPIService) HeadStudiosByNameImagesByTypeByIndex(ctx context.Context, name string, type_ string, index int32) ApiHeadStudiosByNameImagesByTypeByIndexRequest {
	return ApiHeadStudiosByNameImagesByTypeByIndexRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		type_: type_,
		index: index,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) HeadStudiosByNameImagesByTypeByIndexExecute(r ApiHeadStudiosByNameImagesByTypeByIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.HeadStudiosByNameImagesByTypeByIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Studios/{Name}/Images/{Type}/{Index}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHeadUsersByIdImagesByTypeRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	id string
	type_ string
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
	index *int32
}

// The maximum image width to return.
func (r ApiHeadUsersByIdImagesByTypeRequest) MaxWidth(maxWidth int32) ApiHeadUsersByIdImagesByTypeRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiHeadUsersByIdImagesByTypeRequest) MaxHeight(maxHeight int32) ApiHeadUsersByIdImagesByTypeRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiHeadUsersByIdImagesByTypeRequest) Width(width int32) ApiHeadUsersByIdImagesByTypeRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiHeadUsersByIdImagesByTypeRequest) Height(height int32) ApiHeadUsersByIdImagesByTypeRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiHeadUsersByIdImagesByTypeRequest) Quality(quality int32) ApiHeadUsersByIdImagesByTypeRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiHeadUsersByIdImagesByTypeRequest) Tag(tag string) ApiHeadUsersByIdImagesByTypeRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiHeadUsersByIdImagesByTypeRequest) CropWhitespace(cropWhitespace bool) ApiHeadUsersByIdImagesByTypeRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiHeadUsersByIdImagesByTypeRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiHeadUsersByIdImagesByTypeRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiHeadUsersByIdImagesByTypeRequest) Format(format string) ApiHeadUsersByIdImagesByTypeRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiHeadUsersByIdImagesByTypeRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiHeadUsersByIdImagesByTypeRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiHeadUsersByIdImagesByTypeRequest) PercentPlayed(percentPlayed float64) ApiHeadUsersByIdImagesByTypeRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiHeadUsersByIdImagesByTypeRequest) UnplayedCount(unplayedCount int32) ApiHeadUsersByIdImagesByTypeRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiHeadUsersByIdImagesByTypeRequest) BackgroundColor(backgroundColor string) ApiHeadUsersByIdImagesByTypeRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiHeadUsersByIdImagesByTypeRequest) ForegroundLayer(foregroundLayer string) ApiHeadUsersByIdImagesByTypeRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

// Image Index
func (r ApiHeadUsersByIdImagesByTypeRequest) Index(index int32) ApiHeadUsersByIdImagesByTypeRequest {
	r.index = &index
	return r
}

func (r ApiHeadUsersByIdImagesByTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadUsersByIdImagesByTypeExecute(r)
}

/*
HeadUsersByIdImagesByType Method for HeadUsersByIdImagesByType

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id User Id
 @param type_ Image Type
 @return ApiHeadUsersByIdImagesByTypeRequest
*/
func (a *ImageServiceAPIService) HeadUsersByIdImagesByType(ctx context.Context, id string, type_ string) ApiHeadUsersByIdImagesByTypeRequest {
	return ApiHeadUsersByIdImagesByTypeRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		type_: type_,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) HeadUsersByIdImagesByTypeExecute(r ApiHeadUsersByIdImagesByTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.HeadUsersByIdImagesByType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{Id}/Images/{Type}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	if r.index != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Index", r.index, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHeadUsersByIdImagesByTypeByIndexRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	id string
	type_ string
	index int32
	maxWidth *int32
	maxHeight *int32
	width *int32
	height *int32
	quality *int32
	tag *string
	cropWhitespace *bool
	enableImageEnhancers *bool
	format *string
	addPlayedIndicator *bool
	percentPlayed *float64
	unplayedCount *int32
	backgroundColor *string
	foregroundLayer *string
}

// The maximum image width to return.
func (r ApiHeadUsersByIdImagesByTypeByIndexRequest) MaxWidth(maxWidth int32) ApiHeadUsersByIdImagesByTypeByIndexRequest {
	r.maxWidth = &maxWidth
	return r
}

// The maximum image height to return.
func (r ApiHeadUsersByIdImagesByTypeByIndexRequest) MaxHeight(maxHeight int32) ApiHeadUsersByIdImagesByTypeByIndexRequest {
	r.maxHeight = &maxHeight
	return r
}

// The fixed image width to return.
func (r ApiHeadUsersByIdImagesByTypeByIndexRequest) Width(width int32) ApiHeadUsersByIdImagesByTypeByIndexRequest {
	r.width = &width
	return r
}

// The fixed image height to return.
func (r ApiHeadUsersByIdImagesByTypeByIndexRequest) Height(height int32) ApiHeadUsersByIdImagesByTypeByIndexRequest {
	r.height = &height
	return r
}

// Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
func (r ApiHeadUsersByIdImagesByTypeByIndexRequest) Quality(quality int32) ApiHeadUsersByIdImagesByTypeByIndexRequest {
	r.quality = &quality
	return r
}

// Optional. Supply the cache tag from the item object to receive strong caching headers.
func (r ApiHeadUsersByIdImagesByTypeByIndexRequest) Tag(tag string) ApiHeadUsersByIdImagesByTypeByIndexRequest {
	r.tag = &tag
	return r
}

// Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
func (r ApiHeadUsersByIdImagesByTypeByIndexRequest) CropWhitespace(cropWhitespace bool) ApiHeadUsersByIdImagesByTypeByIndexRequest {
	r.cropWhitespace = &cropWhitespace
	return r
}

// Enable or disable image enhancers such as cover art.
func (r ApiHeadUsersByIdImagesByTypeByIndexRequest) EnableImageEnhancers(enableImageEnhancers bool) ApiHeadUsersByIdImagesByTypeByIndexRequest {
	r.enableImageEnhancers = &enableImageEnhancers
	return r
}

// Determines the output foramt of the image - original,gif,jpg,png
func (r ApiHeadUsersByIdImagesByTypeByIndexRequest) Format(format string) ApiHeadUsersByIdImagesByTypeByIndexRequest {
	r.format = &format
	return r
}

// Optional. Add a played indicator
func (r ApiHeadUsersByIdImagesByTypeByIndexRequest) AddPlayedIndicator(addPlayedIndicator bool) ApiHeadUsersByIdImagesByTypeByIndexRequest {
	r.addPlayedIndicator = &addPlayedIndicator
	return r
}

// Optional percent to render for the percent played overlay
func (r ApiHeadUsersByIdImagesByTypeByIndexRequest) PercentPlayed(percentPlayed float64) ApiHeadUsersByIdImagesByTypeByIndexRequest {
	r.percentPlayed = &percentPlayed
	return r
}

// Optional unplayed count overlay to render
func (r ApiHeadUsersByIdImagesByTypeByIndexRequest) UnplayedCount(unplayedCount int32) ApiHeadUsersByIdImagesByTypeByIndexRequest {
	r.unplayedCount = &unplayedCount
	return r
}

// Optional. Apply a background color for transparent images.
func (r ApiHeadUsersByIdImagesByTypeByIndexRequest) BackgroundColor(backgroundColor string) ApiHeadUsersByIdImagesByTypeByIndexRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// Optional. Apply a foreground layer on top of the image.
func (r ApiHeadUsersByIdImagesByTypeByIndexRequest) ForegroundLayer(foregroundLayer string) ApiHeadUsersByIdImagesByTypeByIndexRequest {
	r.foregroundLayer = &foregroundLayer
	return r
}

func (r ApiHeadUsersByIdImagesByTypeByIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadUsersByIdImagesByTypeByIndexExecute(r)
}

/*
HeadUsersByIdImagesByTypeByIndex Method for HeadUsersByIdImagesByTypeByIndex

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id User Id
 @param type_ Image Type
 @param index Image Index
 @return ApiHeadUsersByIdImagesByTypeByIndexRequest
*/
func (a *ImageServiceAPIService) HeadUsersByIdImagesByTypeByIndex(ctx context.Context, id string, type_ string, index int32) ApiHeadUsersByIdImagesByTypeByIndexRequest {
	return ApiHeadUsersByIdImagesByTypeByIndexRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		type_: type_,
		index: index,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) HeadUsersByIdImagesByTypeByIndexExecute(r ApiHeadUsersByIdImagesByTypeByIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.HeadUsersByIdImagesByTypeByIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{Id}/Images/{Type}/{Index}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.quality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Quality", r.quality, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tag", r.tag, "form", "")
	}
	if r.cropWhitespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CropWhitespace", r.cropWhitespace, "form", "")
	}
	if r.enableImageEnhancers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageEnhancers", r.enableImageEnhancers, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Format", r.format, "form", "")
	}
	if r.addPlayedIndicator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AddPlayedIndicator", r.addPlayedIndicator, "form", "")
	}
	if r.percentPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PercentPlayed", r.percentPlayed, "form", "")
	}
	if r.unplayedCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UnplayedCount", r.unplayedCount, "form", "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "BackgroundColor", r.backgroundColor, "form", "")
	}
	if r.foregroundLayer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForegroundLayer", r.foregroundLayer, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostItemsByIdImagesByTypeRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	id string
	type_ string
	body *os.File
	index *int32
}

// Binary stream
func (r ApiPostItemsByIdImagesByTypeRequest) Body(body *os.File) ApiPostItemsByIdImagesByTypeRequest {
	r.body = body
	return r
}

// Image Index
func (r ApiPostItemsByIdImagesByTypeRequest) Index(index int32) ApiPostItemsByIdImagesByTypeRequest {
	r.index = &index
	return r
}

func (r ApiPostItemsByIdImagesByTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostItemsByIdImagesByTypeExecute(r)
}

/*
PostItemsByIdImagesByType Method for PostItemsByIdImagesByType

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param type_ Image Type
 @return ApiPostItemsByIdImagesByTypeRequest
*/
func (a *ImageServiceAPIService) PostItemsByIdImagesByType(ctx context.Context, id string, type_ string) ApiPostItemsByIdImagesByTypeRequest {
	return ApiPostItemsByIdImagesByTypeRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		type_: type_,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) PostItemsByIdImagesByTypeExecute(r ApiPostItemsByIdImagesByTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.PostItemsByIdImagesByType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/Images/{Type}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	if r.index != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Index", r.index, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostItemsByIdImagesByTypeByIndexRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	id string
	type_ string
	index int32
	body *os.File
}

// Binary stream
func (r ApiPostItemsByIdImagesByTypeByIndexRequest) Body(body *os.File) ApiPostItemsByIdImagesByTypeByIndexRequest {
	r.body = body
	return r
}

func (r ApiPostItemsByIdImagesByTypeByIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostItemsByIdImagesByTypeByIndexExecute(r)
}

/*
PostItemsByIdImagesByTypeByIndex Method for PostItemsByIdImagesByTypeByIndex

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param type_ Image Type
 @param index Image Index
 @return ApiPostItemsByIdImagesByTypeByIndexRequest
*/
func (a *ImageServiceAPIService) PostItemsByIdImagesByTypeByIndex(ctx context.Context, id string, type_ string, index int32) ApiPostItemsByIdImagesByTypeByIndexRequest {
	return ApiPostItemsByIdImagesByTypeByIndexRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		type_: type_,
		index: index,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) PostItemsByIdImagesByTypeByIndexExecute(r ApiPostItemsByIdImagesByTypeByIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.PostItemsByIdImagesByTypeByIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/Images/{Type}/{Index}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostItemsByIdImagesByTypeByIndexIndexRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	id string
	type_ string
	index int32
	newIndex *int32
}

// The new image index
func (r ApiPostItemsByIdImagesByTypeByIndexIndexRequest) NewIndex(newIndex int32) ApiPostItemsByIdImagesByTypeByIndexIndexRequest {
	r.newIndex = &newIndex
	return r
}

func (r ApiPostItemsByIdImagesByTypeByIndexIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostItemsByIdImagesByTypeByIndexIndexExecute(r)
}

/*
PostItemsByIdImagesByTypeByIndexIndex Updates the index for an item image

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param type_ Image Type
 @param index Image Index
 @return ApiPostItemsByIdImagesByTypeByIndexIndexRequest
*/
func (a *ImageServiceAPIService) PostItemsByIdImagesByTypeByIndexIndex(ctx context.Context, id string, type_ string, index int32) ApiPostItemsByIdImagesByTypeByIndexIndexRequest {
	return ApiPostItemsByIdImagesByTypeByIndexIndexRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		type_: type_,
		index: index,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) PostItemsByIdImagesByTypeByIndexIndexExecute(r ApiPostItemsByIdImagesByTypeByIndexIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.PostItemsByIdImagesByTypeByIndexIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/Images/{Type}/{Index}/Index"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.newIndex == nil {
		return nil, reportError("newIndex is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "NewIndex", r.newIndex, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostUsersByIdImagesByTypeRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	id string
	type_ string
	body *os.File
	index *int32
}

// Binary stream
func (r ApiPostUsersByIdImagesByTypeRequest) Body(body *os.File) ApiPostUsersByIdImagesByTypeRequest {
	r.body = body
	return r
}

// Image Index
func (r ApiPostUsersByIdImagesByTypeRequest) Index(index int32) ApiPostUsersByIdImagesByTypeRequest {
	r.index = &index
	return r
}

func (r ApiPostUsersByIdImagesByTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostUsersByIdImagesByTypeExecute(r)
}

/*
PostUsersByIdImagesByType Method for PostUsersByIdImagesByType

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id User Id
 @param type_ Image Type
 @return ApiPostUsersByIdImagesByTypeRequest
*/
func (a *ImageServiceAPIService) PostUsersByIdImagesByType(ctx context.Context, id string, type_ string) ApiPostUsersByIdImagesByTypeRequest {
	return ApiPostUsersByIdImagesByTypeRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		type_: type_,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) PostUsersByIdImagesByTypeExecute(r ApiPostUsersByIdImagesByTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.PostUsersByIdImagesByType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{Id}/Images/{Type}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	if r.index != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Index", r.index, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostUsersByIdImagesByTypeByIndexRequest struct {
	ctx context.Context
	ApiService ImageServiceAPI
	id string
	type_ string
	index int32
	body *os.File
}

// Binary stream
func (r ApiPostUsersByIdImagesByTypeByIndexRequest) Body(body *os.File) ApiPostUsersByIdImagesByTypeByIndexRequest {
	r.body = body
	return r
}

func (r ApiPostUsersByIdImagesByTypeByIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostUsersByIdImagesByTypeByIndexExecute(r)
}

/*
PostUsersByIdImagesByTypeByIndex Method for PostUsersByIdImagesByTypeByIndex

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id User Id
 @param type_ Image Type
 @param index Image Index
 @return ApiPostUsersByIdImagesByTypeByIndexRequest
*/
func (a *ImageServiceAPIService) PostUsersByIdImagesByTypeByIndex(ctx context.Context, id string, type_ string, index int32) ApiPostUsersByIdImagesByTypeByIndexRequest {
	return ApiPostUsersByIdImagesByTypeByIndexRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		type_: type_,
		index: index,
	}
}

// Execute executes the request
func (a *ImageServiceAPIService) PostUsersByIdImagesByTypeByIndexExecute(r ApiPostUsersByIdImagesByTypeByIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageServiceAPIService.PostUsersByIdImagesByTypeByIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{Id}/Images/{Type}/{Index}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
