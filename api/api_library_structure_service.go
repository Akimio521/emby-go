/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type LibraryStructureServiceAPI interface {

	/*
	DeleteLibraryVirtualfolders Method for DeleteLibraryVirtualfolders

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteLibraryVirtualfoldersRequest
	*/
	DeleteLibraryVirtualfolders(ctx context.Context) ApiDeleteLibraryVirtualfoldersRequest

	// DeleteLibraryVirtualfoldersExecute executes the request
	DeleteLibraryVirtualfoldersExecute(r ApiDeleteLibraryVirtualfoldersRequest) (*http.Response, error)

	/*
	DeleteLibraryVirtualfoldersPaths Method for DeleteLibraryVirtualfoldersPaths

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteLibraryVirtualfoldersPathsRequest
	*/
	DeleteLibraryVirtualfoldersPaths(ctx context.Context) ApiDeleteLibraryVirtualfoldersPathsRequest

	// DeleteLibraryVirtualfoldersPathsExecute executes the request
	DeleteLibraryVirtualfoldersPathsExecute(r ApiDeleteLibraryVirtualfoldersPathsRequest) (*http.Response, error)

	/*
	GetLibraryVirtualfolders Method for GetLibraryVirtualfolders

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetLibraryVirtualfoldersRequest
	*/
	GetLibraryVirtualfolders(ctx context.Context) ApiGetLibraryVirtualfoldersRequest

	// GetLibraryVirtualfoldersExecute executes the request
	//  @return []VirtualFolderInfo
	GetLibraryVirtualfoldersExecute(r ApiGetLibraryVirtualfoldersRequest) ([]VirtualFolderInfo, *http.Response, error)

	/*
	PostLibraryVirtualfolders Method for PostLibraryVirtualfolders

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostLibraryVirtualfoldersRequest
	*/
	PostLibraryVirtualfolders(ctx context.Context) ApiPostLibraryVirtualfoldersRequest

	// PostLibraryVirtualfoldersExecute executes the request
	PostLibraryVirtualfoldersExecute(r ApiPostLibraryVirtualfoldersRequest) (*http.Response, error)

	/*
	PostLibraryVirtualfoldersLibraryoptions Method for PostLibraryVirtualfoldersLibraryoptions

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostLibraryVirtualfoldersLibraryoptionsRequest
	*/
	PostLibraryVirtualfoldersLibraryoptions(ctx context.Context) ApiPostLibraryVirtualfoldersLibraryoptionsRequest

	// PostLibraryVirtualfoldersLibraryoptionsExecute executes the request
	PostLibraryVirtualfoldersLibraryoptionsExecute(r ApiPostLibraryVirtualfoldersLibraryoptionsRequest) (*http.Response, error)

	/*
	PostLibraryVirtualfoldersName Method for PostLibraryVirtualfoldersName

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostLibraryVirtualfoldersNameRequest
	*/
	PostLibraryVirtualfoldersName(ctx context.Context) ApiPostLibraryVirtualfoldersNameRequest

	// PostLibraryVirtualfoldersNameExecute executes the request
	PostLibraryVirtualfoldersNameExecute(r ApiPostLibraryVirtualfoldersNameRequest) (*http.Response, error)

	/*
	PostLibraryVirtualfoldersPaths Method for PostLibraryVirtualfoldersPaths

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostLibraryVirtualfoldersPathsRequest
	*/
	PostLibraryVirtualfoldersPaths(ctx context.Context) ApiPostLibraryVirtualfoldersPathsRequest

	// PostLibraryVirtualfoldersPathsExecute executes the request
	PostLibraryVirtualfoldersPathsExecute(r ApiPostLibraryVirtualfoldersPathsRequest) (*http.Response, error)

	/*
	PostLibraryVirtualfoldersPathsUpdate Method for PostLibraryVirtualfoldersPathsUpdate

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostLibraryVirtualfoldersPathsUpdateRequest
	*/
	PostLibraryVirtualfoldersPathsUpdate(ctx context.Context) ApiPostLibraryVirtualfoldersPathsUpdateRequest

	// PostLibraryVirtualfoldersPathsUpdateExecute executes the request
	PostLibraryVirtualfoldersPathsUpdateExecute(r ApiPostLibraryVirtualfoldersPathsUpdateRequest) (*http.Response, error)
}

// LibraryStructureServiceAPIService LibraryStructureServiceAPI service
type LibraryStructureServiceAPIService service

type ApiDeleteLibraryVirtualfoldersRequest struct {
	ctx context.Context
	ApiService LibraryStructureServiceAPI
}

func (r ApiDeleteLibraryVirtualfoldersRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLibraryVirtualfoldersExecute(r)
}

/*
DeleteLibraryVirtualfolders Method for DeleteLibraryVirtualfolders

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteLibraryVirtualfoldersRequest
*/
func (a *LibraryStructureServiceAPIService) DeleteLibraryVirtualfolders(ctx context.Context) ApiDeleteLibraryVirtualfoldersRequest {
	return ApiDeleteLibraryVirtualfoldersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LibraryStructureServiceAPIService) DeleteLibraryVirtualfoldersExecute(r ApiDeleteLibraryVirtualfoldersRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureServiceAPIService.DeleteLibraryVirtualfolders")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteLibraryVirtualfoldersPathsRequest struct {
	ctx context.Context
	ApiService LibraryStructureServiceAPI
}

func (r ApiDeleteLibraryVirtualfoldersPathsRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLibraryVirtualfoldersPathsExecute(r)
}

/*
DeleteLibraryVirtualfoldersPaths Method for DeleteLibraryVirtualfoldersPaths

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteLibraryVirtualfoldersPathsRequest
*/
func (a *LibraryStructureServiceAPIService) DeleteLibraryVirtualfoldersPaths(ctx context.Context) ApiDeleteLibraryVirtualfoldersPathsRequest {
	return ApiDeleteLibraryVirtualfoldersPathsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LibraryStructureServiceAPIService) DeleteLibraryVirtualfoldersPathsExecute(r ApiDeleteLibraryVirtualfoldersPathsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureServiceAPIService.DeleteLibraryVirtualfoldersPaths")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders/Paths"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetLibraryVirtualfoldersRequest struct {
	ctx context.Context
	ApiService LibraryStructureServiceAPI
}

func (r ApiGetLibraryVirtualfoldersRequest) Execute() ([]VirtualFolderInfo, *http.Response, error) {
	return r.ApiService.GetLibraryVirtualfoldersExecute(r)
}

/*
GetLibraryVirtualfolders Method for GetLibraryVirtualfolders

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLibraryVirtualfoldersRequest
*/
func (a *LibraryStructureServiceAPIService) GetLibraryVirtualfolders(ctx context.Context) ApiGetLibraryVirtualfoldersRequest {
	return ApiGetLibraryVirtualfoldersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []VirtualFolderInfo
func (a *LibraryStructureServiceAPIService) GetLibraryVirtualfoldersExecute(r ApiGetLibraryVirtualfoldersRequest) ([]VirtualFolderInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []VirtualFolderInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureServiceAPIService.GetLibraryVirtualfolders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostLibraryVirtualfoldersRequest struct {
	ctx context.Context
	ApiService LibraryStructureServiceAPI
	libraryAddVirtualFolder *LibraryAddVirtualFolder
}

// AddVirtualFolder
func (r ApiPostLibraryVirtualfoldersRequest) LibraryAddVirtualFolder(libraryAddVirtualFolder LibraryAddVirtualFolder) ApiPostLibraryVirtualfoldersRequest {
	r.libraryAddVirtualFolder = &libraryAddVirtualFolder
	return r
}

func (r ApiPostLibraryVirtualfoldersRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostLibraryVirtualfoldersExecute(r)
}

/*
PostLibraryVirtualfolders Method for PostLibraryVirtualfolders

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostLibraryVirtualfoldersRequest
*/
func (a *LibraryStructureServiceAPIService) PostLibraryVirtualfolders(ctx context.Context) ApiPostLibraryVirtualfoldersRequest {
	return ApiPostLibraryVirtualfoldersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LibraryStructureServiceAPIService) PostLibraryVirtualfoldersExecute(r ApiPostLibraryVirtualfoldersRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureServiceAPIService.PostLibraryVirtualfolders")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.libraryAddVirtualFolder == nil {
		return nil, reportError("libraryAddVirtualFolder is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.libraryAddVirtualFolder
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostLibraryVirtualfoldersLibraryoptionsRequest struct {
	ctx context.Context
	ApiService LibraryStructureServiceAPI
	libraryUpdateLibraryOptions *LibraryUpdateLibraryOptions
}

// UpdateLibraryOptions
func (r ApiPostLibraryVirtualfoldersLibraryoptionsRequest) LibraryUpdateLibraryOptions(libraryUpdateLibraryOptions LibraryUpdateLibraryOptions) ApiPostLibraryVirtualfoldersLibraryoptionsRequest {
	r.libraryUpdateLibraryOptions = &libraryUpdateLibraryOptions
	return r
}

func (r ApiPostLibraryVirtualfoldersLibraryoptionsRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostLibraryVirtualfoldersLibraryoptionsExecute(r)
}

/*
PostLibraryVirtualfoldersLibraryoptions Method for PostLibraryVirtualfoldersLibraryoptions

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostLibraryVirtualfoldersLibraryoptionsRequest
*/
func (a *LibraryStructureServiceAPIService) PostLibraryVirtualfoldersLibraryoptions(ctx context.Context) ApiPostLibraryVirtualfoldersLibraryoptionsRequest {
	return ApiPostLibraryVirtualfoldersLibraryoptionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LibraryStructureServiceAPIService) PostLibraryVirtualfoldersLibraryoptionsExecute(r ApiPostLibraryVirtualfoldersLibraryoptionsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureServiceAPIService.PostLibraryVirtualfoldersLibraryoptions")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders/LibraryOptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.libraryUpdateLibraryOptions == nil {
		return nil, reportError("libraryUpdateLibraryOptions is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.libraryUpdateLibraryOptions
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostLibraryVirtualfoldersNameRequest struct {
	ctx context.Context
	ApiService LibraryStructureServiceAPI
	libraryRenameVirtualFolder *LibraryRenameVirtualFolder
}

// RenameVirtualFolder
func (r ApiPostLibraryVirtualfoldersNameRequest) LibraryRenameVirtualFolder(libraryRenameVirtualFolder LibraryRenameVirtualFolder) ApiPostLibraryVirtualfoldersNameRequest {
	r.libraryRenameVirtualFolder = &libraryRenameVirtualFolder
	return r
}

func (r ApiPostLibraryVirtualfoldersNameRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostLibraryVirtualfoldersNameExecute(r)
}

/*
PostLibraryVirtualfoldersName Method for PostLibraryVirtualfoldersName

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostLibraryVirtualfoldersNameRequest
*/
func (a *LibraryStructureServiceAPIService) PostLibraryVirtualfoldersName(ctx context.Context) ApiPostLibraryVirtualfoldersNameRequest {
	return ApiPostLibraryVirtualfoldersNameRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LibraryStructureServiceAPIService) PostLibraryVirtualfoldersNameExecute(r ApiPostLibraryVirtualfoldersNameRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureServiceAPIService.PostLibraryVirtualfoldersName")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders/Name"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.libraryRenameVirtualFolder == nil {
		return nil, reportError("libraryRenameVirtualFolder is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.libraryRenameVirtualFolder
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostLibraryVirtualfoldersPathsRequest struct {
	ctx context.Context
	ApiService LibraryStructureServiceAPI
	libraryAddMediaPath *LibraryAddMediaPath
}

// AddMediaPath
func (r ApiPostLibraryVirtualfoldersPathsRequest) LibraryAddMediaPath(libraryAddMediaPath LibraryAddMediaPath) ApiPostLibraryVirtualfoldersPathsRequest {
	r.libraryAddMediaPath = &libraryAddMediaPath
	return r
}

func (r ApiPostLibraryVirtualfoldersPathsRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostLibraryVirtualfoldersPathsExecute(r)
}

/*
PostLibraryVirtualfoldersPaths Method for PostLibraryVirtualfoldersPaths

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostLibraryVirtualfoldersPathsRequest
*/
func (a *LibraryStructureServiceAPIService) PostLibraryVirtualfoldersPaths(ctx context.Context) ApiPostLibraryVirtualfoldersPathsRequest {
	return ApiPostLibraryVirtualfoldersPathsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LibraryStructureServiceAPIService) PostLibraryVirtualfoldersPathsExecute(r ApiPostLibraryVirtualfoldersPathsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureServiceAPIService.PostLibraryVirtualfoldersPaths")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders/Paths"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.libraryAddMediaPath == nil {
		return nil, reportError("libraryAddMediaPath is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.libraryAddMediaPath
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostLibraryVirtualfoldersPathsUpdateRequest struct {
	ctx context.Context
	ApiService LibraryStructureServiceAPI
	libraryUpdateMediaPath *LibraryUpdateMediaPath
}

// UpdateMediaPath
func (r ApiPostLibraryVirtualfoldersPathsUpdateRequest) LibraryUpdateMediaPath(libraryUpdateMediaPath LibraryUpdateMediaPath) ApiPostLibraryVirtualfoldersPathsUpdateRequest {
	r.libraryUpdateMediaPath = &libraryUpdateMediaPath
	return r
}

func (r ApiPostLibraryVirtualfoldersPathsUpdateRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostLibraryVirtualfoldersPathsUpdateExecute(r)
}

/*
PostLibraryVirtualfoldersPathsUpdate Method for PostLibraryVirtualfoldersPathsUpdate

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostLibraryVirtualfoldersPathsUpdateRequest
*/
func (a *LibraryStructureServiceAPIService) PostLibraryVirtualfoldersPathsUpdate(ctx context.Context) ApiPostLibraryVirtualfoldersPathsUpdateRequest {
	return ApiPostLibraryVirtualfoldersPathsUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LibraryStructureServiceAPIService) PostLibraryVirtualfoldersPathsUpdateExecute(r ApiPostLibraryVirtualfoldersPathsUpdateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureServiceAPIService.PostLibraryVirtualfoldersPathsUpdate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders/Paths/Update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.libraryUpdateMediaPath == nil {
		return nil, reportError("libraryUpdateMediaPath is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.libraryUpdateMediaPath
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
