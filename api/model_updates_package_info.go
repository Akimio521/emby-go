/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the UpdatesPackageInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatesPackageInfo{}

// UpdatesPackageInfo struct for UpdatesPackageInfo
type UpdatesPackageInfo struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	ShortDescription *string `json:"shortDescription,omitempty"`
	Overview *string `json:"overview,omitempty"`
	IsPremium *bool `json:"isPremium,omitempty"`
	Adult *bool `json:"adult,omitempty"`
	RichDescUrl *string `json:"richDescUrl,omitempty"`
	ThumbImage *string `json:"thumbImage,omitempty"`
	PreviewImage *string `json:"previewImage,omitempty"`
	Type *string `json:"type,omitempty"`
	TargetFilename *string `json:"targetFilename,omitempty"`
	Owner *string `json:"owner,omitempty"`
	Category *string `json:"category,omitempty"`
	TileColor *string `json:"tileColor,omitempty"`
	FeatureId *string `json:"featureId,omitempty"`
	RegInfo *string `json:"regInfo,omitempty"`
	Price *float32 `json:"price,omitempty"`
	TargetSystem *string `json:"targetSystem,omitempty"`
	Guid *string `json:"guid,omitempty"`
	TotalRatings NullableInt32 `json:"totalRatings,omitempty"`
	AvgRating *float32 `json:"avgRating,omitempty"`
	IsRegistered *bool `json:"isRegistered,omitempty"`
	ExpDate *time.Time `json:"expDate,omitempty"`
	Versions []UpdatesPackageVersionInfo `json:"versions,omitempty"`
	EnableInAppStore *bool `json:"enableInAppStore,omitempty"`
	Installs *int32 `json:"installs,omitempty"`
}

// NewUpdatesPackageInfo instantiates a new UpdatesPackageInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatesPackageInfo() *UpdatesPackageInfo {
	this := UpdatesPackageInfo{}
	return &this
}

// NewUpdatesPackageInfoWithDefaults instantiates a new UpdatesPackageInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatesPackageInfoWithDefaults() *UpdatesPackageInfo {
	this := UpdatesPackageInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UpdatesPackageInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UpdatesPackageInfo) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdatesPackageInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdatesPackageInfo) SetName(v string) {
	o.Name = &v
}

// GetShortDescription returns the ShortDescription field value if set, zero value otherwise.
func (o *UpdatesPackageInfo) GetShortDescription() string {
	if o == nil || IsNil(o.ShortDescription) {
		var ret string
		return ret
	}
	return *o.ShortDescription
}

// GetShortDescriptionOk returns a tuple with the ShortDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageInfo) GetShortDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ShortDescription) {
		return nil, false
	}
	return o.ShortDescription, true
}

// HasShortDescription returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasShortDescription() bool {
	if o != nil && !IsNil(o.ShortDescription) {
		return true
	}

	return false
}

// SetShortDescription gets a reference to the given string and assigns it to the ShortDescription field.
func (o *UpdatesPackageInfo) SetShortDescription(v string) {
	o.ShortDescription = &v
}

// GetOverview returns the Overview field value if set, zero value otherwise.
func (o *UpdatesPackageInfo) GetOverview() string {
	if o == nil || IsNil(o.Overview) {
		var ret string
		return ret
	}
	return *o.Overview
}

// GetOverviewOk returns a tuple with the Overview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageInfo) GetOverviewOk() (*string, bool) {
	if o == nil || IsNil(o.Overview) {
		return nil, false
	}
	return o.Overview, true
}

// HasOverview returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasOverview() bool {
	if o != nil && !IsNil(o.Overview) {
		return true
	}

	return false
}

// SetOverview gets a reference to the given string and assigns it to the Overview field.
func (o *UpdatesPackageInfo) SetOverview(v string) {
	o.Overview = &v
}

// GetIsPremium returns the IsPremium field value if set, zero value otherwise.
func (o *UpdatesPackageInfo) GetIsPremium() bool {
	if o == nil || IsNil(o.IsPremium) {
		var ret bool
		return ret
	}
	return *o.IsPremium
}

// GetIsPremiumOk returns a tuple with the IsPremium field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageInfo) GetIsPremiumOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPremium) {
		return nil, false
	}
	return o.IsPremium, true
}

// HasIsPremium returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasIsPremium() bool {
	if o != nil && !IsNil(o.IsPremium) {
		return true
	}

	return false
}

// SetIsPremium gets a reference to the given bool and assigns it to the IsPremium field.
func (o *UpdatesPackageInfo) SetIsPremium(v bool) {
	o.IsPremium = &v
}

// GetAdult returns the Adult field value if set, zero value otherwise.
func (o *UpdatesPackageInfo) GetAdult() bool {
	if o == nil || IsNil(o.Adult) {
		var ret bool
		return ret
	}
	return *o.Adult
}

// GetAdultOk returns a tuple with the Adult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageInfo) GetAdultOk() (*bool, bool) {
	if o == nil || IsNil(o.Adult) {
		return nil, false
	}
	return o.Adult, true
}

// HasAdult returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasAdult() bool {
	if o != nil && !IsNil(o.Adult) {
		return true
	}

	return false
}

// SetAdult gets a reference to the given bool and assigns it to the Adult field.
func (o *UpdatesPackageInfo) SetAdult(v bool) {
	o.Adult = &v
}

// GetRichDescUrl returns the RichDescUrl field value if set, zero value otherwise.
func (o *UpdatesPackageInfo) GetRichDescUrl() string {
	if o == nil || IsNil(o.RichDescUrl) {
		var ret string
		return ret
	}
	return *o.RichDescUrl
}

// GetRichDescUrlOk returns a tuple with the RichDescUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageInfo) GetRichDescUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RichDescUrl) {
		return nil, false
	}
	return o.RichDescUrl, true
}

// HasRichDescUrl returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasRichDescUrl() bool {
	if o != nil && !IsNil(o.RichDescUrl) {
		return true
	}

	return false
}

// SetRichDescUrl gets a reference to the given string and assigns it to the RichDescUrl field.
func (o *UpdatesPackageInfo) SetRichDescUrl(v string) {
	o.RichDescUrl = &v
}

// GetThumbImage returns the ThumbImage field value if set, zero value otherwise.
func (o *UpdatesPackageInfo) GetThumbImage() string {
	if o == nil || IsNil(o.ThumbImage) {
		var ret string
		return ret
	}
	return *o.ThumbImage
}

// GetThumbImageOk returns a tuple with the ThumbImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageInfo) GetThumbImageOk() (*string, bool) {
	if o == nil || IsNil(o.ThumbImage) {
		return nil, false
	}
	return o.ThumbImage, true
}

// HasThumbImage returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasThumbImage() bool {
	if o != nil && !IsNil(o.ThumbImage) {
		return true
	}

	return false
}

// SetThumbImage gets a reference to the given string and assigns it to the ThumbImage field.
func (o *UpdatesPackageInfo) SetThumbImage(v string) {
	o.ThumbImage = &v
}

// GetPreviewImage returns the PreviewImage field value if set, zero value otherwise.
func (o *UpdatesPackageInfo) GetPreviewImage() string {
	if o == nil || IsNil(o.PreviewImage) {
		var ret string
		return ret
	}
	return *o.PreviewImage
}

// GetPreviewImageOk returns a tuple with the PreviewImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageInfo) GetPreviewImageOk() (*string, bool) {
	if o == nil || IsNil(o.PreviewImage) {
		return nil, false
	}
	return o.PreviewImage, true
}

// HasPreviewImage returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasPreviewImage() bool {
	if o != nil && !IsNil(o.PreviewImage) {
		return true
	}

	return false
}

// SetPreviewImage gets a reference to the given string and assigns it to the PreviewImage field.
func (o *UpdatesPackageInfo) SetPreviewImage(v string) {
	o.PreviewImage = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UpdatesPackageInfo) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageInfo) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UpdatesPackageInfo) SetType(v string) {
	o.Type = &v
}

// GetTargetFilename returns the TargetFilename field value if set, zero value otherwise.
func (o *UpdatesPackageInfo) GetTargetFilename() string {
	if o == nil || IsNil(o.TargetFilename) {
		var ret string
		return ret
	}
	return *o.TargetFilename
}

// GetTargetFilenameOk returns a tuple with the TargetFilename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageInfo) GetTargetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.TargetFilename) {
		return nil, false
	}
	return o.TargetFilename, true
}

// HasTargetFilename returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasTargetFilename() bool {
	if o != nil && !IsNil(o.TargetFilename) {
		return true
	}

	return false
}

// SetTargetFilename gets a reference to the given string and assigns it to the TargetFilename field.
func (o *UpdatesPackageInfo) SetTargetFilename(v string) {
	o.TargetFilename = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *UpdatesPackageInfo) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageInfo) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *UpdatesPackageInfo) SetOwner(v string) {
	o.Owner = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *UpdatesPackageInfo) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageInfo) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *UpdatesPackageInfo) SetCategory(v string) {
	o.Category = &v
}

// GetTileColor returns the TileColor field value if set, zero value otherwise.
func (o *UpdatesPackageInfo) GetTileColor() string {
	if o == nil || IsNil(o.TileColor) {
		var ret string
		return ret
	}
	return *o.TileColor
}

// GetTileColorOk returns a tuple with the TileColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageInfo) GetTileColorOk() (*string, bool) {
	if o == nil || IsNil(o.TileColor) {
		return nil, false
	}
	return o.TileColor, true
}

// HasTileColor returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasTileColor() bool {
	if o != nil && !IsNil(o.TileColor) {
		return true
	}

	return false
}

// SetTileColor gets a reference to the given string and assigns it to the TileColor field.
func (o *UpdatesPackageInfo) SetTileColor(v string) {
	o.TileColor = &v
}

// GetFeatureId returns the FeatureId field value if set, zero value otherwise.
func (o *UpdatesPackageInfo) GetFeatureId() string {
	if o == nil || IsNil(o.FeatureId) {
		var ret string
		return ret
	}
	return *o.FeatureId
}

// GetFeatureIdOk returns a tuple with the FeatureId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageInfo) GetFeatureIdOk() (*string, bool) {
	if o == nil || IsNil(o.FeatureId) {
		return nil, false
	}
	return o.FeatureId, true
}

// HasFeatureId returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasFeatureId() bool {
	if o != nil && !IsNil(o.FeatureId) {
		return true
	}

	return false
}

// SetFeatureId gets a reference to the given string and assigns it to the FeatureId field.
func (o *UpdatesPackageInfo) SetFeatureId(v string) {
	o.FeatureId = &v
}

// GetRegInfo returns the RegInfo field value if set, zero value otherwise.
func (o *UpdatesPackageInfo) GetRegInfo() string {
	if o == nil || IsNil(o.RegInfo) {
		var ret string
		return ret
	}
	return *o.RegInfo
}

// GetRegInfoOk returns a tuple with the RegInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageInfo) GetRegInfoOk() (*string, bool) {
	if o == nil || IsNil(o.RegInfo) {
		return nil, false
	}
	return o.RegInfo, true
}

// HasRegInfo returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasRegInfo() bool {
	if o != nil && !IsNil(o.RegInfo) {
		return true
	}

	return false
}

// SetRegInfo gets a reference to the given string and assigns it to the RegInfo field.
func (o *UpdatesPackageInfo) SetRegInfo(v string) {
	o.RegInfo = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *UpdatesPackageInfo) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageInfo) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *UpdatesPackageInfo) SetPrice(v float32) {
	o.Price = &v
}

// GetTargetSystem returns the TargetSystem field value if set, zero value otherwise.
func (o *UpdatesPackageInfo) GetTargetSystem() string {
	if o == nil || IsNil(o.TargetSystem) {
		var ret string
		return ret
	}
	return *o.TargetSystem
}

// GetTargetSystemOk returns a tuple with the TargetSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageInfo) GetTargetSystemOk() (*string, bool) {
	if o == nil || IsNil(o.TargetSystem) {
		return nil, false
	}
	return o.TargetSystem, true
}

// HasTargetSystem returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasTargetSystem() bool {
	if o != nil && !IsNil(o.TargetSystem) {
		return true
	}

	return false
}

// SetTargetSystem gets a reference to the given string and assigns it to the TargetSystem field.
func (o *UpdatesPackageInfo) SetTargetSystem(v string) {
	o.TargetSystem = &v
}

// GetGuid returns the Guid field value if set, zero value otherwise.
func (o *UpdatesPackageInfo) GetGuid() string {
	if o == nil || IsNil(o.Guid) {
		var ret string
		return ret
	}
	return *o.Guid
}

// GetGuidOk returns a tuple with the Guid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageInfo) GetGuidOk() (*string, bool) {
	if o == nil || IsNil(o.Guid) {
		return nil, false
	}
	return o.Guid, true
}

// HasGuid returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasGuid() bool {
	if o != nil && !IsNil(o.Guid) {
		return true
	}

	return false
}

// SetGuid gets a reference to the given string and assigns it to the Guid field.
func (o *UpdatesPackageInfo) SetGuid(v string) {
	o.Guid = &v
}

// GetTotalRatings returns the TotalRatings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatesPackageInfo) GetTotalRatings() int32 {
	if o == nil || IsNil(o.TotalRatings.Get()) {
		var ret int32
		return ret
	}
	return *o.TotalRatings.Get()
}

// GetTotalRatingsOk returns a tuple with the TotalRatings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatesPackageInfo) GetTotalRatingsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalRatings.Get(), o.TotalRatings.IsSet()
}

// HasTotalRatings returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasTotalRatings() bool {
	if o != nil && o.TotalRatings.IsSet() {
		return true
	}

	return false
}

// SetTotalRatings gets a reference to the given NullableInt32 and assigns it to the TotalRatings field.
func (o *UpdatesPackageInfo) SetTotalRatings(v int32) {
	o.TotalRatings.Set(&v)
}
// SetTotalRatingsNil sets the value for TotalRatings to be an explicit nil
func (o *UpdatesPackageInfo) SetTotalRatingsNil() {
	o.TotalRatings.Set(nil)
}

// UnsetTotalRatings ensures that no value is present for TotalRatings, not even an explicit nil
func (o *UpdatesPackageInfo) UnsetTotalRatings() {
	o.TotalRatings.Unset()
}

// GetAvgRating returns the AvgRating field value if set, zero value otherwise.
func (o *UpdatesPackageInfo) GetAvgRating() float32 {
	if o == nil || IsNil(o.AvgRating) {
		var ret float32
		return ret
	}
	return *o.AvgRating
}

// GetAvgRatingOk returns a tuple with the AvgRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageInfo) GetAvgRatingOk() (*float32, bool) {
	if o == nil || IsNil(o.AvgRating) {
		return nil, false
	}
	return o.AvgRating, true
}

// HasAvgRating returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasAvgRating() bool {
	if o != nil && !IsNil(o.AvgRating) {
		return true
	}

	return false
}

// SetAvgRating gets a reference to the given float32 and assigns it to the AvgRating field.
func (o *UpdatesPackageInfo) SetAvgRating(v float32) {
	o.AvgRating = &v
}

// GetIsRegistered returns the IsRegistered field value if set, zero value otherwise.
func (o *UpdatesPackageInfo) GetIsRegistered() bool {
	if o == nil || IsNil(o.IsRegistered) {
		var ret bool
		return ret
	}
	return *o.IsRegistered
}

// GetIsRegisteredOk returns a tuple with the IsRegistered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageInfo) GetIsRegisteredOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRegistered) {
		return nil, false
	}
	return o.IsRegistered, true
}

// HasIsRegistered returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasIsRegistered() bool {
	if o != nil && !IsNil(o.IsRegistered) {
		return true
	}

	return false
}

// SetIsRegistered gets a reference to the given bool and assigns it to the IsRegistered field.
func (o *UpdatesPackageInfo) SetIsRegistered(v bool) {
	o.IsRegistered = &v
}

// GetExpDate returns the ExpDate field value if set, zero value otherwise.
func (o *UpdatesPackageInfo) GetExpDate() time.Time {
	if o == nil || IsNil(o.ExpDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpDate
}

// GetExpDateOk returns a tuple with the ExpDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageInfo) GetExpDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpDate) {
		return nil, false
	}
	return o.ExpDate, true
}

// HasExpDate returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasExpDate() bool {
	if o != nil && !IsNil(o.ExpDate) {
		return true
	}

	return false
}

// SetExpDate gets a reference to the given time.Time and assigns it to the ExpDate field.
func (o *UpdatesPackageInfo) SetExpDate(v time.Time) {
	o.ExpDate = &v
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *UpdatesPackageInfo) GetVersions() []UpdatesPackageVersionInfo {
	if o == nil || IsNil(o.Versions) {
		var ret []UpdatesPackageVersionInfo
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageInfo) GetVersionsOk() ([]UpdatesPackageVersionInfo, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []UpdatesPackageVersionInfo and assigns it to the Versions field.
func (o *UpdatesPackageInfo) SetVersions(v []UpdatesPackageVersionInfo) {
	o.Versions = v
}

// GetEnableInAppStore returns the EnableInAppStore field value if set, zero value otherwise.
func (o *UpdatesPackageInfo) GetEnableInAppStore() bool {
	if o == nil || IsNil(o.EnableInAppStore) {
		var ret bool
		return ret
	}
	return *o.EnableInAppStore
}

// GetEnableInAppStoreOk returns a tuple with the EnableInAppStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageInfo) GetEnableInAppStoreOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableInAppStore) {
		return nil, false
	}
	return o.EnableInAppStore, true
}

// HasEnableInAppStore returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasEnableInAppStore() bool {
	if o != nil && !IsNil(o.EnableInAppStore) {
		return true
	}

	return false
}

// SetEnableInAppStore gets a reference to the given bool and assigns it to the EnableInAppStore field.
func (o *UpdatesPackageInfo) SetEnableInAppStore(v bool) {
	o.EnableInAppStore = &v
}

// GetInstalls returns the Installs field value if set, zero value otherwise.
func (o *UpdatesPackageInfo) GetInstalls() int32 {
	if o == nil || IsNil(o.Installs) {
		var ret int32
		return ret
	}
	return *o.Installs
}

// GetInstallsOk returns a tuple with the Installs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageInfo) GetInstallsOk() (*int32, bool) {
	if o == nil || IsNil(o.Installs) {
		return nil, false
	}
	return o.Installs, true
}

// HasInstalls returns a boolean if a field has been set.
func (o *UpdatesPackageInfo) HasInstalls() bool {
	if o != nil && !IsNil(o.Installs) {
		return true
	}

	return false
}

// SetInstalls gets a reference to the given int32 and assigns it to the Installs field.
func (o *UpdatesPackageInfo) SetInstalls(v int32) {
	o.Installs = &v
}

func (o UpdatesPackageInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatesPackageInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ShortDescription) {
		toSerialize["shortDescription"] = o.ShortDescription
	}
	if !IsNil(o.Overview) {
		toSerialize["overview"] = o.Overview
	}
	if !IsNil(o.IsPremium) {
		toSerialize["isPremium"] = o.IsPremium
	}
	if !IsNil(o.Adult) {
		toSerialize["adult"] = o.Adult
	}
	if !IsNil(o.RichDescUrl) {
		toSerialize["richDescUrl"] = o.RichDescUrl
	}
	if !IsNil(o.ThumbImage) {
		toSerialize["thumbImage"] = o.ThumbImage
	}
	if !IsNil(o.PreviewImage) {
		toSerialize["previewImage"] = o.PreviewImage
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.TargetFilename) {
		toSerialize["targetFilename"] = o.TargetFilename
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.TileColor) {
		toSerialize["tileColor"] = o.TileColor
	}
	if !IsNil(o.FeatureId) {
		toSerialize["featureId"] = o.FeatureId
	}
	if !IsNil(o.RegInfo) {
		toSerialize["regInfo"] = o.RegInfo
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.TargetSystem) {
		toSerialize["targetSystem"] = o.TargetSystem
	}
	if !IsNil(o.Guid) {
		toSerialize["guid"] = o.Guid
	}
	if o.TotalRatings.IsSet() {
		toSerialize["totalRatings"] = o.TotalRatings.Get()
	}
	if !IsNil(o.AvgRating) {
		toSerialize["avgRating"] = o.AvgRating
	}
	if !IsNil(o.IsRegistered) {
		toSerialize["isRegistered"] = o.IsRegistered
	}
	if !IsNil(o.ExpDate) {
		toSerialize["expDate"] = o.ExpDate
	}
	if !IsNil(o.Versions) {
		toSerialize["versions"] = o.Versions
	}
	if !IsNil(o.EnableInAppStore) {
		toSerialize["enableInAppStore"] = o.EnableInAppStore
	}
	if !IsNil(o.Installs) {
		toSerialize["installs"] = o.Installs
	}
	return toSerialize, nil
}

type NullableUpdatesPackageInfo struct {
	value *UpdatesPackageInfo
	isSet bool
}

func (v NullableUpdatesPackageInfo) Get() *UpdatesPackageInfo {
	return v.value
}

func (v *NullableUpdatesPackageInfo) Set(val *UpdatesPackageInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatesPackageInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatesPackageInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatesPackageInfo(val *UpdatesPackageInfo) *NullableUpdatesPackageInfo {
	return &NullableUpdatesPackageInfo{value: val, isSet: true}
}

func (v NullableUpdatesPackageInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatesPackageInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


