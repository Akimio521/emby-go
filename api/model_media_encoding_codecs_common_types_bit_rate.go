/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the MediaEncodingCodecsCommonTypesBitRate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaEncodingCodecsCommonTypesBitRate{}

// MediaEncodingCodecsCommonTypesBitRate struct for MediaEncodingCodecsCommonTypesBitRate
type MediaEncodingCodecsCommonTypesBitRate struct {
	Bps *int64 `json:"bps,omitempty"`
	Kbps *float64 `json:"kbps,omitempty"`
	Mbps *float64 `json:"Mbps,omitempty"`
}

// NewMediaEncodingCodecsCommonTypesBitRate instantiates a new MediaEncodingCodecsCommonTypesBitRate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaEncodingCodecsCommonTypesBitRate() *MediaEncodingCodecsCommonTypesBitRate {
	this := MediaEncodingCodecsCommonTypesBitRate{}
	return &this
}

// NewMediaEncodingCodecsCommonTypesBitRateWithDefaults instantiates a new MediaEncodingCodecsCommonTypesBitRate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaEncodingCodecsCommonTypesBitRateWithDefaults() *MediaEncodingCodecsCommonTypesBitRate {
	this := MediaEncodingCodecsCommonTypesBitRate{}
	return &this
}

// GetBps returns the Bps field value if set, zero value otherwise.
func (o *MediaEncodingCodecsCommonTypesBitRate) GetBps() int64 {
	if o == nil || IsNil(o.Bps) {
		var ret int64
		return ret
	}
	return *o.Bps
}

// GetBpsOk returns a tuple with the Bps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsCommonTypesBitRate) GetBpsOk() (*int64, bool) {
	if o == nil || IsNil(o.Bps) {
		return nil, false
	}
	return o.Bps, true
}

// HasBps returns a boolean if a field has been set.
func (o *MediaEncodingCodecsCommonTypesBitRate) HasBps() bool {
	if o != nil && !IsNil(o.Bps) {
		return true
	}

	return false
}

// SetBps gets a reference to the given int64 and assigns it to the Bps field.
func (o *MediaEncodingCodecsCommonTypesBitRate) SetBps(v int64) {
	o.Bps = &v
}

// GetKbps returns the Kbps field value if set, zero value otherwise.
func (o *MediaEncodingCodecsCommonTypesBitRate) GetKbps() float64 {
	if o == nil || IsNil(o.Kbps) {
		var ret float64
		return ret
	}
	return *o.Kbps
}

// GetKbpsOk returns a tuple with the Kbps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsCommonTypesBitRate) GetKbpsOk() (*float64, bool) {
	if o == nil || IsNil(o.Kbps) {
		return nil, false
	}
	return o.Kbps, true
}

// HasKbps returns a boolean if a field has been set.
func (o *MediaEncodingCodecsCommonTypesBitRate) HasKbps() bool {
	if o != nil && !IsNil(o.Kbps) {
		return true
	}

	return false
}

// SetKbps gets a reference to the given float64 and assigns it to the Kbps field.
func (o *MediaEncodingCodecsCommonTypesBitRate) SetKbps(v float64) {
	o.Kbps = &v
}

// GetMbps returns the Mbps field value if set, zero value otherwise.
func (o *MediaEncodingCodecsCommonTypesBitRate) GetMbps() float64 {
	if o == nil || IsNil(o.Mbps) {
		var ret float64
		return ret
	}
	return *o.Mbps
}

// GetMbpsOk returns a tuple with the Mbps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsCommonTypesBitRate) GetMbpsOk() (*float64, bool) {
	if o == nil || IsNil(o.Mbps) {
		return nil, false
	}
	return o.Mbps, true
}

// HasMbps returns a boolean if a field has been set.
func (o *MediaEncodingCodecsCommonTypesBitRate) HasMbps() bool {
	if o != nil && !IsNil(o.Mbps) {
		return true
	}

	return false
}

// SetMbps gets a reference to the given float64 and assigns it to the Mbps field.
func (o *MediaEncodingCodecsCommonTypesBitRate) SetMbps(v float64) {
	o.Mbps = &v
}

func (o MediaEncodingCodecsCommonTypesBitRate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaEncodingCodecsCommonTypesBitRate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bps) {
		toSerialize["bps"] = o.Bps
	}
	if !IsNil(o.Kbps) {
		toSerialize["kbps"] = o.Kbps
	}
	if !IsNil(o.Mbps) {
		toSerialize["Mbps"] = o.Mbps
	}
	return toSerialize, nil
}

type NullableMediaEncodingCodecsCommonTypesBitRate struct {
	value *MediaEncodingCodecsCommonTypesBitRate
	isSet bool
}

func (v NullableMediaEncodingCodecsCommonTypesBitRate) Get() *MediaEncodingCodecsCommonTypesBitRate {
	return v.value
}

func (v *NullableMediaEncodingCodecsCommonTypesBitRate) Set(val *MediaEncodingCodecsCommonTypesBitRate) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaEncodingCodecsCommonTypesBitRate) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaEncodingCodecsCommonTypesBitRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaEncodingCodecsCommonTypesBitRate(val *MediaEncodingCodecsCommonTypesBitRate) *NullableMediaEncodingCodecsCommonTypesBitRate {
	return &NullableMediaEncodingCodecsCommonTypesBitRate{value: val, isSet: true}
}

func (v NullableMediaEncodingCodecsCommonTypesBitRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaEncodingCodecsCommonTypesBitRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


