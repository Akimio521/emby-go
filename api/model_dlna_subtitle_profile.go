/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the DlnaSubtitleProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DlnaSubtitleProfile{}

// DlnaSubtitleProfile struct for DlnaSubtitleProfile
type DlnaSubtitleProfile struct {
	Format *string `json:"Format,omitempty"`
	Method *string `json:"Method,omitempty"`
	DidlMode *string `json:"DidlMode,omitempty"`
	Language *string `json:"Language,omitempty"`
	Container *string `json:"Container,omitempty"`
}

// NewDlnaSubtitleProfile instantiates a new DlnaSubtitleProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDlnaSubtitleProfile() *DlnaSubtitleProfile {
	this := DlnaSubtitleProfile{}
	return &this
}

// NewDlnaSubtitleProfileWithDefaults instantiates a new DlnaSubtitleProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDlnaSubtitleProfileWithDefaults() *DlnaSubtitleProfile {
	this := DlnaSubtitleProfile{}
	return &this
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *DlnaSubtitleProfile) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaSubtitleProfile) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *DlnaSubtitleProfile) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *DlnaSubtitleProfile) SetFormat(v string) {
	o.Format = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *DlnaSubtitleProfile) GetMethod() string {
	if o == nil || IsNil(o.Method) {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaSubtitleProfile) GetMethodOk() (*string, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *DlnaSubtitleProfile) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *DlnaSubtitleProfile) SetMethod(v string) {
	o.Method = &v
}

// GetDidlMode returns the DidlMode field value if set, zero value otherwise.
func (o *DlnaSubtitleProfile) GetDidlMode() string {
	if o == nil || IsNil(o.DidlMode) {
		var ret string
		return ret
	}
	return *o.DidlMode
}

// GetDidlModeOk returns a tuple with the DidlMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaSubtitleProfile) GetDidlModeOk() (*string, bool) {
	if o == nil || IsNil(o.DidlMode) {
		return nil, false
	}
	return o.DidlMode, true
}

// HasDidlMode returns a boolean if a field has been set.
func (o *DlnaSubtitleProfile) HasDidlMode() bool {
	if o != nil && !IsNil(o.DidlMode) {
		return true
	}

	return false
}

// SetDidlMode gets a reference to the given string and assigns it to the DidlMode field.
func (o *DlnaSubtitleProfile) SetDidlMode(v string) {
	o.DidlMode = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *DlnaSubtitleProfile) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaSubtitleProfile) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *DlnaSubtitleProfile) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *DlnaSubtitleProfile) SetLanguage(v string) {
	o.Language = &v
}

// GetContainer returns the Container field value if set, zero value otherwise.
func (o *DlnaSubtitleProfile) GetContainer() string {
	if o == nil || IsNil(o.Container) {
		var ret string
		return ret
	}
	return *o.Container
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaSubtitleProfile) GetContainerOk() (*string, bool) {
	if o == nil || IsNil(o.Container) {
		return nil, false
	}
	return o.Container, true
}

// HasContainer returns a boolean if a field has been set.
func (o *DlnaSubtitleProfile) HasContainer() bool {
	if o != nil && !IsNil(o.Container) {
		return true
	}

	return false
}

// SetContainer gets a reference to the given string and assigns it to the Container field.
func (o *DlnaSubtitleProfile) SetContainer(v string) {
	o.Container = &v
}

func (o DlnaSubtitleProfile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DlnaSubtitleProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Format) {
		toSerialize["Format"] = o.Format
	}
	if !IsNil(o.Method) {
		toSerialize["Method"] = o.Method
	}
	if !IsNil(o.DidlMode) {
		toSerialize["DidlMode"] = o.DidlMode
	}
	if !IsNil(o.Language) {
		toSerialize["Language"] = o.Language
	}
	if !IsNil(o.Container) {
		toSerialize["Container"] = o.Container
	}
	return toSerialize, nil
}

type NullableDlnaSubtitleProfile struct {
	value *DlnaSubtitleProfile
	isSet bool
}

func (v NullableDlnaSubtitleProfile) Get() *DlnaSubtitleProfile {
	return v.value
}

func (v *NullableDlnaSubtitleProfile) Set(val *DlnaSubtitleProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableDlnaSubtitleProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableDlnaSubtitleProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDlnaSubtitleProfile(val *DlnaSubtitleProfile) *NullableDlnaSubtitleProfile {
	return &NullableDlnaSubtitleProfile{value: val, isSet: true}
}

func (v NullableDlnaSubtitleProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDlnaSubtitleProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


