/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the DlnaContainerProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DlnaContainerProfile{}

// DlnaContainerProfile struct for DlnaContainerProfile
type DlnaContainerProfile struct {
	Type *string `json:"Type,omitempty"`
	Conditions []DlnaProfileCondition `json:"Conditions,omitempty"`
	Container *string `json:"Container,omitempty"`
}

// NewDlnaContainerProfile instantiates a new DlnaContainerProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDlnaContainerProfile() *DlnaContainerProfile {
	this := DlnaContainerProfile{}
	return &this
}

// NewDlnaContainerProfileWithDefaults instantiates a new DlnaContainerProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDlnaContainerProfileWithDefaults() *DlnaContainerProfile {
	this := DlnaContainerProfile{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DlnaContainerProfile) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaContainerProfile) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DlnaContainerProfile) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DlnaContainerProfile) SetType(v string) {
	o.Type = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *DlnaContainerProfile) GetConditions() []DlnaProfileCondition {
	if o == nil || IsNil(o.Conditions) {
		var ret []DlnaProfileCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaContainerProfile) GetConditionsOk() ([]DlnaProfileCondition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *DlnaContainerProfile) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []DlnaProfileCondition and assigns it to the Conditions field.
func (o *DlnaContainerProfile) SetConditions(v []DlnaProfileCondition) {
	o.Conditions = v
}

// GetContainer returns the Container field value if set, zero value otherwise.
func (o *DlnaContainerProfile) GetContainer() string {
	if o == nil || IsNil(o.Container) {
		var ret string
		return ret
	}
	return *o.Container
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaContainerProfile) GetContainerOk() (*string, bool) {
	if o == nil || IsNil(o.Container) {
		return nil, false
	}
	return o.Container, true
}

// HasContainer returns a boolean if a field has been set.
func (o *DlnaContainerProfile) HasContainer() bool {
	if o != nil && !IsNil(o.Container) {
		return true
	}

	return false
}

// SetContainer gets a reference to the given string and assigns it to the Container field.
func (o *DlnaContainerProfile) SetContainer(v string) {
	o.Container = &v
}

func (o DlnaContainerProfile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DlnaContainerProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !IsNil(o.Conditions) {
		toSerialize["Conditions"] = o.Conditions
	}
	if !IsNil(o.Container) {
		toSerialize["Container"] = o.Container
	}
	return toSerialize, nil
}

type NullableDlnaContainerProfile struct {
	value *DlnaContainerProfile
	isSet bool
}

func (v NullableDlnaContainerProfile) Get() *DlnaContainerProfile {
	return v.value
}

func (v *NullableDlnaContainerProfile) Set(val *DlnaContainerProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableDlnaContainerProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableDlnaContainerProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDlnaContainerProfile(val *DlnaContainerProfile) *NullableDlnaContainerProfile {
	return &NullableDlnaContainerProfile{value: val, isSet: true}
}

func (v NullableDlnaContainerProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDlnaContainerProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


