/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the UpdateUserPassword type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateUserPassword{}

// UpdateUserPassword struct for UpdateUserPassword
type UpdateUserPassword struct {
	Id *string `json:"Id,omitempty"`
	CurrentPw *string `json:"CurrentPw,omitempty"`
	NewPw *string `json:"NewPw,omitempty"`
	ResetPassword *bool `json:"ResetPassword,omitempty"`
}

// NewUpdateUserPassword instantiates a new UpdateUserPassword object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUserPassword() *UpdateUserPassword {
	this := UpdateUserPassword{}
	return &this
}

// NewUpdateUserPasswordWithDefaults instantiates a new UpdateUserPassword object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserPasswordWithDefaults() *UpdateUserPassword {
	this := UpdateUserPassword{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UpdateUserPassword) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserPassword) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UpdateUserPassword) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UpdateUserPassword) SetId(v string) {
	o.Id = &v
}

// GetCurrentPw returns the CurrentPw field value if set, zero value otherwise.
func (o *UpdateUserPassword) GetCurrentPw() string {
	if o == nil || IsNil(o.CurrentPw) {
		var ret string
		return ret
	}
	return *o.CurrentPw
}

// GetCurrentPwOk returns a tuple with the CurrentPw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserPassword) GetCurrentPwOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentPw) {
		return nil, false
	}
	return o.CurrentPw, true
}

// HasCurrentPw returns a boolean if a field has been set.
func (o *UpdateUserPassword) HasCurrentPw() bool {
	if o != nil && !IsNil(o.CurrentPw) {
		return true
	}

	return false
}

// SetCurrentPw gets a reference to the given string and assigns it to the CurrentPw field.
func (o *UpdateUserPassword) SetCurrentPw(v string) {
	o.CurrentPw = &v
}

// GetNewPw returns the NewPw field value if set, zero value otherwise.
func (o *UpdateUserPassword) GetNewPw() string {
	if o == nil || IsNil(o.NewPw) {
		var ret string
		return ret
	}
	return *o.NewPw
}

// GetNewPwOk returns a tuple with the NewPw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserPassword) GetNewPwOk() (*string, bool) {
	if o == nil || IsNil(o.NewPw) {
		return nil, false
	}
	return o.NewPw, true
}

// HasNewPw returns a boolean if a field has been set.
func (o *UpdateUserPassword) HasNewPw() bool {
	if o != nil && !IsNil(o.NewPw) {
		return true
	}

	return false
}

// SetNewPw gets a reference to the given string and assigns it to the NewPw field.
func (o *UpdateUserPassword) SetNewPw(v string) {
	o.NewPw = &v
}

// GetResetPassword returns the ResetPassword field value if set, zero value otherwise.
func (o *UpdateUserPassword) GetResetPassword() bool {
	if o == nil || IsNil(o.ResetPassword) {
		var ret bool
		return ret
	}
	return *o.ResetPassword
}

// GetResetPasswordOk returns a tuple with the ResetPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserPassword) GetResetPasswordOk() (*bool, bool) {
	if o == nil || IsNil(o.ResetPassword) {
		return nil, false
	}
	return o.ResetPassword, true
}

// HasResetPassword returns a boolean if a field has been set.
func (o *UpdateUserPassword) HasResetPassword() bool {
	if o != nil && !IsNil(o.ResetPassword) {
		return true
	}

	return false
}

// SetResetPassword gets a reference to the given bool and assigns it to the ResetPassword field.
func (o *UpdateUserPassword) SetResetPassword(v bool) {
	o.ResetPassword = &v
}

func (o UpdateUserPassword) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateUserPassword) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !IsNil(o.CurrentPw) {
		toSerialize["CurrentPw"] = o.CurrentPw
	}
	if !IsNil(o.NewPw) {
		toSerialize["NewPw"] = o.NewPw
	}
	if !IsNil(o.ResetPassword) {
		toSerialize["ResetPassword"] = o.ResetPassword
	}
	return toSerialize, nil
}

type NullableUpdateUserPassword struct {
	value *UpdateUserPassword
	isSet bool
}

func (v NullableUpdateUserPassword) Get() *UpdateUserPassword {
	return v.value
}

func (v *NullableUpdateUserPassword) Set(val *UpdateUserPassword) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUserPassword) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUserPassword) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUserPassword(val *UpdateUserPassword) *NullableUpdateUserPassword {
	return &NullableUpdateUserPassword{value: val, isSet: true}
}

func (v NullableUpdateUserPassword) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUserPassword) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


