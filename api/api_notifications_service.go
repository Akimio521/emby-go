/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type NotificationsServiceAPI interface {

	/*
	GetNotificationsByUserid Gets notifications

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId User Id
	@return ApiGetNotificationsByUseridRequest
	*/
	GetNotificationsByUserid(ctx context.Context, userId string) ApiGetNotificationsByUseridRequest

	// GetNotificationsByUseridExecute executes the request
	//  @return EmbyNotificationsApiNotificationResult
	GetNotificationsByUseridExecute(r ApiGetNotificationsByUseridRequest) (*EmbyNotificationsApiNotificationResult, *http.Response, error)

	/*
	GetNotificationsByUseridSummary Gets a notification summary for a user

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId User Id
	@return ApiGetNotificationsByUseridSummaryRequest
	*/
	GetNotificationsByUseridSummary(ctx context.Context, userId string) ApiGetNotificationsByUseridSummaryRequest

	// GetNotificationsByUseridSummaryExecute executes the request
	//  @return EmbyNotificationsApiNotificationsSummary
	GetNotificationsByUseridSummaryExecute(r ApiGetNotificationsByUseridSummaryRequest) (*EmbyNotificationsApiNotificationsSummary, *http.Response, error)

	/*
	GetNotificationsServices Gets notification types

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetNotificationsServicesRequest
	*/
	GetNotificationsServices(ctx context.Context) ApiGetNotificationsServicesRequest

	// GetNotificationsServicesExecute executes the request
	//  @return []NameIdPair
	GetNotificationsServicesExecute(r ApiGetNotificationsServicesRequest) ([]NameIdPair, *http.Response, error)

	/*
	GetNotificationsTypes Gets notification types

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetNotificationsTypesRequest
	*/
	GetNotificationsTypes(ctx context.Context) ApiGetNotificationsTypesRequest

	// GetNotificationsTypesExecute executes the request
	//  @return []NotificationsNotificationTypeInfo
	GetNotificationsTypesExecute(r ApiGetNotificationsTypesRequest) ([]NotificationsNotificationTypeInfo, *http.Response, error)

	/*
	PostNotificationsAdmin Sends a notification to all admin users

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostNotificationsAdminRequest
	*/
	PostNotificationsAdmin(ctx context.Context) ApiPostNotificationsAdminRequest

	// PostNotificationsAdminExecute executes the request
	PostNotificationsAdminExecute(r ApiPostNotificationsAdminRequest) (*http.Response, error)

	/*
	PostNotificationsByUseridRead Marks notifications as read

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId User Id
	@return ApiPostNotificationsByUseridReadRequest
	*/
	PostNotificationsByUseridRead(ctx context.Context, userId string) ApiPostNotificationsByUseridReadRequest

	// PostNotificationsByUseridReadExecute executes the request
	PostNotificationsByUseridReadExecute(r ApiPostNotificationsByUseridReadRequest) (*http.Response, error)

	/*
	PostNotificationsByUseridUnread Marks notifications as unread

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId User Id
	@return ApiPostNotificationsByUseridUnreadRequest
	*/
	PostNotificationsByUseridUnread(ctx context.Context, userId string) ApiPostNotificationsByUseridUnreadRequest

	// PostNotificationsByUseridUnreadExecute executes the request
	PostNotificationsByUseridUnreadExecute(r ApiPostNotificationsByUseridUnreadRequest) (*http.Response, error)
}

// NotificationsServiceAPIService NotificationsServiceAPI service
type NotificationsServiceAPIService service

type ApiGetNotificationsByUseridRequest struct {
	ctx context.Context
	ApiService NotificationsServiceAPI
	userId string
	isRead *bool
	startIndex *int32
	limit *int32
}

// An optional filter by IsRead
func (r ApiGetNotificationsByUseridRequest) IsRead(isRead bool) ApiGetNotificationsByUseridRequest {
	r.isRead = &isRead
	return r
}

// Optional. The record index to start at. All items with a lower index will be dropped from the results.
func (r ApiGetNotificationsByUseridRequest) StartIndex(startIndex int32) ApiGetNotificationsByUseridRequest {
	r.startIndex = &startIndex
	return r
}

// Optional. The maximum number of records to return
func (r ApiGetNotificationsByUseridRequest) Limit(limit int32) ApiGetNotificationsByUseridRequest {
	r.limit = &limit
	return r
}

func (r ApiGetNotificationsByUseridRequest) Execute() (*EmbyNotificationsApiNotificationResult, *http.Response, error) {
	return r.ApiService.GetNotificationsByUseridExecute(r)
}

/*
GetNotificationsByUserid Gets notifications

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @return ApiGetNotificationsByUseridRequest
*/
func (a *NotificationsServiceAPIService) GetNotificationsByUserid(ctx context.Context, userId string) ApiGetNotificationsByUseridRequest {
	return ApiGetNotificationsByUseridRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return EmbyNotificationsApiNotificationResult
func (a *NotificationsServiceAPIService) GetNotificationsByUseridExecute(r ApiGetNotificationsByUseridRequest) (*EmbyNotificationsApiNotificationResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmbyNotificationsApiNotificationResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationsServiceAPIService.GetNotificationsByUserid")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Notifications/{UserId}"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.isRead != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsRead", r.isRead, "form", "")
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartIndex", r.startIndex, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetNotificationsByUseridSummaryRequest struct {
	ctx context.Context
	ApiService NotificationsServiceAPI
	userId string
}

func (r ApiGetNotificationsByUseridSummaryRequest) Execute() (*EmbyNotificationsApiNotificationsSummary, *http.Response, error) {
	return r.ApiService.GetNotificationsByUseridSummaryExecute(r)
}

/*
GetNotificationsByUseridSummary Gets a notification summary for a user

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @return ApiGetNotificationsByUseridSummaryRequest
*/
func (a *NotificationsServiceAPIService) GetNotificationsByUseridSummary(ctx context.Context, userId string) ApiGetNotificationsByUseridSummaryRequest {
	return ApiGetNotificationsByUseridSummaryRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return EmbyNotificationsApiNotificationsSummary
func (a *NotificationsServiceAPIService) GetNotificationsByUseridSummaryExecute(r ApiGetNotificationsByUseridSummaryRequest) (*EmbyNotificationsApiNotificationsSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmbyNotificationsApiNotificationsSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationsServiceAPIService.GetNotificationsByUseridSummary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Notifications/{UserId}/Summary"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetNotificationsServicesRequest struct {
	ctx context.Context
	ApiService NotificationsServiceAPI
}

func (r ApiGetNotificationsServicesRequest) Execute() ([]NameIdPair, *http.Response, error) {
	return r.ApiService.GetNotificationsServicesExecute(r)
}

/*
GetNotificationsServices Gets notification types

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetNotificationsServicesRequest
*/
func (a *NotificationsServiceAPIService) GetNotificationsServices(ctx context.Context) ApiGetNotificationsServicesRequest {
	return ApiGetNotificationsServicesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []NameIdPair
func (a *NotificationsServiceAPIService) GetNotificationsServicesExecute(r ApiGetNotificationsServicesRequest) ([]NameIdPair, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []NameIdPair
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationsServiceAPIService.GetNotificationsServices")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Notifications/Services"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetNotificationsTypesRequest struct {
	ctx context.Context
	ApiService NotificationsServiceAPI
}

func (r ApiGetNotificationsTypesRequest) Execute() ([]NotificationsNotificationTypeInfo, *http.Response, error) {
	return r.ApiService.GetNotificationsTypesExecute(r)
}

/*
GetNotificationsTypes Gets notification types

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetNotificationsTypesRequest
*/
func (a *NotificationsServiceAPIService) GetNotificationsTypes(ctx context.Context) ApiGetNotificationsTypesRequest {
	return ApiGetNotificationsTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []NotificationsNotificationTypeInfo
func (a *NotificationsServiceAPIService) GetNotificationsTypesExecute(r ApiGetNotificationsTypesRequest) ([]NotificationsNotificationTypeInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []NotificationsNotificationTypeInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationsServiceAPIService.GetNotificationsTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Notifications/Types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostNotificationsAdminRequest struct {
	ctx context.Context
	ApiService NotificationsServiceAPI
	name *string
	description *string
	imageUrl *string
	url *string
	level *string
}

// The notification&#39;s name
func (r ApiPostNotificationsAdminRequest) Name(name string) ApiPostNotificationsAdminRequest {
	r.name = &name
	return r
}

// The notification&#39;s description
func (r ApiPostNotificationsAdminRequest) Description(description string) ApiPostNotificationsAdminRequest {
	r.description = &description
	return r
}

// The notification&#39;s image url
func (r ApiPostNotificationsAdminRequest) ImageUrl(imageUrl string) ApiPostNotificationsAdminRequest {
	r.imageUrl = &imageUrl
	return r
}

// The notification&#39;s info url
func (r ApiPostNotificationsAdminRequest) Url(url string) ApiPostNotificationsAdminRequest {
	r.url = &url
	return r
}

// The notification level
func (r ApiPostNotificationsAdminRequest) Level(level string) ApiPostNotificationsAdminRequest {
	r.level = &level
	return r
}

func (r ApiPostNotificationsAdminRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostNotificationsAdminExecute(r)
}

/*
PostNotificationsAdmin Sends a notification to all admin users

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostNotificationsAdminRequest
*/
func (a *NotificationsServiceAPIService) PostNotificationsAdmin(ctx context.Context) ApiPostNotificationsAdminRequest {
	return ApiPostNotificationsAdminRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *NotificationsServiceAPIService) PostNotificationsAdminExecute(r ApiPostNotificationsAdminRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationsServiceAPIService.PostNotificationsAdmin")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Notifications/Admin"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.name == nil {
		return nil, reportError("name is required and must be specified")
	}
	if r.description == nil {
		return nil, reportError("description is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Name", r.name, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "Description", r.description, "form", "")
	if r.imageUrl != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageUrl", r.imageUrl, "form", "")
	}
	if r.url != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Url", r.url, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostNotificationsByUseridReadRequest struct {
	ctx context.Context
	ApiService NotificationsServiceAPI
	userId string
	ids *string
}

// A list of notification ids, comma delimited
func (r ApiPostNotificationsByUseridReadRequest) Ids(ids string) ApiPostNotificationsByUseridReadRequest {
	r.ids = &ids
	return r
}

func (r ApiPostNotificationsByUseridReadRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostNotificationsByUseridReadExecute(r)
}

/*
PostNotificationsByUseridRead Marks notifications as read

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @return ApiPostNotificationsByUseridReadRequest
*/
func (a *NotificationsServiceAPIService) PostNotificationsByUseridRead(ctx context.Context, userId string) ApiPostNotificationsByUseridReadRequest {
	return ApiPostNotificationsByUseridReadRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
func (a *NotificationsServiceAPIService) PostNotificationsByUseridReadExecute(r ApiPostNotificationsByUseridReadRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationsServiceAPIService.PostNotificationsByUseridRead")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Notifications/{UserId}/Read"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ids == nil {
		return nil, reportError("ids is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Ids", r.ids, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostNotificationsByUseridUnreadRequest struct {
	ctx context.Context
	ApiService NotificationsServiceAPI
	userId string
	ids *string
}

// A list of notification ids, comma delimited
func (r ApiPostNotificationsByUseridUnreadRequest) Ids(ids string) ApiPostNotificationsByUseridUnreadRequest {
	r.ids = &ids
	return r
}

func (r ApiPostNotificationsByUseridUnreadRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostNotificationsByUseridUnreadExecute(r)
}

/*
PostNotificationsByUseridUnread Marks notifications as unread

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @return ApiPostNotificationsByUseridUnreadRequest
*/
func (a *NotificationsServiceAPIService) PostNotificationsByUseridUnread(ctx context.Context, userId string) ApiPostNotificationsByUseridUnreadRequest {
	return ApiPostNotificationsByUseridUnreadRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
func (a *NotificationsServiceAPIService) PostNotificationsByUseridUnreadExecute(r ApiPostNotificationsByUseridUnreadRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationsServiceAPIService.PostNotificationsByUseridUnread")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Notifications/{UserId}/Unread"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ids == nil {
		return nil, reportError("ids is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Ids", r.ids, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
