/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ItemLookupServiceAPI interface {

	/*
	GetItemsByIdExternalidinfos Gets external id infos for an item

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@return ApiGetItemsByIdExternalidinfosRequest
	*/
	GetItemsByIdExternalidinfos(ctx context.Context, id string) ApiGetItemsByIdExternalidinfosRequest

	// GetItemsByIdExternalidinfosExecute executes the request
	//  @return []ExternalIdInfo
	GetItemsByIdExternalidinfosExecute(r ApiGetItemsByIdExternalidinfosRequest) ([]ExternalIdInfo, *http.Response, error)

	/*
	GetItemsRemotesearchImage Gets a remote image

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetItemsRemotesearchImageRequest
	*/
	GetItemsRemotesearchImage(ctx context.Context) ApiGetItemsRemotesearchImageRequest

	// GetItemsRemotesearchImageExecute executes the request
	GetItemsRemotesearchImageExecute(r ApiGetItemsRemotesearchImageRequest) (*http.Response, error)

	/*
	PostItemsRemotesearchApplyById Applies search criteria to an item and refreshes metadata

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The item id
	@return ApiPostItemsRemotesearchApplyByIdRequest
	*/
	PostItemsRemotesearchApplyById(ctx context.Context, id string) ApiPostItemsRemotesearchApplyByIdRequest

	// PostItemsRemotesearchApplyByIdExecute executes the request
	PostItemsRemotesearchApplyByIdExecute(r ApiPostItemsRemotesearchApplyByIdRequest) (*http.Response, error)

	/*
	PostItemsRemotesearchBook Method for PostItemsRemotesearchBook

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostItemsRemotesearchBookRequest
	*/
	PostItemsRemotesearchBook(ctx context.Context) ApiPostItemsRemotesearchBookRequest

	// PostItemsRemotesearchBookExecute executes the request
	//  @return []RemoteSearchResult
	PostItemsRemotesearchBookExecute(r ApiPostItemsRemotesearchBookRequest) ([]RemoteSearchResult, *http.Response, error)

	/*
	PostItemsRemotesearchBoxset Method for PostItemsRemotesearchBoxset

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostItemsRemotesearchBoxsetRequest
	*/
	PostItemsRemotesearchBoxset(ctx context.Context) ApiPostItemsRemotesearchBoxsetRequest

	// PostItemsRemotesearchBoxsetExecute executes the request
	//  @return []RemoteSearchResult
	PostItemsRemotesearchBoxsetExecute(r ApiPostItemsRemotesearchBoxsetRequest) ([]RemoteSearchResult, *http.Response, error)

	/*
	PostItemsRemotesearchGame Method for PostItemsRemotesearchGame

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostItemsRemotesearchGameRequest
	*/
	PostItemsRemotesearchGame(ctx context.Context) ApiPostItemsRemotesearchGameRequest

	// PostItemsRemotesearchGameExecute executes the request
	//  @return []RemoteSearchResult
	PostItemsRemotesearchGameExecute(r ApiPostItemsRemotesearchGameRequest) ([]RemoteSearchResult, *http.Response, error)

	/*
	PostItemsRemotesearchMovie Method for PostItemsRemotesearchMovie

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostItemsRemotesearchMovieRequest
	*/
	PostItemsRemotesearchMovie(ctx context.Context) ApiPostItemsRemotesearchMovieRequest

	// PostItemsRemotesearchMovieExecute executes the request
	//  @return []RemoteSearchResult
	PostItemsRemotesearchMovieExecute(r ApiPostItemsRemotesearchMovieRequest) ([]RemoteSearchResult, *http.Response, error)

	/*
	PostItemsRemotesearchMusicalbum Method for PostItemsRemotesearchMusicalbum

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostItemsRemotesearchMusicalbumRequest
	*/
	PostItemsRemotesearchMusicalbum(ctx context.Context) ApiPostItemsRemotesearchMusicalbumRequest

	// PostItemsRemotesearchMusicalbumExecute executes the request
	//  @return []RemoteSearchResult
	PostItemsRemotesearchMusicalbumExecute(r ApiPostItemsRemotesearchMusicalbumRequest) ([]RemoteSearchResult, *http.Response, error)

	/*
	PostItemsRemotesearchMusicartist Method for PostItemsRemotesearchMusicartist

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostItemsRemotesearchMusicartistRequest
	*/
	PostItemsRemotesearchMusicartist(ctx context.Context) ApiPostItemsRemotesearchMusicartistRequest

	// PostItemsRemotesearchMusicartistExecute executes the request
	//  @return []RemoteSearchResult
	PostItemsRemotesearchMusicartistExecute(r ApiPostItemsRemotesearchMusicartistRequest) ([]RemoteSearchResult, *http.Response, error)

	/*
	PostItemsRemotesearchMusicvideo Method for PostItemsRemotesearchMusicvideo

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostItemsRemotesearchMusicvideoRequest
	*/
	PostItemsRemotesearchMusicvideo(ctx context.Context) ApiPostItemsRemotesearchMusicvideoRequest

	// PostItemsRemotesearchMusicvideoExecute executes the request
	//  @return []RemoteSearchResult
	PostItemsRemotesearchMusicvideoExecute(r ApiPostItemsRemotesearchMusicvideoRequest) ([]RemoteSearchResult, *http.Response, error)

	/*
	PostItemsRemotesearchPerson Method for PostItemsRemotesearchPerson

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostItemsRemotesearchPersonRequest
	*/
	PostItemsRemotesearchPerson(ctx context.Context) ApiPostItemsRemotesearchPersonRequest

	// PostItemsRemotesearchPersonExecute executes the request
	//  @return []RemoteSearchResult
	PostItemsRemotesearchPersonExecute(r ApiPostItemsRemotesearchPersonRequest) ([]RemoteSearchResult, *http.Response, error)

	/*
	PostItemsRemotesearchSeries Method for PostItemsRemotesearchSeries

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostItemsRemotesearchSeriesRequest
	*/
	PostItemsRemotesearchSeries(ctx context.Context) ApiPostItemsRemotesearchSeriesRequest

	// PostItemsRemotesearchSeriesExecute executes the request
	//  @return []RemoteSearchResult
	PostItemsRemotesearchSeriesExecute(r ApiPostItemsRemotesearchSeriesRequest) ([]RemoteSearchResult, *http.Response, error)

	/*
	PostItemsRemotesearchTrailer Method for PostItemsRemotesearchTrailer

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostItemsRemotesearchTrailerRequest
	*/
	PostItemsRemotesearchTrailer(ctx context.Context) ApiPostItemsRemotesearchTrailerRequest

	// PostItemsRemotesearchTrailerExecute executes the request
	//  @return []RemoteSearchResult
	PostItemsRemotesearchTrailerExecute(r ApiPostItemsRemotesearchTrailerRequest) ([]RemoteSearchResult, *http.Response, error)
}

// ItemLookupServiceAPIService ItemLookupServiceAPI service
type ItemLookupServiceAPIService service

type ApiGetItemsByIdExternalidinfosRequest struct {
	ctx context.Context
	ApiService ItemLookupServiceAPI
	id string
}

func (r ApiGetItemsByIdExternalidinfosRequest) Execute() ([]ExternalIdInfo, *http.Response, error) {
	return r.ApiService.GetItemsByIdExternalidinfosExecute(r)
}

/*
GetItemsByIdExternalidinfos Gets external id infos for an item

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return ApiGetItemsByIdExternalidinfosRequest
*/
func (a *ItemLookupServiceAPIService) GetItemsByIdExternalidinfos(ctx context.Context, id string) ApiGetItemsByIdExternalidinfosRequest {
	return ApiGetItemsByIdExternalidinfosRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []ExternalIdInfo
func (a *ItemLookupServiceAPIService) GetItemsByIdExternalidinfosExecute(r ApiGetItemsByIdExternalidinfosRequest) ([]ExternalIdInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ExternalIdInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemLookupServiceAPIService.GetItemsByIdExternalidinfos")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/ExternalIdInfos"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetItemsRemotesearchImageRequest struct {
	ctx context.Context
	ApiService ItemLookupServiceAPI
	imageUrl *string
	providerName *string
}

// The image url
func (r ApiGetItemsRemotesearchImageRequest) ImageUrl(imageUrl string) ApiGetItemsRemotesearchImageRequest {
	r.imageUrl = &imageUrl
	return r
}

func (r ApiGetItemsRemotesearchImageRequest) ProviderName(providerName string) ApiGetItemsRemotesearchImageRequest {
	r.providerName = &providerName
	return r
}

func (r ApiGetItemsRemotesearchImageRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetItemsRemotesearchImageExecute(r)
}

/*
GetItemsRemotesearchImage Gets a remote image

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetItemsRemotesearchImageRequest
*/
func (a *ItemLookupServiceAPIService) GetItemsRemotesearchImage(ctx context.Context) ApiGetItemsRemotesearchImageRequest {
	return ApiGetItemsRemotesearchImageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ItemLookupServiceAPIService) GetItemsRemotesearchImageExecute(r ApiGetItemsRemotesearchImageRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemLookupServiceAPIService.GetItemsRemotesearchImage")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/RemoteSearch/Image"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.imageUrl == nil {
		return nil, reportError("imageUrl is required and must be specified")
	}
	if r.providerName == nil {
		return nil, reportError("providerName is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "ImageUrl", r.imageUrl, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "ProviderName", r.providerName, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostItemsRemotesearchApplyByIdRequest struct {
	ctx context.Context
	ApiService ItemLookupServiceAPI
	id string
	remoteSearchResult *RemoteSearchResult
	replaceAllImages *bool
}

// RemoteSearchResult: 
func (r ApiPostItemsRemotesearchApplyByIdRequest) RemoteSearchResult(remoteSearchResult RemoteSearchResult) ApiPostItemsRemotesearchApplyByIdRequest {
	r.remoteSearchResult = &remoteSearchResult
	return r
}

// Whether or not to replace all images
func (r ApiPostItemsRemotesearchApplyByIdRequest) ReplaceAllImages(replaceAllImages bool) ApiPostItemsRemotesearchApplyByIdRequest {
	r.replaceAllImages = &replaceAllImages
	return r
}

func (r ApiPostItemsRemotesearchApplyByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostItemsRemotesearchApplyByIdExecute(r)
}

/*
PostItemsRemotesearchApplyById Applies search criteria to an item and refreshes metadata

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The item id
 @return ApiPostItemsRemotesearchApplyByIdRequest
*/
func (a *ItemLookupServiceAPIService) PostItemsRemotesearchApplyById(ctx context.Context, id string) ApiPostItemsRemotesearchApplyByIdRequest {
	return ApiPostItemsRemotesearchApplyByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ItemLookupServiceAPIService) PostItemsRemotesearchApplyByIdExecute(r ApiPostItemsRemotesearchApplyByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemLookupServiceAPIService.PostItemsRemotesearchApplyById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/RemoteSearch/Apply/{Id}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.remoteSearchResult == nil {
		return nil, reportError("remoteSearchResult is required and must be specified")
	}

	if r.replaceAllImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ReplaceAllImages", r.replaceAllImages, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.remoteSearchResult
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostItemsRemotesearchBookRequest struct {
	ctx context.Context
	ApiService ItemLookupServiceAPI
	providersRemoteSearchQueryProvidersBookInfo *ProvidersRemoteSearchQueryProvidersBookInfo
}

// RemoteSearchQuery&#x60;1: 
func (r ApiPostItemsRemotesearchBookRequest) ProvidersRemoteSearchQueryProvidersBookInfo(providersRemoteSearchQueryProvidersBookInfo ProvidersRemoteSearchQueryProvidersBookInfo) ApiPostItemsRemotesearchBookRequest {
	r.providersRemoteSearchQueryProvidersBookInfo = &providersRemoteSearchQueryProvidersBookInfo
	return r
}

func (r ApiPostItemsRemotesearchBookRequest) Execute() ([]RemoteSearchResult, *http.Response, error) {
	return r.ApiService.PostItemsRemotesearchBookExecute(r)
}

/*
PostItemsRemotesearchBook Method for PostItemsRemotesearchBook

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostItemsRemotesearchBookRequest
*/
func (a *ItemLookupServiceAPIService) PostItemsRemotesearchBook(ctx context.Context) ApiPostItemsRemotesearchBookRequest {
	return ApiPostItemsRemotesearchBookRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []RemoteSearchResult
func (a *ItemLookupServiceAPIService) PostItemsRemotesearchBookExecute(r ApiPostItemsRemotesearchBookRequest) ([]RemoteSearchResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RemoteSearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemLookupServiceAPIService.PostItemsRemotesearchBook")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/RemoteSearch/Book"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.providersRemoteSearchQueryProvidersBookInfo == nil {
		return localVarReturnValue, nil, reportError("providersRemoteSearchQueryProvidersBookInfo is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.providersRemoteSearchQueryProvidersBookInfo
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostItemsRemotesearchBoxsetRequest struct {
	ctx context.Context
	ApiService ItemLookupServiceAPI
	providersRemoteSearchQueryProvidersBoxSetInfo *ProvidersRemoteSearchQueryProvidersBoxSetInfo
}

// RemoteSearchQuery&#x60;1: 
func (r ApiPostItemsRemotesearchBoxsetRequest) ProvidersRemoteSearchQueryProvidersBoxSetInfo(providersRemoteSearchQueryProvidersBoxSetInfo ProvidersRemoteSearchQueryProvidersBoxSetInfo) ApiPostItemsRemotesearchBoxsetRequest {
	r.providersRemoteSearchQueryProvidersBoxSetInfo = &providersRemoteSearchQueryProvidersBoxSetInfo
	return r
}

func (r ApiPostItemsRemotesearchBoxsetRequest) Execute() ([]RemoteSearchResult, *http.Response, error) {
	return r.ApiService.PostItemsRemotesearchBoxsetExecute(r)
}

/*
PostItemsRemotesearchBoxset Method for PostItemsRemotesearchBoxset

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostItemsRemotesearchBoxsetRequest
*/
func (a *ItemLookupServiceAPIService) PostItemsRemotesearchBoxset(ctx context.Context) ApiPostItemsRemotesearchBoxsetRequest {
	return ApiPostItemsRemotesearchBoxsetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []RemoteSearchResult
func (a *ItemLookupServiceAPIService) PostItemsRemotesearchBoxsetExecute(r ApiPostItemsRemotesearchBoxsetRequest) ([]RemoteSearchResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RemoteSearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemLookupServiceAPIService.PostItemsRemotesearchBoxset")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/RemoteSearch/BoxSet"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.providersRemoteSearchQueryProvidersBoxSetInfo == nil {
		return localVarReturnValue, nil, reportError("providersRemoteSearchQueryProvidersBoxSetInfo is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.providersRemoteSearchQueryProvidersBoxSetInfo
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostItemsRemotesearchGameRequest struct {
	ctx context.Context
	ApiService ItemLookupServiceAPI
	providersRemoteSearchQueryProvidersGameInfo *ProvidersRemoteSearchQueryProvidersGameInfo
}

// RemoteSearchQuery&#x60;1: 
func (r ApiPostItemsRemotesearchGameRequest) ProvidersRemoteSearchQueryProvidersGameInfo(providersRemoteSearchQueryProvidersGameInfo ProvidersRemoteSearchQueryProvidersGameInfo) ApiPostItemsRemotesearchGameRequest {
	r.providersRemoteSearchQueryProvidersGameInfo = &providersRemoteSearchQueryProvidersGameInfo
	return r
}

func (r ApiPostItemsRemotesearchGameRequest) Execute() ([]RemoteSearchResult, *http.Response, error) {
	return r.ApiService.PostItemsRemotesearchGameExecute(r)
}

/*
PostItemsRemotesearchGame Method for PostItemsRemotesearchGame

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostItemsRemotesearchGameRequest
*/
func (a *ItemLookupServiceAPIService) PostItemsRemotesearchGame(ctx context.Context) ApiPostItemsRemotesearchGameRequest {
	return ApiPostItemsRemotesearchGameRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []RemoteSearchResult
func (a *ItemLookupServiceAPIService) PostItemsRemotesearchGameExecute(r ApiPostItemsRemotesearchGameRequest) ([]RemoteSearchResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RemoteSearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemLookupServiceAPIService.PostItemsRemotesearchGame")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/RemoteSearch/Game"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.providersRemoteSearchQueryProvidersGameInfo == nil {
		return localVarReturnValue, nil, reportError("providersRemoteSearchQueryProvidersGameInfo is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.providersRemoteSearchQueryProvidersGameInfo
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostItemsRemotesearchMovieRequest struct {
	ctx context.Context
	ApiService ItemLookupServiceAPI
	providersRemoteSearchQueryProvidersMovieInfo *ProvidersRemoteSearchQueryProvidersMovieInfo
}

// RemoteSearchQuery&#x60;1: 
func (r ApiPostItemsRemotesearchMovieRequest) ProvidersRemoteSearchQueryProvidersMovieInfo(providersRemoteSearchQueryProvidersMovieInfo ProvidersRemoteSearchQueryProvidersMovieInfo) ApiPostItemsRemotesearchMovieRequest {
	r.providersRemoteSearchQueryProvidersMovieInfo = &providersRemoteSearchQueryProvidersMovieInfo
	return r
}

func (r ApiPostItemsRemotesearchMovieRequest) Execute() ([]RemoteSearchResult, *http.Response, error) {
	return r.ApiService.PostItemsRemotesearchMovieExecute(r)
}

/*
PostItemsRemotesearchMovie Method for PostItemsRemotesearchMovie

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostItemsRemotesearchMovieRequest
*/
func (a *ItemLookupServiceAPIService) PostItemsRemotesearchMovie(ctx context.Context) ApiPostItemsRemotesearchMovieRequest {
	return ApiPostItemsRemotesearchMovieRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []RemoteSearchResult
func (a *ItemLookupServiceAPIService) PostItemsRemotesearchMovieExecute(r ApiPostItemsRemotesearchMovieRequest) ([]RemoteSearchResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RemoteSearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemLookupServiceAPIService.PostItemsRemotesearchMovie")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/RemoteSearch/Movie"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.providersRemoteSearchQueryProvidersMovieInfo == nil {
		return localVarReturnValue, nil, reportError("providersRemoteSearchQueryProvidersMovieInfo is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.providersRemoteSearchQueryProvidersMovieInfo
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostItemsRemotesearchMusicalbumRequest struct {
	ctx context.Context
	ApiService ItemLookupServiceAPI
	providersRemoteSearchQueryProvidersAlbumInfo *ProvidersRemoteSearchQueryProvidersAlbumInfo
}

// RemoteSearchQuery&#x60;1: 
func (r ApiPostItemsRemotesearchMusicalbumRequest) ProvidersRemoteSearchQueryProvidersAlbumInfo(providersRemoteSearchQueryProvidersAlbumInfo ProvidersRemoteSearchQueryProvidersAlbumInfo) ApiPostItemsRemotesearchMusicalbumRequest {
	r.providersRemoteSearchQueryProvidersAlbumInfo = &providersRemoteSearchQueryProvidersAlbumInfo
	return r
}

func (r ApiPostItemsRemotesearchMusicalbumRequest) Execute() ([]RemoteSearchResult, *http.Response, error) {
	return r.ApiService.PostItemsRemotesearchMusicalbumExecute(r)
}

/*
PostItemsRemotesearchMusicalbum Method for PostItemsRemotesearchMusicalbum

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostItemsRemotesearchMusicalbumRequest
*/
func (a *ItemLookupServiceAPIService) PostItemsRemotesearchMusicalbum(ctx context.Context) ApiPostItemsRemotesearchMusicalbumRequest {
	return ApiPostItemsRemotesearchMusicalbumRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []RemoteSearchResult
func (a *ItemLookupServiceAPIService) PostItemsRemotesearchMusicalbumExecute(r ApiPostItemsRemotesearchMusicalbumRequest) ([]RemoteSearchResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RemoteSearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemLookupServiceAPIService.PostItemsRemotesearchMusicalbum")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/RemoteSearch/MusicAlbum"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.providersRemoteSearchQueryProvidersAlbumInfo == nil {
		return localVarReturnValue, nil, reportError("providersRemoteSearchQueryProvidersAlbumInfo is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.providersRemoteSearchQueryProvidersAlbumInfo
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostItemsRemotesearchMusicartistRequest struct {
	ctx context.Context
	ApiService ItemLookupServiceAPI
	providersRemoteSearchQueryProvidersArtistInfo *ProvidersRemoteSearchQueryProvidersArtistInfo
}

// RemoteSearchQuery&#x60;1: 
func (r ApiPostItemsRemotesearchMusicartistRequest) ProvidersRemoteSearchQueryProvidersArtistInfo(providersRemoteSearchQueryProvidersArtistInfo ProvidersRemoteSearchQueryProvidersArtistInfo) ApiPostItemsRemotesearchMusicartistRequest {
	r.providersRemoteSearchQueryProvidersArtistInfo = &providersRemoteSearchQueryProvidersArtistInfo
	return r
}

func (r ApiPostItemsRemotesearchMusicartistRequest) Execute() ([]RemoteSearchResult, *http.Response, error) {
	return r.ApiService.PostItemsRemotesearchMusicartistExecute(r)
}

/*
PostItemsRemotesearchMusicartist Method for PostItemsRemotesearchMusicartist

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostItemsRemotesearchMusicartistRequest
*/
func (a *ItemLookupServiceAPIService) PostItemsRemotesearchMusicartist(ctx context.Context) ApiPostItemsRemotesearchMusicartistRequest {
	return ApiPostItemsRemotesearchMusicartistRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []RemoteSearchResult
func (a *ItemLookupServiceAPIService) PostItemsRemotesearchMusicartistExecute(r ApiPostItemsRemotesearchMusicartistRequest) ([]RemoteSearchResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RemoteSearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemLookupServiceAPIService.PostItemsRemotesearchMusicartist")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/RemoteSearch/MusicArtist"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.providersRemoteSearchQueryProvidersArtistInfo == nil {
		return localVarReturnValue, nil, reportError("providersRemoteSearchQueryProvidersArtistInfo is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.providersRemoteSearchQueryProvidersArtistInfo
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostItemsRemotesearchMusicvideoRequest struct {
	ctx context.Context
	ApiService ItemLookupServiceAPI
	providersRemoteSearchQueryProvidersMusicVideoInfo *ProvidersRemoteSearchQueryProvidersMusicVideoInfo
}

// RemoteSearchQuery&#x60;1: 
func (r ApiPostItemsRemotesearchMusicvideoRequest) ProvidersRemoteSearchQueryProvidersMusicVideoInfo(providersRemoteSearchQueryProvidersMusicVideoInfo ProvidersRemoteSearchQueryProvidersMusicVideoInfo) ApiPostItemsRemotesearchMusicvideoRequest {
	r.providersRemoteSearchQueryProvidersMusicVideoInfo = &providersRemoteSearchQueryProvidersMusicVideoInfo
	return r
}

func (r ApiPostItemsRemotesearchMusicvideoRequest) Execute() ([]RemoteSearchResult, *http.Response, error) {
	return r.ApiService.PostItemsRemotesearchMusicvideoExecute(r)
}

/*
PostItemsRemotesearchMusicvideo Method for PostItemsRemotesearchMusicvideo

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostItemsRemotesearchMusicvideoRequest
*/
func (a *ItemLookupServiceAPIService) PostItemsRemotesearchMusicvideo(ctx context.Context) ApiPostItemsRemotesearchMusicvideoRequest {
	return ApiPostItemsRemotesearchMusicvideoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []RemoteSearchResult
func (a *ItemLookupServiceAPIService) PostItemsRemotesearchMusicvideoExecute(r ApiPostItemsRemotesearchMusicvideoRequest) ([]RemoteSearchResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RemoteSearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemLookupServiceAPIService.PostItemsRemotesearchMusicvideo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/RemoteSearch/MusicVideo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.providersRemoteSearchQueryProvidersMusicVideoInfo == nil {
		return localVarReturnValue, nil, reportError("providersRemoteSearchQueryProvidersMusicVideoInfo is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.providersRemoteSearchQueryProvidersMusicVideoInfo
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostItemsRemotesearchPersonRequest struct {
	ctx context.Context
	ApiService ItemLookupServiceAPI
	providersRemoteSearchQueryProvidersPersonLookupInfo *ProvidersRemoteSearchQueryProvidersPersonLookupInfo
}

// RemoteSearchQuery&#x60;1: 
func (r ApiPostItemsRemotesearchPersonRequest) ProvidersRemoteSearchQueryProvidersPersonLookupInfo(providersRemoteSearchQueryProvidersPersonLookupInfo ProvidersRemoteSearchQueryProvidersPersonLookupInfo) ApiPostItemsRemotesearchPersonRequest {
	r.providersRemoteSearchQueryProvidersPersonLookupInfo = &providersRemoteSearchQueryProvidersPersonLookupInfo
	return r
}

func (r ApiPostItemsRemotesearchPersonRequest) Execute() ([]RemoteSearchResult, *http.Response, error) {
	return r.ApiService.PostItemsRemotesearchPersonExecute(r)
}

/*
PostItemsRemotesearchPerson Method for PostItemsRemotesearchPerson

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostItemsRemotesearchPersonRequest
*/
func (a *ItemLookupServiceAPIService) PostItemsRemotesearchPerson(ctx context.Context) ApiPostItemsRemotesearchPersonRequest {
	return ApiPostItemsRemotesearchPersonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []RemoteSearchResult
func (a *ItemLookupServiceAPIService) PostItemsRemotesearchPersonExecute(r ApiPostItemsRemotesearchPersonRequest) ([]RemoteSearchResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RemoteSearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemLookupServiceAPIService.PostItemsRemotesearchPerson")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/RemoteSearch/Person"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.providersRemoteSearchQueryProvidersPersonLookupInfo == nil {
		return localVarReturnValue, nil, reportError("providersRemoteSearchQueryProvidersPersonLookupInfo is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.providersRemoteSearchQueryProvidersPersonLookupInfo
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostItemsRemotesearchSeriesRequest struct {
	ctx context.Context
	ApiService ItemLookupServiceAPI
	providersRemoteSearchQueryProvidersSeriesInfo *ProvidersRemoteSearchQueryProvidersSeriesInfo
}

// RemoteSearchQuery&#x60;1: 
func (r ApiPostItemsRemotesearchSeriesRequest) ProvidersRemoteSearchQueryProvidersSeriesInfo(providersRemoteSearchQueryProvidersSeriesInfo ProvidersRemoteSearchQueryProvidersSeriesInfo) ApiPostItemsRemotesearchSeriesRequest {
	r.providersRemoteSearchQueryProvidersSeriesInfo = &providersRemoteSearchQueryProvidersSeriesInfo
	return r
}

func (r ApiPostItemsRemotesearchSeriesRequest) Execute() ([]RemoteSearchResult, *http.Response, error) {
	return r.ApiService.PostItemsRemotesearchSeriesExecute(r)
}

/*
PostItemsRemotesearchSeries Method for PostItemsRemotesearchSeries

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostItemsRemotesearchSeriesRequest
*/
func (a *ItemLookupServiceAPIService) PostItemsRemotesearchSeries(ctx context.Context) ApiPostItemsRemotesearchSeriesRequest {
	return ApiPostItemsRemotesearchSeriesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []RemoteSearchResult
func (a *ItemLookupServiceAPIService) PostItemsRemotesearchSeriesExecute(r ApiPostItemsRemotesearchSeriesRequest) ([]RemoteSearchResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RemoteSearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemLookupServiceAPIService.PostItemsRemotesearchSeries")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/RemoteSearch/Series"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.providersRemoteSearchQueryProvidersSeriesInfo == nil {
		return localVarReturnValue, nil, reportError("providersRemoteSearchQueryProvidersSeriesInfo is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.providersRemoteSearchQueryProvidersSeriesInfo
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostItemsRemotesearchTrailerRequest struct {
	ctx context.Context
	ApiService ItemLookupServiceAPI
	providersRemoteSearchQueryProvidersTrailerInfo *ProvidersRemoteSearchQueryProvidersTrailerInfo
}

// RemoteSearchQuery&#x60;1: 
func (r ApiPostItemsRemotesearchTrailerRequest) ProvidersRemoteSearchQueryProvidersTrailerInfo(providersRemoteSearchQueryProvidersTrailerInfo ProvidersRemoteSearchQueryProvidersTrailerInfo) ApiPostItemsRemotesearchTrailerRequest {
	r.providersRemoteSearchQueryProvidersTrailerInfo = &providersRemoteSearchQueryProvidersTrailerInfo
	return r
}

func (r ApiPostItemsRemotesearchTrailerRequest) Execute() ([]RemoteSearchResult, *http.Response, error) {
	return r.ApiService.PostItemsRemotesearchTrailerExecute(r)
}

/*
PostItemsRemotesearchTrailer Method for PostItemsRemotesearchTrailer

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostItemsRemotesearchTrailerRequest
*/
func (a *ItemLookupServiceAPIService) PostItemsRemotesearchTrailer(ctx context.Context) ApiPostItemsRemotesearchTrailerRequest {
	return ApiPostItemsRemotesearchTrailerRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []RemoteSearchResult
func (a *ItemLookupServiceAPIService) PostItemsRemotesearchTrailerExecute(r ApiPostItemsRemotesearchTrailerRequest) ([]RemoteSearchResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RemoteSearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemLookupServiceAPIService.PostItemsRemotesearchTrailer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/RemoteSearch/Trailer"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.providersRemoteSearchQueryProvidersTrailerInfo == nil {
		return localVarReturnValue, nil, reportError("providersRemoteSearchQueryProvidersTrailerInfo is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.providersRemoteSearchQueryProvidersTrailerInfo
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
