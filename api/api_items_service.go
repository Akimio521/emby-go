/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ItemsServiceAPI interface {

	/*
	GetItems Gets items based on a query.

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetItemsRequest
	*/
	GetItems(ctx context.Context) ApiGetItemsRequest

	// GetItemsExecute executes the request
	//  @return QueryResultBaseItemDto
	GetItemsExecute(r ApiGetItemsRequest) (*QueryResultBaseItemDto, *http.Response, error)

	/*
	GetUsersByUseridItems Gets items based on a query.

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId User Id
	@return ApiGetUsersByUseridItemsRequest
	*/
	GetUsersByUseridItems(ctx context.Context, userId string) ApiGetUsersByUseridItemsRequest

	// GetUsersByUseridItemsExecute executes the request
	//  @return QueryResultBaseItemDto
	GetUsersByUseridItemsExecute(r ApiGetUsersByUseridItemsRequest) (*QueryResultBaseItemDto, *http.Response, error)

	/*
	GetUsersByUseridItemsResume Gets items based on a query.

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId User Id
	@return ApiGetUsersByUseridItemsResumeRequest
	*/
	GetUsersByUseridItemsResume(ctx context.Context, userId string) ApiGetUsersByUseridItemsResumeRequest

	// GetUsersByUseridItemsResumeExecute executes the request
	//  @return QueryResultBaseItemDto
	GetUsersByUseridItemsResumeExecute(r ApiGetUsersByUseridItemsResumeRequest) (*QueryResultBaseItemDto, *http.Response, error)
}

// ItemsServiceAPIService ItemsServiceAPI service
type ItemsServiceAPIService service

type ApiGetItemsRequest struct {
	ctx context.Context
	ApiService ItemsServiceAPI
	artistType *string
	maxOfficialRating *string
	hasThemeSong *bool
	hasThemeVideo *bool
	hasSubtitles *bool
	hasSpecialFeature *bool
	hasTrailer *bool
	adjacentTo *string
	minIndexNumber *int32
	minPlayers *int32
	maxPlayers *int32
	parentIndexNumber *int32
	hasParentalRating *bool
	isHD *bool
	locationTypes *string
	excludeLocationTypes *string
	isMissing *bool
	isUnaired *bool
	minCommunityRating *float64
	minCriticRating *float64
	airedDuringSeason *int32
	minPremiereDate *string
	minDateLastSaved *string
	minDateLastSavedForUser *string
	maxPremiereDate *string
	hasOverview *bool
	hasImdbId *bool
	hasTmdbId *bool
	hasTvdbId *bool
	excludeItemIds *string
	startIndex *int32
	limit *int32
	recursive *bool
	sortOrder *string
	parentId *string
	fields *string
	excludeItemTypes *string
	includeItemTypes *string
	anyProviderIdEquals *string
	filters *string
	isFavorite *bool
	isMovie *bool
	isSeries *bool
	isNews *bool
	isKids *bool
	isSports *bool
	mediaTypes *string
	imageTypes *string
	sortBy *string
	isPlayed *bool
	genres *string
	officialRatings *string
	tags *string
	years *string
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *string
	person *string
	personIds *string
	personTypes *string
	studios *string
	studioIds *string
	artists *string
	artistIds *string
	albums *string
	ids *string
	videoTypes *string
	containers *string
	audioCodecs *string
	videoCodecs *string
	subtitleCodecs *string
	path *string
	userId *string
	minOfficialRating *string
	isLocked *bool
	isPlaceHolder *bool
	hasOfficialRating *bool
	groupItemsIntoCollections *bool
	is3D *bool
	seriesStatus *string
	nameStartsWithOrGreater *string
	nameStartsWith *string
	nameLessThan *string
}

// Artist or AlbumArtist
func (r ApiGetItemsRequest) ArtistType(artistType string) ApiGetItemsRequest {
	r.artistType = &artistType
	return r
}

// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
func (r ApiGetItemsRequest) MaxOfficialRating(maxOfficialRating string) ApiGetItemsRequest {
	r.maxOfficialRating = &maxOfficialRating
	return r
}

// Optional filter by items with theme songs.
func (r ApiGetItemsRequest) HasThemeSong(hasThemeSong bool) ApiGetItemsRequest {
	r.hasThemeSong = &hasThemeSong
	return r
}

// Optional filter by items with theme videos.
func (r ApiGetItemsRequest) HasThemeVideo(hasThemeVideo bool) ApiGetItemsRequest {
	r.hasThemeVideo = &hasThemeVideo
	return r
}

// Optional filter by items with subtitles.
func (r ApiGetItemsRequest) HasSubtitles(hasSubtitles bool) ApiGetItemsRequest {
	r.hasSubtitles = &hasSubtitles
	return r
}

// Optional filter by items with special features.
func (r ApiGetItemsRequest) HasSpecialFeature(hasSpecialFeature bool) ApiGetItemsRequest {
	r.hasSpecialFeature = &hasSpecialFeature
	return r
}

// Optional filter by items with trailers.
func (r ApiGetItemsRequest) HasTrailer(hasTrailer bool) ApiGetItemsRequest {
	r.hasTrailer = &hasTrailer
	return r
}

// Optional. Return items that are siblings of a supplied item.
func (r ApiGetItemsRequest) AdjacentTo(adjacentTo string) ApiGetItemsRequest {
	r.adjacentTo = &adjacentTo
	return r
}

// Optional filter by minimum index number.
func (r ApiGetItemsRequest) MinIndexNumber(minIndexNumber int32) ApiGetItemsRequest {
	r.minIndexNumber = &minIndexNumber
	return r
}

// Optional filter by minimum number of game players.
func (r ApiGetItemsRequest) MinPlayers(minPlayers int32) ApiGetItemsRequest {
	r.minPlayers = &minPlayers
	return r
}

// Optional filter by maximum number of game players.
func (r ApiGetItemsRequest) MaxPlayers(maxPlayers int32) ApiGetItemsRequest {
	r.maxPlayers = &maxPlayers
	return r
}

// Optional filter by parent index number.
func (r ApiGetItemsRequest) ParentIndexNumber(parentIndexNumber int32) ApiGetItemsRequest {
	r.parentIndexNumber = &parentIndexNumber
	return r
}

// Optional filter by items that have or do not have a parental rating
func (r ApiGetItemsRequest) HasParentalRating(hasParentalRating bool) ApiGetItemsRequest {
	r.hasParentalRating = &hasParentalRating
	return r
}

// Optional filter by items that are HD or not.
func (r ApiGetItemsRequest) IsHD(isHD bool) ApiGetItemsRequest {
	r.isHD = &isHD
	return r
}

// Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
func (r ApiGetItemsRequest) LocationTypes(locationTypes string) ApiGetItemsRequest {
	r.locationTypes = &locationTypes
	return r
}

// Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
func (r ApiGetItemsRequest) ExcludeLocationTypes(excludeLocationTypes string) ApiGetItemsRequest {
	r.excludeLocationTypes = &excludeLocationTypes
	return r
}

// Optional filter by items that are missing episodes or not.
func (r ApiGetItemsRequest) IsMissing(isMissing bool) ApiGetItemsRequest {
	r.isMissing = &isMissing
	return r
}

// Optional filter by items that are unaired episodes or not.
func (r ApiGetItemsRequest) IsUnaired(isUnaired bool) ApiGetItemsRequest {
	r.isUnaired = &isUnaired
	return r
}

// Optional filter by minimum community rating.
func (r ApiGetItemsRequest) MinCommunityRating(minCommunityRating float64) ApiGetItemsRequest {
	r.minCommunityRating = &minCommunityRating
	return r
}

// Optional filter by minimum critic rating.
func (r ApiGetItemsRequest) MinCriticRating(minCriticRating float64) ApiGetItemsRequest {
	r.minCriticRating = &minCriticRating
	return r
}

// Gets all episodes that aired during a season, including specials.
func (r ApiGetItemsRequest) AiredDuringSeason(airedDuringSeason int32) ApiGetItemsRequest {
	r.airedDuringSeason = &airedDuringSeason
	return r
}

// Optional. The minimum premiere date. Format &#x3D; ISO
func (r ApiGetItemsRequest) MinPremiereDate(minPremiereDate string) ApiGetItemsRequest {
	r.minPremiereDate = &minPremiereDate
	return r
}

// Optional. The minimum premiere date. Format &#x3D; ISO
func (r ApiGetItemsRequest) MinDateLastSaved(minDateLastSaved string) ApiGetItemsRequest {
	r.minDateLastSaved = &minDateLastSaved
	return r
}

// Optional. The minimum premiere date. Format &#x3D; ISO
func (r ApiGetItemsRequest) MinDateLastSavedForUser(minDateLastSavedForUser string) ApiGetItemsRequest {
	r.minDateLastSavedForUser = &minDateLastSavedForUser
	return r
}

// Optional. The maximum premiere date. Format &#x3D; ISO
func (r ApiGetItemsRequest) MaxPremiereDate(maxPremiereDate string) ApiGetItemsRequest {
	r.maxPremiereDate = &maxPremiereDate
	return r
}

// Optional filter by items that have an overview or not.
func (r ApiGetItemsRequest) HasOverview(hasOverview bool) ApiGetItemsRequest {
	r.hasOverview = &hasOverview
	return r
}

// Optional filter by items that have an imdb id or not.
func (r ApiGetItemsRequest) HasImdbId(hasImdbId bool) ApiGetItemsRequest {
	r.hasImdbId = &hasImdbId
	return r
}

// Optional filter by items that have a tmdb id or not.
func (r ApiGetItemsRequest) HasTmdbId(hasTmdbId bool) ApiGetItemsRequest {
	r.hasTmdbId = &hasTmdbId
	return r
}

// Optional filter by items that have a tvdb id or not.
func (r ApiGetItemsRequest) HasTvdbId(hasTvdbId bool) ApiGetItemsRequest {
	r.hasTvdbId = &hasTvdbId
	return r
}

// Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
func (r ApiGetItemsRequest) ExcludeItemIds(excludeItemIds string) ApiGetItemsRequest {
	r.excludeItemIds = &excludeItemIds
	return r
}

// Optional. The record index to start at. All items with a lower index will be dropped from the results.
func (r ApiGetItemsRequest) StartIndex(startIndex int32) ApiGetItemsRequest {
	r.startIndex = &startIndex
	return r
}

// Optional. The maximum number of records to return
func (r ApiGetItemsRequest) Limit(limit int32) ApiGetItemsRequest {
	r.limit = &limit
	return r
}

// When searching within folders, this determines whether or not the search will be recursive. true/false
func (r ApiGetItemsRequest) Recursive(recursive bool) ApiGetItemsRequest {
	r.recursive = &recursive
	return r
}

// Sort Order - Ascending,Descending
func (r ApiGetItemsRequest) SortOrder(sortOrder string) ApiGetItemsRequest {
	r.sortOrder = &sortOrder
	return r
}

// Specify this to localize the search to a specific item or folder. Omit to use the root
func (r ApiGetItemsRequest) ParentId(parentId string) ApiGetItemsRequest {
	r.parentId = &parentId
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
func (r ApiGetItemsRequest) Fields(fields string) ApiGetItemsRequest {
	r.fields = &fields
	return r
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r ApiGetItemsRequest) ExcludeItemTypes(excludeItemTypes string) ApiGetItemsRequest {
	r.excludeItemTypes = &excludeItemTypes
	return r
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r ApiGetItemsRequest) IncludeItemTypes(includeItemTypes string) ApiGetItemsRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#39;prov.id&#39;, e.g. &#39;imdb.tt123456&#39;. This allows multiple, comma delimeted value pairs.
func (r ApiGetItemsRequest) AnyProviderIdEquals(anyProviderIdEquals string) ApiGetItemsRequest {
	r.anyProviderIdEquals = &anyProviderIdEquals
	return r
}

// Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
func (r ApiGetItemsRequest) Filters(filters string) ApiGetItemsRequest {
	r.filters = &filters
	return r
}

// Optional filter by items that are marked as favorite, or not.
func (r ApiGetItemsRequest) IsFavorite(isFavorite bool) ApiGetItemsRequest {
	r.isFavorite = &isFavorite
	return r
}

// Optional filter for movies.
func (r ApiGetItemsRequest) IsMovie(isMovie bool) ApiGetItemsRequest {
	r.isMovie = &isMovie
	return r
}

// Optional filter for movies.
func (r ApiGetItemsRequest) IsSeries(isSeries bool) ApiGetItemsRequest {
	r.isSeries = &isSeries
	return r
}

// Optional filter for news.
func (r ApiGetItemsRequest) IsNews(isNews bool) ApiGetItemsRequest {
	r.isNews = &isNews
	return r
}

// Optional filter for kids.
func (r ApiGetItemsRequest) IsKids(isKids bool) ApiGetItemsRequest {
	r.isKids = &isKids
	return r
}

// Optional filter for sports.
func (r ApiGetItemsRequest) IsSports(isSports bool) ApiGetItemsRequest {
	r.isSports = &isSports
	return r
}

// Optional filter by MediaType. Allows multiple, comma delimited.
func (r ApiGetItemsRequest) MediaTypes(mediaTypes string) ApiGetItemsRequest {
	r.mediaTypes = &mediaTypes
	return r
}

// Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
func (r ApiGetItemsRequest) ImageTypes(imageTypes string) ApiGetItemsRequest {
	r.imageTypes = &imageTypes
	return r
}

// Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
func (r ApiGetItemsRequest) SortBy(sortBy string) ApiGetItemsRequest {
	r.sortBy = &sortBy
	return r
}

// Optional filter by items that are played, or not.
func (r ApiGetItemsRequest) IsPlayed(isPlayed bool) ApiGetItemsRequest {
	r.isPlayed = &isPlayed
	return r
}

// Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
func (r ApiGetItemsRequest) Genres(genres string) ApiGetItemsRequest {
	r.genres = &genres
	return r
}

// Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
func (r ApiGetItemsRequest) OfficialRatings(officialRatings string) ApiGetItemsRequest {
	r.officialRatings = &officialRatings
	return r
}

// Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
func (r ApiGetItemsRequest) Tags(tags string) ApiGetItemsRequest {
	r.tags = &tags
	return r
}

// Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
func (r ApiGetItemsRequest) Years(years string) ApiGetItemsRequest {
	r.years = &years
	return r
}

// Optional, include image information in output
func (r ApiGetItemsRequest) EnableImages(enableImages bool) ApiGetItemsRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, include user data
func (r ApiGetItemsRequest) EnableUserData(enableUserData bool) ApiGetItemsRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional, the max number of images to return, per image type
func (r ApiGetItemsRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetItemsRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetItemsRequest) EnableImageTypes(enableImageTypes string) ApiGetItemsRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional. If specified, results will be filtered to include only those containing the specified person.
func (r ApiGetItemsRequest) Person(person string) ApiGetItemsRequest {
	r.person = &person
	return r
}

// Optional. If specified, results will be filtered to include only those containing the specified person.
func (r ApiGetItemsRequest) PersonIds(personIds string) ApiGetItemsRequest {
	r.personIds = &personIds
	return r
}

// Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
func (r ApiGetItemsRequest) PersonTypes(personTypes string) ApiGetItemsRequest {
	r.personTypes = &personTypes
	return r
}

// Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
func (r ApiGetItemsRequest) Studios(studios string) ApiGetItemsRequest {
	r.studios = &studios
	return r
}

// Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
func (r ApiGetItemsRequest) StudioIds(studioIds string) ApiGetItemsRequest {
	r.studioIds = &studioIds
	return r
}

// Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
func (r ApiGetItemsRequest) Artists(artists string) ApiGetItemsRequest {
	r.artists = &artists
	return r
}

// Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
func (r ApiGetItemsRequest) ArtistIds(artistIds string) ApiGetItemsRequest {
	r.artistIds = &artistIds
	return r
}

// Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
func (r ApiGetItemsRequest) Albums(albums string) ApiGetItemsRequest {
	r.albums = &albums
	return r
}

// Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited.
func (r ApiGetItemsRequest) Ids(ids string) ApiGetItemsRequest {
	r.ids = &ids
	return r
}

// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
func (r ApiGetItemsRequest) VideoTypes(videoTypes string) ApiGetItemsRequest {
	r.videoTypes = &videoTypes
	return r
}

// Optional filter by Container. Allows multiple, comma delimeted.
func (r ApiGetItemsRequest) Containers(containers string) ApiGetItemsRequest {
	r.containers = &containers
	return r
}

// Optional filter by AudioCodec. Allows multiple, comma delimeted.
func (r ApiGetItemsRequest) AudioCodecs(audioCodecs string) ApiGetItemsRequest {
	r.audioCodecs = &audioCodecs
	return r
}

// Optional filter by VideoCodec. Allows multiple, comma delimeted.
func (r ApiGetItemsRequest) VideoCodecs(videoCodecs string) ApiGetItemsRequest {
	r.videoCodecs = &videoCodecs
	return r
}

// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
func (r ApiGetItemsRequest) SubtitleCodecs(subtitleCodecs string) ApiGetItemsRequest {
	r.subtitleCodecs = &subtitleCodecs
	return r
}

// Optional filter by Path.
func (r ApiGetItemsRequest) Path(path string) ApiGetItemsRequest {
	r.path = &path
	return r
}

// User Id
func (r ApiGetItemsRequest) UserId(userId string) ApiGetItemsRequest {
	r.userId = &userId
	return r
}

// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
func (r ApiGetItemsRequest) MinOfficialRating(minOfficialRating string) ApiGetItemsRequest {
	r.minOfficialRating = &minOfficialRating
	return r
}

// Optional filter by items that are locked.
func (r ApiGetItemsRequest) IsLocked(isLocked bool) ApiGetItemsRequest {
	r.isLocked = &isLocked
	return r
}

// Optional filter by items that are placeholders
func (r ApiGetItemsRequest) IsPlaceHolder(isPlaceHolder bool) ApiGetItemsRequest {
	r.isPlaceHolder = &isPlaceHolder
	return r
}

// Optional filter by items that have official ratings
func (r ApiGetItemsRequest) HasOfficialRating(hasOfficialRating bool) ApiGetItemsRequest {
	r.hasOfficialRating = &hasOfficialRating
	return r
}

// Whether or not to hide items behind their boxsets.
func (r ApiGetItemsRequest) GroupItemsIntoCollections(groupItemsIntoCollections bool) ApiGetItemsRequest {
	r.groupItemsIntoCollections = &groupItemsIntoCollections
	return r
}

// Optional filter by items that are 3D, or not.
func (r ApiGetItemsRequest) Is3D(is3D bool) ApiGetItemsRequest {
	r.is3D = &is3D
	return r
}

// Optional filter by Series Status. Allows multiple, comma delimeted.
func (r ApiGetItemsRequest) SeriesStatus(seriesStatus string) ApiGetItemsRequest {
	r.seriesStatus = &seriesStatus
	return r
}

// Optional filter by items whose name is sorted equally or greater than a given input string.
func (r ApiGetItemsRequest) NameStartsWithOrGreater(nameStartsWithOrGreater string) ApiGetItemsRequest {
	r.nameStartsWithOrGreater = &nameStartsWithOrGreater
	return r
}

// Optional filter by items whose name is sorted equally than a given input string.
func (r ApiGetItemsRequest) NameStartsWith(nameStartsWith string) ApiGetItemsRequest {
	r.nameStartsWith = &nameStartsWith
	return r
}

// Optional filter by items whose name is equally or lesser than a given input string.
func (r ApiGetItemsRequest) NameLessThan(nameLessThan string) ApiGetItemsRequest {
	r.nameLessThan = &nameLessThan
	return r
}

func (r ApiGetItemsRequest) Execute() (*QueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetItemsExecute(r)
}

/*
GetItems Gets items based on a query.

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetItemsRequest
*/
func (a *ItemsServiceAPIService) GetItems(ctx context.Context) ApiGetItemsRequest {
	return ApiGetItemsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return QueryResultBaseItemDto
func (a *ItemsServiceAPIService) GetItemsExecute(r ApiGetItemsRequest) (*QueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemsServiceAPIService.GetItems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.artistType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ArtistType", r.artistType, "form", "")
	}
	if r.maxOfficialRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxOfficialRating", r.maxOfficialRating, "form", "")
	}
	if r.hasThemeSong != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasThemeSong", r.hasThemeSong, "form", "")
	}
	if r.hasThemeVideo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasThemeVideo", r.hasThemeVideo, "form", "")
	}
	if r.hasSubtitles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasSubtitles", r.hasSubtitles, "form", "")
	}
	if r.hasSpecialFeature != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasSpecialFeature", r.hasSpecialFeature, "form", "")
	}
	if r.hasTrailer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasTrailer", r.hasTrailer, "form", "")
	}
	if r.adjacentTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AdjacentTo", r.adjacentTo, "form", "")
	}
	if r.minIndexNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinIndexNumber", r.minIndexNumber, "form", "")
	}
	if r.minPlayers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinPlayers", r.minPlayers, "form", "")
	}
	if r.maxPlayers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxPlayers", r.maxPlayers, "form", "")
	}
	if r.parentIndexNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ParentIndexNumber", r.parentIndexNumber, "form", "")
	}
	if r.hasParentalRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasParentalRating", r.hasParentalRating, "form", "")
	}
	if r.isHD != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsHD", r.isHD, "form", "")
	}
	if r.locationTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "LocationTypes", r.locationTypes, "form", "")
	}
	if r.excludeLocationTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ExcludeLocationTypes", r.excludeLocationTypes, "form", "")
	}
	if r.isMissing != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsMissing", r.isMissing, "form", "")
	}
	if r.isUnaired != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsUnaired", r.isUnaired, "form", "")
	}
	if r.minCommunityRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinCommunityRating", r.minCommunityRating, "form", "")
	}
	if r.minCriticRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinCriticRating", r.minCriticRating, "form", "")
	}
	if r.airedDuringSeason != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AiredDuringSeason", r.airedDuringSeason, "form", "")
	}
	if r.minPremiereDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinPremiereDate", r.minPremiereDate, "form", "")
	}
	if r.minDateLastSaved != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinDateLastSaved", r.minDateLastSaved, "form", "")
	}
	if r.minDateLastSavedForUser != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinDateLastSavedForUser", r.minDateLastSavedForUser, "form", "")
	}
	if r.maxPremiereDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxPremiereDate", r.maxPremiereDate, "form", "")
	}
	if r.hasOverview != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasOverview", r.hasOverview, "form", "")
	}
	if r.hasImdbId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasImdbId", r.hasImdbId, "form", "")
	}
	if r.hasTmdbId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasTmdbId", r.hasTmdbId, "form", "")
	}
	if r.hasTvdbId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasTvdbId", r.hasTvdbId, "form", "")
	}
	if r.excludeItemIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ExcludeItemIds", r.excludeItemIds, "form", "")
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartIndex", r.startIndex, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "form", "")
	}
	if r.recursive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Recursive", r.recursive, "form", "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortOrder", r.sortOrder, "form", "")
	}
	if r.parentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ParentId", r.parentId, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "form", "")
	}
	if r.excludeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ExcludeItemTypes", r.excludeItemTypes, "form", "")
	}
	if r.includeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeItemTypes", r.includeItemTypes, "form", "")
	}
	if r.anyProviderIdEquals != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AnyProviderIdEquals", r.anyProviderIdEquals, "form", "")
	}
	if r.filters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Filters", r.filters, "form", "")
	}
	if r.isFavorite != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsFavorite", r.isFavorite, "form", "")
	}
	if r.isMovie != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsMovie", r.isMovie, "form", "")
	}
	if r.isSeries != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsSeries", r.isSeries, "form", "")
	}
	if r.isNews != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsNews", r.isNews, "form", "")
	}
	if r.isKids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsKids", r.isKids, "form", "")
	}
	if r.isSports != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsSports", r.isSports, "form", "")
	}
	if r.mediaTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MediaTypes", r.mediaTypes, "form", "")
	}
	if r.imageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypes", r.imageTypes, "form", "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortBy", r.sortBy, "form", "")
	}
	if r.isPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsPlayed", r.isPlayed, "form", "")
	}
	if r.genres != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Genres", r.genres, "form", "")
	}
	if r.officialRatings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "OfficialRatings", r.officialRatings, "form", "")
	}
	if r.tags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tags", r.tags, "form", "")
	}
	if r.years != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Years", r.years, "form", "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "form", "")
	}
	if r.person != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Person", r.person, "form", "")
	}
	if r.personIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PersonIds", r.personIds, "form", "")
	}
	if r.personTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PersonTypes", r.personTypes, "form", "")
	}
	if r.studios != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Studios", r.studios, "form", "")
	}
	if r.studioIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StudioIds", r.studioIds, "form", "")
	}
	if r.artists != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Artists", r.artists, "form", "")
	}
	if r.artistIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ArtistIds", r.artistIds, "form", "")
	}
	if r.albums != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Albums", r.albums, "form", "")
	}
	if r.ids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Ids", r.ids, "form", "")
	}
	if r.videoTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoTypes", r.videoTypes, "form", "")
	}
	if r.containers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Containers", r.containers, "form", "")
	}
	if r.audioCodecs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodecs", r.audioCodecs, "form", "")
	}
	if r.videoCodecs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodecs", r.videoCodecs, "form", "")
	}
	if r.subtitleCodecs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleCodecs", r.subtitleCodecs, "form", "")
	}
	if r.path != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Path", r.path, "form", "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "form", "")
	}
	if r.minOfficialRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinOfficialRating", r.minOfficialRating, "form", "")
	}
	if r.isLocked != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsLocked", r.isLocked, "form", "")
	}
	if r.isPlaceHolder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsPlaceHolder", r.isPlaceHolder, "form", "")
	}
	if r.hasOfficialRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasOfficialRating", r.hasOfficialRating, "form", "")
	}
	if r.groupItemsIntoCollections != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "GroupItemsIntoCollections", r.groupItemsIntoCollections, "form", "")
	}
	if r.is3D != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Is3D", r.is3D, "form", "")
	}
	if r.seriesStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SeriesStatus", r.seriesStatus, "form", "")
	}
	if r.nameStartsWithOrGreater != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "NameStartsWithOrGreater", r.nameStartsWithOrGreater, "form", "")
	}
	if r.nameStartsWith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "NameStartsWith", r.nameStartsWith, "form", "")
	}
	if r.nameLessThan != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "NameLessThan", r.nameLessThan, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUsersByUseridItemsRequest struct {
	ctx context.Context
	ApiService ItemsServiceAPI
	userId string
	artistType *string
	maxOfficialRating *string
	hasThemeSong *bool
	hasThemeVideo *bool
	hasSubtitles *bool
	hasSpecialFeature *bool
	hasTrailer *bool
	adjacentTo *string
	minIndexNumber *int32
	minPlayers *int32
	maxPlayers *int32
	parentIndexNumber *int32
	hasParentalRating *bool
	isHD *bool
	locationTypes *string
	excludeLocationTypes *string
	isMissing *bool
	isUnaired *bool
	minCommunityRating *float64
	minCriticRating *float64
	airedDuringSeason *int32
	minPremiereDate *string
	minDateLastSaved *string
	minDateLastSavedForUser *string
	maxPremiereDate *string
	hasOverview *bool
	hasImdbId *bool
	hasTmdbId *bool
	hasTvdbId *bool
	excludeItemIds *string
	startIndex *int32
	limit *int32
	recursive *bool
	sortOrder *string
	parentId *string
	fields *string
	excludeItemTypes *string
	includeItemTypes *string
	anyProviderIdEquals *string
	filters *string
	isFavorite *bool
	isMovie *bool
	isSeries *bool
	isNews *bool
	isKids *bool
	isSports *bool
	mediaTypes *string
	imageTypes *string
	sortBy *string
	isPlayed *bool
	genres *string
	officialRatings *string
	tags *string
	years *string
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *string
	person *string
	personIds *string
	personTypes *string
	studios *string
	studioIds *string
	artists *string
	artistIds *string
	albums *string
	ids *string
	videoTypes *string
	containers *string
	audioCodecs *string
	videoCodecs *string
	subtitleCodecs *string
	path *string
	minOfficialRating *string
	isLocked *bool
	isPlaceHolder *bool
	hasOfficialRating *bool
	groupItemsIntoCollections *bool
	is3D *bool
	seriesStatus *string
	nameStartsWithOrGreater *string
	nameStartsWith *string
	nameLessThan *string
}

// Artist or AlbumArtist
func (r ApiGetUsersByUseridItemsRequest) ArtistType(artistType string) ApiGetUsersByUseridItemsRequest {
	r.artistType = &artistType
	return r
}

// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
func (r ApiGetUsersByUseridItemsRequest) MaxOfficialRating(maxOfficialRating string) ApiGetUsersByUseridItemsRequest {
	r.maxOfficialRating = &maxOfficialRating
	return r
}

// Optional filter by items with theme songs.
func (r ApiGetUsersByUseridItemsRequest) HasThemeSong(hasThemeSong bool) ApiGetUsersByUseridItemsRequest {
	r.hasThemeSong = &hasThemeSong
	return r
}

// Optional filter by items with theme videos.
func (r ApiGetUsersByUseridItemsRequest) HasThemeVideo(hasThemeVideo bool) ApiGetUsersByUseridItemsRequest {
	r.hasThemeVideo = &hasThemeVideo
	return r
}

// Optional filter by items with subtitles.
func (r ApiGetUsersByUseridItemsRequest) HasSubtitles(hasSubtitles bool) ApiGetUsersByUseridItemsRequest {
	r.hasSubtitles = &hasSubtitles
	return r
}

// Optional filter by items with special features.
func (r ApiGetUsersByUseridItemsRequest) HasSpecialFeature(hasSpecialFeature bool) ApiGetUsersByUseridItemsRequest {
	r.hasSpecialFeature = &hasSpecialFeature
	return r
}

// Optional filter by items with trailers.
func (r ApiGetUsersByUseridItemsRequest) HasTrailer(hasTrailer bool) ApiGetUsersByUseridItemsRequest {
	r.hasTrailer = &hasTrailer
	return r
}

// Optional. Return items that are siblings of a supplied item.
func (r ApiGetUsersByUseridItemsRequest) AdjacentTo(adjacentTo string) ApiGetUsersByUseridItemsRequest {
	r.adjacentTo = &adjacentTo
	return r
}

// Optional filter by minimum index number.
func (r ApiGetUsersByUseridItemsRequest) MinIndexNumber(minIndexNumber int32) ApiGetUsersByUseridItemsRequest {
	r.minIndexNumber = &minIndexNumber
	return r
}

// Optional filter by minimum number of game players.
func (r ApiGetUsersByUseridItemsRequest) MinPlayers(minPlayers int32) ApiGetUsersByUseridItemsRequest {
	r.minPlayers = &minPlayers
	return r
}

// Optional filter by maximum number of game players.
func (r ApiGetUsersByUseridItemsRequest) MaxPlayers(maxPlayers int32) ApiGetUsersByUseridItemsRequest {
	r.maxPlayers = &maxPlayers
	return r
}

// Optional filter by parent index number.
func (r ApiGetUsersByUseridItemsRequest) ParentIndexNumber(parentIndexNumber int32) ApiGetUsersByUseridItemsRequest {
	r.parentIndexNumber = &parentIndexNumber
	return r
}

// Optional filter by items that have or do not have a parental rating
func (r ApiGetUsersByUseridItemsRequest) HasParentalRating(hasParentalRating bool) ApiGetUsersByUseridItemsRequest {
	r.hasParentalRating = &hasParentalRating
	return r
}

// Optional filter by items that are HD or not.
func (r ApiGetUsersByUseridItemsRequest) IsHD(isHD bool) ApiGetUsersByUseridItemsRequest {
	r.isHD = &isHD
	return r
}

// Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
func (r ApiGetUsersByUseridItemsRequest) LocationTypes(locationTypes string) ApiGetUsersByUseridItemsRequest {
	r.locationTypes = &locationTypes
	return r
}

// Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
func (r ApiGetUsersByUseridItemsRequest) ExcludeLocationTypes(excludeLocationTypes string) ApiGetUsersByUseridItemsRequest {
	r.excludeLocationTypes = &excludeLocationTypes
	return r
}

// Optional filter by items that are missing episodes or not.
func (r ApiGetUsersByUseridItemsRequest) IsMissing(isMissing bool) ApiGetUsersByUseridItemsRequest {
	r.isMissing = &isMissing
	return r
}

// Optional filter by items that are unaired episodes or not.
func (r ApiGetUsersByUseridItemsRequest) IsUnaired(isUnaired bool) ApiGetUsersByUseridItemsRequest {
	r.isUnaired = &isUnaired
	return r
}

// Optional filter by minimum community rating.
func (r ApiGetUsersByUseridItemsRequest) MinCommunityRating(minCommunityRating float64) ApiGetUsersByUseridItemsRequest {
	r.minCommunityRating = &minCommunityRating
	return r
}

// Optional filter by minimum critic rating.
func (r ApiGetUsersByUseridItemsRequest) MinCriticRating(minCriticRating float64) ApiGetUsersByUseridItemsRequest {
	r.minCriticRating = &minCriticRating
	return r
}

// Gets all episodes that aired during a season, including specials.
func (r ApiGetUsersByUseridItemsRequest) AiredDuringSeason(airedDuringSeason int32) ApiGetUsersByUseridItemsRequest {
	r.airedDuringSeason = &airedDuringSeason
	return r
}

// Optional. The minimum premiere date. Format &#x3D; ISO
func (r ApiGetUsersByUseridItemsRequest) MinPremiereDate(minPremiereDate string) ApiGetUsersByUseridItemsRequest {
	r.minPremiereDate = &minPremiereDate
	return r
}

// Optional. The minimum premiere date. Format &#x3D; ISO
func (r ApiGetUsersByUseridItemsRequest) MinDateLastSaved(minDateLastSaved string) ApiGetUsersByUseridItemsRequest {
	r.minDateLastSaved = &minDateLastSaved
	return r
}

// Optional. The minimum premiere date. Format &#x3D; ISO
func (r ApiGetUsersByUseridItemsRequest) MinDateLastSavedForUser(minDateLastSavedForUser string) ApiGetUsersByUseridItemsRequest {
	r.minDateLastSavedForUser = &minDateLastSavedForUser
	return r
}

// Optional. The maximum premiere date. Format &#x3D; ISO
func (r ApiGetUsersByUseridItemsRequest) MaxPremiereDate(maxPremiereDate string) ApiGetUsersByUseridItemsRequest {
	r.maxPremiereDate = &maxPremiereDate
	return r
}

// Optional filter by items that have an overview or not.
func (r ApiGetUsersByUseridItemsRequest) HasOverview(hasOverview bool) ApiGetUsersByUseridItemsRequest {
	r.hasOverview = &hasOverview
	return r
}

// Optional filter by items that have an imdb id or not.
func (r ApiGetUsersByUseridItemsRequest) HasImdbId(hasImdbId bool) ApiGetUsersByUseridItemsRequest {
	r.hasImdbId = &hasImdbId
	return r
}

// Optional filter by items that have a tmdb id or not.
func (r ApiGetUsersByUseridItemsRequest) HasTmdbId(hasTmdbId bool) ApiGetUsersByUseridItemsRequest {
	r.hasTmdbId = &hasTmdbId
	return r
}

// Optional filter by items that have a tvdb id or not.
func (r ApiGetUsersByUseridItemsRequest) HasTvdbId(hasTvdbId bool) ApiGetUsersByUseridItemsRequest {
	r.hasTvdbId = &hasTvdbId
	return r
}

// Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
func (r ApiGetUsersByUseridItemsRequest) ExcludeItemIds(excludeItemIds string) ApiGetUsersByUseridItemsRequest {
	r.excludeItemIds = &excludeItemIds
	return r
}

// Optional. The record index to start at. All items with a lower index will be dropped from the results.
func (r ApiGetUsersByUseridItemsRequest) StartIndex(startIndex int32) ApiGetUsersByUseridItemsRequest {
	r.startIndex = &startIndex
	return r
}

// Optional. The maximum number of records to return
func (r ApiGetUsersByUseridItemsRequest) Limit(limit int32) ApiGetUsersByUseridItemsRequest {
	r.limit = &limit
	return r
}

// When searching within folders, this determines whether or not the search will be recursive. true/false
func (r ApiGetUsersByUseridItemsRequest) Recursive(recursive bool) ApiGetUsersByUseridItemsRequest {
	r.recursive = &recursive
	return r
}

// Sort Order - Ascending,Descending
func (r ApiGetUsersByUseridItemsRequest) SortOrder(sortOrder string) ApiGetUsersByUseridItemsRequest {
	r.sortOrder = &sortOrder
	return r
}

// Specify this to localize the search to a specific item or folder. Omit to use the root
func (r ApiGetUsersByUseridItemsRequest) ParentId(parentId string) ApiGetUsersByUseridItemsRequest {
	r.parentId = &parentId
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
func (r ApiGetUsersByUseridItemsRequest) Fields(fields string) ApiGetUsersByUseridItemsRequest {
	r.fields = &fields
	return r
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r ApiGetUsersByUseridItemsRequest) ExcludeItemTypes(excludeItemTypes string) ApiGetUsersByUseridItemsRequest {
	r.excludeItemTypes = &excludeItemTypes
	return r
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r ApiGetUsersByUseridItemsRequest) IncludeItemTypes(includeItemTypes string) ApiGetUsersByUseridItemsRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#39;prov.id&#39;, e.g. &#39;imdb.tt123456&#39;. This allows multiple, comma delimeted value pairs.
func (r ApiGetUsersByUseridItemsRequest) AnyProviderIdEquals(anyProviderIdEquals string) ApiGetUsersByUseridItemsRequest {
	r.anyProviderIdEquals = &anyProviderIdEquals
	return r
}

// Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
func (r ApiGetUsersByUseridItemsRequest) Filters(filters string) ApiGetUsersByUseridItemsRequest {
	r.filters = &filters
	return r
}

// Optional filter by items that are marked as favorite, or not.
func (r ApiGetUsersByUseridItemsRequest) IsFavorite(isFavorite bool) ApiGetUsersByUseridItemsRequest {
	r.isFavorite = &isFavorite
	return r
}

// Optional filter for movies.
func (r ApiGetUsersByUseridItemsRequest) IsMovie(isMovie bool) ApiGetUsersByUseridItemsRequest {
	r.isMovie = &isMovie
	return r
}

// Optional filter for movies.
func (r ApiGetUsersByUseridItemsRequest) IsSeries(isSeries bool) ApiGetUsersByUseridItemsRequest {
	r.isSeries = &isSeries
	return r
}

// Optional filter for news.
func (r ApiGetUsersByUseridItemsRequest) IsNews(isNews bool) ApiGetUsersByUseridItemsRequest {
	r.isNews = &isNews
	return r
}

// Optional filter for kids.
func (r ApiGetUsersByUseridItemsRequest) IsKids(isKids bool) ApiGetUsersByUseridItemsRequest {
	r.isKids = &isKids
	return r
}

// Optional filter for sports.
func (r ApiGetUsersByUseridItemsRequest) IsSports(isSports bool) ApiGetUsersByUseridItemsRequest {
	r.isSports = &isSports
	return r
}

// Optional filter by MediaType. Allows multiple, comma delimited.
func (r ApiGetUsersByUseridItemsRequest) MediaTypes(mediaTypes string) ApiGetUsersByUseridItemsRequest {
	r.mediaTypes = &mediaTypes
	return r
}

// Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
func (r ApiGetUsersByUseridItemsRequest) ImageTypes(imageTypes string) ApiGetUsersByUseridItemsRequest {
	r.imageTypes = &imageTypes
	return r
}

// Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
func (r ApiGetUsersByUseridItemsRequest) SortBy(sortBy string) ApiGetUsersByUseridItemsRequest {
	r.sortBy = &sortBy
	return r
}

// Optional filter by items that are played, or not.
func (r ApiGetUsersByUseridItemsRequest) IsPlayed(isPlayed bool) ApiGetUsersByUseridItemsRequest {
	r.isPlayed = &isPlayed
	return r
}

// Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
func (r ApiGetUsersByUseridItemsRequest) Genres(genres string) ApiGetUsersByUseridItemsRequest {
	r.genres = &genres
	return r
}

// Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
func (r ApiGetUsersByUseridItemsRequest) OfficialRatings(officialRatings string) ApiGetUsersByUseridItemsRequest {
	r.officialRatings = &officialRatings
	return r
}

// Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
func (r ApiGetUsersByUseridItemsRequest) Tags(tags string) ApiGetUsersByUseridItemsRequest {
	r.tags = &tags
	return r
}

// Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
func (r ApiGetUsersByUseridItemsRequest) Years(years string) ApiGetUsersByUseridItemsRequest {
	r.years = &years
	return r
}

// Optional, include image information in output
func (r ApiGetUsersByUseridItemsRequest) EnableImages(enableImages bool) ApiGetUsersByUseridItemsRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, include user data
func (r ApiGetUsersByUseridItemsRequest) EnableUserData(enableUserData bool) ApiGetUsersByUseridItemsRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional, the max number of images to return, per image type
func (r ApiGetUsersByUseridItemsRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetUsersByUseridItemsRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetUsersByUseridItemsRequest) EnableImageTypes(enableImageTypes string) ApiGetUsersByUseridItemsRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional. If specified, results will be filtered to include only those containing the specified person.
func (r ApiGetUsersByUseridItemsRequest) Person(person string) ApiGetUsersByUseridItemsRequest {
	r.person = &person
	return r
}

// Optional. If specified, results will be filtered to include only those containing the specified person.
func (r ApiGetUsersByUseridItemsRequest) PersonIds(personIds string) ApiGetUsersByUseridItemsRequest {
	r.personIds = &personIds
	return r
}

// Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
func (r ApiGetUsersByUseridItemsRequest) PersonTypes(personTypes string) ApiGetUsersByUseridItemsRequest {
	r.personTypes = &personTypes
	return r
}

// Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
func (r ApiGetUsersByUseridItemsRequest) Studios(studios string) ApiGetUsersByUseridItemsRequest {
	r.studios = &studios
	return r
}

// Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
func (r ApiGetUsersByUseridItemsRequest) StudioIds(studioIds string) ApiGetUsersByUseridItemsRequest {
	r.studioIds = &studioIds
	return r
}

// Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
func (r ApiGetUsersByUseridItemsRequest) Artists(artists string) ApiGetUsersByUseridItemsRequest {
	r.artists = &artists
	return r
}

// Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
func (r ApiGetUsersByUseridItemsRequest) ArtistIds(artistIds string) ApiGetUsersByUseridItemsRequest {
	r.artistIds = &artistIds
	return r
}

// Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
func (r ApiGetUsersByUseridItemsRequest) Albums(albums string) ApiGetUsersByUseridItemsRequest {
	r.albums = &albums
	return r
}

// Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited.
func (r ApiGetUsersByUseridItemsRequest) Ids(ids string) ApiGetUsersByUseridItemsRequest {
	r.ids = &ids
	return r
}

// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
func (r ApiGetUsersByUseridItemsRequest) VideoTypes(videoTypes string) ApiGetUsersByUseridItemsRequest {
	r.videoTypes = &videoTypes
	return r
}

// Optional filter by Container. Allows multiple, comma delimeted.
func (r ApiGetUsersByUseridItemsRequest) Containers(containers string) ApiGetUsersByUseridItemsRequest {
	r.containers = &containers
	return r
}

// Optional filter by AudioCodec. Allows multiple, comma delimeted.
func (r ApiGetUsersByUseridItemsRequest) AudioCodecs(audioCodecs string) ApiGetUsersByUseridItemsRequest {
	r.audioCodecs = &audioCodecs
	return r
}

// Optional filter by VideoCodec. Allows multiple, comma delimeted.
func (r ApiGetUsersByUseridItemsRequest) VideoCodecs(videoCodecs string) ApiGetUsersByUseridItemsRequest {
	r.videoCodecs = &videoCodecs
	return r
}

// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
func (r ApiGetUsersByUseridItemsRequest) SubtitleCodecs(subtitleCodecs string) ApiGetUsersByUseridItemsRequest {
	r.subtitleCodecs = &subtitleCodecs
	return r
}

// Optional filter by Path.
func (r ApiGetUsersByUseridItemsRequest) Path(path string) ApiGetUsersByUseridItemsRequest {
	r.path = &path
	return r
}

// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
func (r ApiGetUsersByUseridItemsRequest) MinOfficialRating(minOfficialRating string) ApiGetUsersByUseridItemsRequest {
	r.minOfficialRating = &minOfficialRating
	return r
}

// Optional filter by items that are locked.
func (r ApiGetUsersByUseridItemsRequest) IsLocked(isLocked bool) ApiGetUsersByUseridItemsRequest {
	r.isLocked = &isLocked
	return r
}

// Optional filter by items that are placeholders
func (r ApiGetUsersByUseridItemsRequest) IsPlaceHolder(isPlaceHolder bool) ApiGetUsersByUseridItemsRequest {
	r.isPlaceHolder = &isPlaceHolder
	return r
}

// Optional filter by items that have official ratings
func (r ApiGetUsersByUseridItemsRequest) HasOfficialRating(hasOfficialRating bool) ApiGetUsersByUseridItemsRequest {
	r.hasOfficialRating = &hasOfficialRating
	return r
}

// Whether or not to hide items behind their boxsets.
func (r ApiGetUsersByUseridItemsRequest) GroupItemsIntoCollections(groupItemsIntoCollections bool) ApiGetUsersByUseridItemsRequest {
	r.groupItemsIntoCollections = &groupItemsIntoCollections
	return r
}

// Optional filter by items that are 3D, or not.
func (r ApiGetUsersByUseridItemsRequest) Is3D(is3D bool) ApiGetUsersByUseridItemsRequest {
	r.is3D = &is3D
	return r
}

// Optional filter by Series Status. Allows multiple, comma delimeted.
func (r ApiGetUsersByUseridItemsRequest) SeriesStatus(seriesStatus string) ApiGetUsersByUseridItemsRequest {
	r.seriesStatus = &seriesStatus
	return r
}

// Optional filter by items whose name is sorted equally or greater than a given input string.
func (r ApiGetUsersByUseridItemsRequest) NameStartsWithOrGreater(nameStartsWithOrGreater string) ApiGetUsersByUseridItemsRequest {
	r.nameStartsWithOrGreater = &nameStartsWithOrGreater
	return r
}

// Optional filter by items whose name is sorted equally than a given input string.
func (r ApiGetUsersByUseridItemsRequest) NameStartsWith(nameStartsWith string) ApiGetUsersByUseridItemsRequest {
	r.nameStartsWith = &nameStartsWith
	return r
}

// Optional filter by items whose name is equally or lesser than a given input string.
func (r ApiGetUsersByUseridItemsRequest) NameLessThan(nameLessThan string) ApiGetUsersByUseridItemsRequest {
	r.nameLessThan = &nameLessThan
	return r
}

func (r ApiGetUsersByUseridItemsRequest) Execute() (*QueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetUsersByUseridItemsExecute(r)
}

/*
GetUsersByUseridItems Gets items based on a query.

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @return ApiGetUsersByUseridItemsRequest
*/
func (a *ItemsServiceAPIService) GetUsersByUseridItems(ctx context.Context, userId string) ApiGetUsersByUseridItemsRequest {
	return ApiGetUsersByUseridItemsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return QueryResultBaseItemDto
func (a *ItemsServiceAPIService) GetUsersByUseridItemsExecute(r ApiGetUsersByUseridItemsRequest) (*QueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemsServiceAPIService.GetUsersByUseridItems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/Items"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.artistType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ArtistType", r.artistType, "form", "")
	}
	if r.maxOfficialRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxOfficialRating", r.maxOfficialRating, "form", "")
	}
	if r.hasThemeSong != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasThemeSong", r.hasThemeSong, "form", "")
	}
	if r.hasThemeVideo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasThemeVideo", r.hasThemeVideo, "form", "")
	}
	if r.hasSubtitles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasSubtitles", r.hasSubtitles, "form", "")
	}
	if r.hasSpecialFeature != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasSpecialFeature", r.hasSpecialFeature, "form", "")
	}
	if r.hasTrailer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasTrailer", r.hasTrailer, "form", "")
	}
	if r.adjacentTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AdjacentTo", r.adjacentTo, "form", "")
	}
	if r.minIndexNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinIndexNumber", r.minIndexNumber, "form", "")
	}
	if r.minPlayers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinPlayers", r.minPlayers, "form", "")
	}
	if r.maxPlayers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxPlayers", r.maxPlayers, "form", "")
	}
	if r.parentIndexNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ParentIndexNumber", r.parentIndexNumber, "form", "")
	}
	if r.hasParentalRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasParentalRating", r.hasParentalRating, "form", "")
	}
	if r.isHD != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsHD", r.isHD, "form", "")
	}
	if r.locationTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "LocationTypes", r.locationTypes, "form", "")
	}
	if r.excludeLocationTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ExcludeLocationTypes", r.excludeLocationTypes, "form", "")
	}
	if r.isMissing != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsMissing", r.isMissing, "form", "")
	}
	if r.isUnaired != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsUnaired", r.isUnaired, "form", "")
	}
	if r.minCommunityRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinCommunityRating", r.minCommunityRating, "form", "")
	}
	if r.minCriticRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinCriticRating", r.minCriticRating, "form", "")
	}
	if r.airedDuringSeason != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AiredDuringSeason", r.airedDuringSeason, "form", "")
	}
	if r.minPremiereDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinPremiereDate", r.minPremiereDate, "form", "")
	}
	if r.minDateLastSaved != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinDateLastSaved", r.minDateLastSaved, "form", "")
	}
	if r.minDateLastSavedForUser != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinDateLastSavedForUser", r.minDateLastSavedForUser, "form", "")
	}
	if r.maxPremiereDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxPremiereDate", r.maxPremiereDate, "form", "")
	}
	if r.hasOverview != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasOverview", r.hasOverview, "form", "")
	}
	if r.hasImdbId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasImdbId", r.hasImdbId, "form", "")
	}
	if r.hasTmdbId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasTmdbId", r.hasTmdbId, "form", "")
	}
	if r.hasTvdbId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasTvdbId", r.hasTvdbId, "form", "")
	}
	if r.excludeItemIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ExcludeItemIds", r.excludeItemIds, "form", "")
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartIndex", r.startIndex, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "form", "")
	}
	if r.recursive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Recursive", r.recursive, "form", "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortOrder", r.sortOrder, "form", "")
	}
	if r.parentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ParentId", r.parentId, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "form", "")
	}
	if r.excludeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ExcludeItemTypes", r.excludeItemTypes, "form", "")
	}
	if r.includeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeItemTypes", r.includeItemTypes, "form", "")
	}
	if r.anyProviderIdEquals != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AnyProviderIdEquals", r.anyProviderIdEquals, "form", "")
	}
	if r.filters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Filters", r.filters, "form", "")
	}
	if r.isFavorite != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsFavorite", r.isFavorite, "form", "")
	}
	if r.isMovie != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsMovie", r.isMovie, "form", "")
	}
	if r.isSeries != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsSeries", r.isSeries, "form", "")
	}
	if r.isNews != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsNews", r.isNews, "form", "")
	}
	if r.isKids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsKids", r.isKids, "form", "")
	}
	if r.isSports != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsSports", r.isSports, "form", "")
	}
	if r.mediaTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MediaTypes", r.mediaTypes, "form", "")
	}
	if r.imageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypes", r.imageTypes, "form", "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortBy", r.sortBy, "form", "")
	}
	if r.isPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsPlayed", r.isPlayed, "form", "")
	}
	if r.genres != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Genres", r.genres, "form", "")
	}
	if r.officialRatings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "OfficialRatings", r.officialRatings, "form", "")
	}
	if r.tags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tags", r.tags, "form", "")
	}
	if r.years != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Years", r.years, "form", "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "form", "")
	}
	if r.person != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Person", r.person, "form", "")
	}
	if r.personIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PersonIds", r.personIds, "form", "")
	}
	if r.personTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PersonTypes", r.personTypes, "form", "")
	}
	if r.studios != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Studios", r.studios, "form", "")
	}
	if r.studioIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StudioIds", r.studioIds, "form", "")
	}
	if r.artists != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Artists", r.artists, "form", "")
	}
	if r.artistIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ArtistIds", r.artistIds, "form", "")
	}
	if r.albums != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Albums", r.albums, "form", "")
	}
	if r.ids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Ids", r.ids, "form", "")
	}
	if r.videoTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoTypes", r.videoTypes, "form", "")
	}
	if r.containers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Containers", r.containers, "form", "")
	}
	if r.audioCodecs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodecs", r.audioCodecs, "form", "")
	}
	if r.videoCodecs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodecs", r.videoCodecs, "form", "")
	}
	if r.subtitleCodecs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleCodecs", r.subtitleCodecs, "form", "")
	}
	if r.path != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Path", r.path, "form", "")
	}
	if r.minOfficialRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinOfficialRating", r.minOfficialRating, "form", "")
	}
	if r.isLocked != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsLocked", r.isLocked, "form", "")
	}
	if r.isPlaceHolder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsPlaceHolder", r.isPlaceHolder, "form", "")
	}
	if r.hasOfficialRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasOfficialRating", r.hasOfficialRating, "form", "")
	}
	if r.groupItemsIntoCollections != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "GroupItemsIntoCollections", r.groupItemsIntoCollections, "form", "")
	}
	if r.is3D != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Is3D", r.is3D, "form", "")
	}
	if r.seriesStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SeriesStatus", r.seriesStatus, "form", "")
	}
	if r.nameStartsWithOrGreater != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "NameStartsWithOrGreater", r.nameStartsWithOrGreater, "form", "")
	}
	if r.nameStartsWith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "NameStartsWith", r.nameStartsWith, "form", "")
	}
	if r.nameLessThan != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "NameLessThan", r.nameLessThan, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUsersByUseridItemsResumeRequest struct {
	ctx context.Context
	ApiService ItemsServiceAPI
	userId string
	artistType *string
	maxOfficialRating *string
	hasThemeSong *bool
	hasThemeVideo *bool
	hasSubtitles *bool
	hasSpecialFeature *bool
	hasTrailer *bool
	adjacentTo *string
	minIndexNumber *int32
	minPlayers *int32
	maxPlayers *int32
	parentIndexNumber *int32
	hasParentalRating *bool
	isHD *bool
	locationTypes *string
	excludeLocationTypes *string
	isMissing *bool
	isUnaired *bool
	minCommunityRating *float64
	minCriticRating *float64
	airedDuringSeason *int32
	minPremiereDate *string
	minDateLastSaved *string
	minDateLastSavedForUser *string
	maxPremiereDate *string
	hasOverview *bool
	hasImdbId *bool
	hasTmdbId *bool
	hasTvdbId *bool
	excludeItemIds *string
	startIndex *int32
	limit *int32
	recursive *bool
	sortOrder *string
	parentId *string
	fields *string
	excludeItemTypes *string
	includeItemTypes *string
	anyProviderIdEquals *string
	filters *string
	isFavorite *bool
	isMovie *bool
	isSeries *bool
	isNews *bool
	isKids *bool
	isSports *bool
	mediaTypes *string
	imageTypes *string
	sortBy *string
	isPlayed *bool
	genres *string
	officialRatings *string
	tags *string
	years *string
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *string
	person *string
	personIds *string
	personTypes *string
	studios *string
	studioIds *string
	artists *string
	artistIds *string
	albums *string
	ids *string
	videoTypes *string
	containers *string
	audioCodecs *string
	videoCodecs *string
	subtitleCodecs *string
	path *string
	minOfficialRating *string
	isLocked *bool
	isPlaceHolder *bool
	hasOfficialRating *bool
	groupItemsIntoCollections *bool
	is3D *bool
	seriesStatus *string
	nameStartsWithOrGreater *string
	nameStartsWith *string
	nameLessThan *string
}

// Artist or AlbumArtist
func (r ApiGetUsersByUseridItemsResumeRequest) ArtistType(artistType string) ApiGetUsersByUseridItemsResumeRequest {
	r.artistType = &artistType
	return r
}

// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
func (r ApiGetUsersByUseridItemsResumeRequest) MaxOfficialRating(maxOfficialRating string) ApiGetUsersByUseridItemsResumeRequest {
	r.maxOfficialRating = &maxOfficialRating
	return r
}

// Optional filter by items with theme songs.
func (r ApiGetUsersByUseridItemsResumeRequest) HasThemeSong(hasThemeSong bool) ApiGetUsersByUseridItemsResumeRequest {
	r.hasThemeSong = &hasThemeSong
	return r
}

// Optional filter by items with theme videos.
func (r ApiGetUsersByUseridItemsResumeRequest) HasThemeVideo(hasThemeVideo bool) ApiGetUsersByUseridItemsResumeRequest {
	r.hasThemeVideo = &hasThemeVideo
	return r
}

// Optional filter by items with subtitles.
func (r ApiGetUsersByUseridItemsResumeRequest) HasSubtitles(hasSubtitles bool) ApiGetUsersByUseridItemsResumeRequest {
	r.hasSubtitles = &hasSubtitles
	return r
}

// Optional filter by items with special features.
func (r ApiGetUsersByUseridItemsResumeRequest) HasSpecialFeature(hasSpecialFeature bool) ApiGetUsersByUseridItemsResumeRequest {
	r.hasSpecialFeature = &hasSpecialFeature
	return r
}

// Optional filter by items with trailers.
func (r ApiGetUsersByUseridItemsResumeRequest) HasTrailer(hasTrailer bool) ApiGetUsersByUseridItemsResumeRequest {
	r.hasTrailer = &hasTrailer
	return r
}

// Optional. Return items that are siblings of a supplied item.
func (r ApiGetUsersByUseridItemsResumeRequest) AdjacentTo(adjacentTo string) ApiGetUsersByUseridItemsResumeRequest {
	r.adjacentTo = &adjacentTo
	return r
}

// Optional filter by minimum index number.
func (r ApiGetUsersByUseridItemsResumeRequest) MinIndexNumber(minIndexNumber int32) ApiGetUsersByUseridItemsResumeRequest {
	r.minIndexNumber = &minIndexNumber
	return r
}

// Optional filter by minimum number of game players.
func (r ApiGetUsersByUseridItemsResumeRequest) MinPlayers(minPlayers int32) ApiGetUsersByUseridItemsResumeRequest {
	r.minPlayers = &minPlayers
	return r
}

// Optional filter by maximum number of game players.
func (r ApiGetUsersByUseridItemsResumeRequest) MaxPlayers(maxPlayers int32) ApiGetUsersByUseridItemsResumeRequest {
	r.maxPlayers = &maxPlayers
	return r
}

// Optional filter by parent index number.
func (r ApiGetUsersByUseridItemsResumeRequest) ParentIndexNumber(parentIndexNumber int32) ApiGetUsersByUseridItemsResumeRequest {
	r.parentIndexNumber = &parentIndexNumber
	return r
}

// Optional filter by items that have or do not have a parental rating
func (r ApiGetUsersByUseridItemsResumeRequest) HasParentalRating(hasParentalRating bool) ApiGetUsersByUseridItemsResumeRequest {
	r.hasParentalRating = &hasParentalRating
	return r
}

// Optional filter by items that are HD or not.
func (r ApiGetUsersByUseridItemsResumeRequest) IsHD(isHD bool) ApiGetUsersByUseridItemsResumeRequest {
	r.isHD = &isHD
	return r
}

// Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
func (r ApiGetUsersByUseridItemsResumeRequest) LocationTypes(locationTypes string) ApiGetUsersByUseridItemsResumeRequest {
	r.locationTypes = &locationTypes
	return r
}

// Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
func (r ApiGetUsersByUseridItemsResumeRequest) ExcludeLocationTypes(excludeLocationTypes string) ApiGetUsersByUseridItemsResumeRequest {
	r.excludeLocationTypes = &excludeLocationTypes
	return r
}

// Optional filter by items that are missing episodes or not.
func (r ApiGetUsersByUseridItemsResumeRequest) IsMissing(isMissing bool) ApiGetUsersByUseridItemsResumeRequest {
	r.isMissing = &isMissing
	return r
}

// Optional filter by items that are unaired episodes or not.
func (r ApiGetUsersByUseridItemsResumeRequest) IsUnaired(isUnaired bool) ApiGetUsersByUseridItemsResumeRequest {
	r.isUnaired = &isUnaired
	return r
}

// Optional filter by minimum community rating.
func (r ApiGetUsersByUseridItemsResumeRequest) MinCommunityRating(minCommunityRating float64) ApiGetUsersByUseridItemsResumeRequest {
	r.minCommunityRating = &minCommunityRating
	return r
}

// Optional filter by minimum critic rating.
func (r ApiGetUsersByUseridItemsResumeRequest) MinCriticRating(minCriticRating float64) ApiGetUsersByUseridItemsResumeRequest {
	r.minCriticRating = &minCriticRating
	return r
}

// Gets all episodes that aired during a season, including specials.
func (r ApiGetUsersByUseridItemsResumeRequest) AiredDuringSeason(airedDuringSeason int32) ApiGetUsersByUseridItemsResumeRequest {
	r.airedDuringSeason = &airedDuringSeason
	return r
}

// Optional. The minimum premiere date. Format &#x3D; ISO
func (r ApiGetUsersByUseridItemsResumeRequest) MinPremiereDate(minPremiereDate string) ApiGetUsersByUseridItemsResumeRequest {
	r.minPremiereDate = &minPremiereDate
	return r
}

// Optional. The minimum premiere date. Format &#x3D; ISO
func (r ApiGetUsersByUseridItemsResumeRequest) MinDateLastSaved(minDateLastSaved string) ApiGetUsersByUseridItemsResumeRequest {
	r.minDateLastSaved = &minDateLastSaved
	return r
}

// Optional. The minimum premiere date. Format &#x3D; ISO
func (r ApiGetUsersByUseridItemsResumeRequest) MinDateLastSavedForUser(minDateLastSavedForUser string) ApiGetUsersByUseridItemsResumeRequest {
	r.minDateLastSavedForUser = &minDateLastSavedForUser
	return r
}

// Optional. The maximum premiere date. Format &#x3D; ISO
func (r ApiGetUsersByUseridItemsResumeRequest) MaxPremiereDate(maxPremiereDate string) ApiGetUsersByUseridItemsResumeRequest {
	r.maxPremiereDate = &maxPremiereDate
	return r
}

// Optional filter by items that have an overview or not.
func (r ApiGetUsersByUseridItemsResumeRequest) HasOverview(hasOverview bool) ApiGetUsersByUseridItemsResumeRequest {
	r.hasOverview = &hasOverview
	return r
}

// Optional filter by items that have an imdb id or not.
func (r ApiGetUsersByUseridItemsResumeRequest) HasImdbId(hasImdbId bool) ApiGetUsersByUseridItemsResumeRequest {
	r.hasImdbId = &hasImdbId
	return r
}

// Optional filter by items that have a tmdb id or not.
func (r ApiGetUsersByUseridItemsResumeRequest) HasTmdbId(hasTmdbId bool) ApiGetUsersByUseridItemsResumeRequest {
	r.hasTmdbId = &hasTmdbId
	return r
}

// Optional filter by items that have a tvdb id or not.
func (r ApiGetUsersByUseridItemsResumeRequest) HasTvdbId(hasTvdbId bool) ApiGetUsersByUseridItemsResumeRequest {
	r.hasTvdbId = &hasTvdbId
	return r
}

// Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
func (r ApiGetUsersByUseridItemsResumeRequest) ExcludeItemIds(excludeItemIds string) ApiGetUsersByUseridItemsResumeRequest {
	r.excludeItemIds = &excludeItemIds
	return r
}

// Optional. The record index to start at. All items with a lower index will be dropped from the results.
func (r ApiGetUsersByUseridItemsResumeRequest) StartIndex(startIndex int32) ApiGetUsersByUseridItemsResumeRequest {
	r.startIndex = &startIndex
	return r
}

// Optional. The maximum number of records to return
func (r ApiGetUsersByUseridItemsResumeRequest) Limit(limit int32) ApiGetUsersByUseridItemsResumeRequest {
	r.limit = &limit
	return r
}

// When searching within folders, this determines whether or not the search will be recursive. true/false
func (r ApiGetUsersByUseridItemsResumeRequest) Recursive(recursive bool) ApiGetUsersByUseridItemsResumeRequest {
	r.recursive = &recursive
	return r
}

// Sort Order - Ascending,Descending
func (r ApiGetUsersByUseridItemsResumeRequest) SortOrder(sortOrder string) ApiGetUsersByUseridItemsResumeRequest {
	r.sortOrder = &sortOrder
	return r
}

// Specify this to localize the search to a specific item or folder. Omit to use the root
func (r ApiGetUsersByUseridItemsResumeRequest) ParentId(parentId string) ApiGetUsersByUseridItemsResumeRequest {
	r.parentId = &parentId
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
func (r ApiGetUsersByUseridItemsResumeRequest) Fields(fields string) ApiGetUsersByUseridItemsResumeRequest {
	r.fields = &fields
	return r
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r ApiGetUsersByUseridItemsResumeRequest) ExcludeItemTypes(excludeItemTypes string) ApiGetUsersByUseridItemsResumeRequest {
	r.excludeItemTypes = &excludeItemTypes
	return r
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r ApiGetUsersByUseridItemsResumeRequest) IncludeItemTypes(includeItemTypes string) ApiGetUsersByUseridItemsResumeRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#39;prov.id&#39;, e.g. &#39;imdb.tt123456&#39;. This allows multiple, comma delimeted value pairs.
func (r ApiGetUsersByUseridItemsResumeRequest) AnyProviderIdEquals(anyProviderIdEquals string) ApiGetUsersByUseridItemsResumeRequest {
	r.anyProviderIdEquals = &anyProviderIdEquals
	return r
}

// Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
func (r ApiGetUsersByUseridItemsResumeRequest) Filters(filters string) ApiGetUsersByUseridItemsResumeRequest {
	r.filters = &filters
	return r
}

// Optional filter by items that are marked as favorite, or not.
func (r ApiGetUsersByUseridItemsResumeRequest) IsFavorite(isFavorite bool) ApiGetUsersByUseridItemsResumeRequest {
	r.isFavorite = &isFavorite
	return r
}

// Optional filter for movies.
func (r ApiGetUsersByUseridItemsResumeRequest) IsMovie(isMovie bool) ApiGetUsersByUseridItemsResumeRequest {
	r.isMovie = &isMovie
	return r
}

// Optional filter for movies.
func (r ApiGetUsersByUseridItemsResumeRequest) IsSeries(isSeries bool) ApiGetUsersByUseridItemsResumeRequest {
	r.isSeries = &isSeries
	return r
}

// Optional filter for news.
func (r ApiGetUsersByUseridItemsResumeRequest) IsNews(isNews bool) ApiGetUsersByUseridItemsResumeRequest {
	r.isNews = &isNews
	return r
}

// Optional filter for kids.
func (r ApiGetUsersByUseridItemsResumeRequest) IsKids(isKids bool) ApiGetUsersByUseridItemsResumeRequest {
	r.isKids = &isKids
	return r
}

// Optional filter for sports.
func (r ApiGetUsersByUseridItemsResumeRequest) IsSports(isSports bool) ApiGetUsersByUseridItemsResumeRequest {
	r.isSports = &isSports
	return r
}

// Optional filter by MediaType. Allows multiple, comma delimited.
func (r ApiGetUsersByUseridItemsResumeRequest) MediaTypes(mediaTypes string) ApiGetUsersByUseridItemsResumeRequest {
	r.mediaTypes = &mediaTypes
	return r
}

// Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
func (r ApiGetUsersByUseridItemsResumeRequest) ImageTypes(imageTypes string) ApiGetUsersByUseridItemsResumeRequest {
	r.imageTypes = &imageTypes
	return r
}

// Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
func (r ApiGetUsersByUseridItemsResumeRequest) SortBy(sortBy string) ApiGetUsersByUseridItemsResumeRequest {
	r.sortBy = &sortBy
	return r
}

// Optional filter by items that are played, or not.
func (r ApiGetUsersByUseridItemsResumeRequest) IsPlayed(isPlayed bool) ApiGetUsersByUseridItemsResumeRequest {
	r.isPlayed = &isPlayed
	return r
}

// Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
func (r ApiGetUsersByUseridItemsResumeRequest) Genres(genres string) ApiGetUsersByUseridItemsResumeRequest {
	r.genres = &genres
	return r
}

// Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
func (r ApiGetUsersByUseridItemsResumeRequest) OfficialRatings(officialRatings string) ApiGetUsersByUseridItemsResumeRequest {
	r.officialRatings = &officialRatings
	return r
}

// Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
func (r ApiGetUsersByUseridItemsResumeRequest) Tags(tags string) ApiGetUsersByUseridItemsResumeRequest {
	r.tags = &tags
	return r
}

// Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
func (r ApiGetUsersByUseridItemsResumeRequest) Years(years string) ApiGetUsersByUseridItemsResumeRequest {
	r.years = &years
	return r
}

// Optional, include image information in output
func (r ApiGetUsersByUseridItemsResumeRequest) EnableImages(enableImages bool) ApiGetUsersByUseridItemsResumeRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, include user data
func (r ApiGetUsersByUseridItemsResumeRequest) EnableUserData(enableUserData bool) ApiGetUsersByUseridItemsResumeRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional, the max number of images to return, per image type
func (r ApiGetUsersByUseridItemsResumeRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetUsersByUseridItemsResumeRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetUsersByUseridItemsResumeRequest) EnableImageTypes(enableImageTypes string) ApiGetUsersByUseridItemsResumeRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional. If specified, results will be filtered to include only those containing the specified person.
func (r ApiGetUsersByUseridItemsResumeRequest) Person(person string) ApiGetUsersByUseridItemsResumeRequest {
	r.person = &person
	return r
}

// Optional. If specified, results will be filtered to include only those containing the specified person.
func (r ApiGetUsersByUseridItemsResumeRequest) PersonIds(personIds string) ApiGetUsersByUseridItemsResumeRequest {
	r.personIds = &personIds
	return r
}

// Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
func (r ApiGetUsersByUseridItemsResumeRequest) PersonTypes(personTypes string) ApiGetUsersByUseridItemsResumeRequest {
	r.personTypes = &personTypes
	return r
}

// Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
func (r ApiGetUsersByUseridItemsResumeRequest) Studios(studios string) ApiGetUsersByUseridItemsResumeRequest {
	r.studios = &studios
	return r
}

// Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
func (r ApiGetUsersByUseridItemsResumeRequest) StudioIds(studioIds string) ApiGetUsersByUseridItemsResumeRequest {
	r.studioIds = &studioIds
	return r
}

// Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
func (r ApiGetUsersByUseridItemsResumeRequest) Artists(artists string) ApiGetUsersByUseridItemsResumeRequest {
	r.artists = &artists
	return r
}

// Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
func (r ApiGetUsersByUseridItemsResumeRequest) ArtistIds(artistIds string) ApiGetUsersByUseridItemsResumeRequest {
	r.artistIds = &artistIds
	return r
}

// Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
func (r ApiGetUsersByUseridItemsResumeRequest) Albums(albums string) ApiGetUsersByUseridItemsResumeRequest {
	r.albums = &albums
	return r
}

// Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited.
func (r ApiGetUsersByUseridItemsResumeRequest) Ids(ids string) ApiGetUsersByUseridItemsResumeRequest {
	r.ids = &ids
	return r
}

// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
func (r ApiGetUsersByUseridItemsResumeRequest) VideoTypes(videoTypes string) ApiGetUsersByUseridItemsResumeRequest {
	r.videoTypes = &videoTypes
	return r
}

// Optional filter by Container. Allows multiple, comma delimeted.
func (r ApiGetUsersByUseridItemsResumeRequest) Containers(containers string) ApiGetUsersByUseridItemsResumeRequest {
	r.containers = &containers
	return r
}

// Optional filter by AudioCodec. Allows multiple, comma delimeted.
func (r ApiGetUsersByUseridItemsResumeRequest) AudioCodecs(audioCodecs string) ApiGetUsersByUseridItemsResumeRequest {
	r.audioCodecs = &audioCodecs
	return r
}

// Optional filter by VideoCodec. Allows multiple, comma delimeted.
func (r ApiGetUsersByUseridItemsResumeRequest) VideoCodecs(videoCodecs string) ApiGetUsersByUseridItemsResumeRequest {
	r.videoCodecs = &videoCodecs
	return r
}

// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
func (r ApiGetUsersByUseridItemsResumeRequest) SubtitleCodecs(subtitleCodecs string) ApiGetUsersByUseridItemsResumeRequest {
	r.subtitleCodecs = &subtitleCodecs
	return r
}

// Optional filter by Path.
func (r ApiGetUsersByUseridItemsResumeRequest) Path(path string) ApiGetUsersByUseridItemsResumeRequest {
	r.path = &path
	return r
}

// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
func (r ApiGetUsersByUseridItemsResumeRequest) MinOfficialRating(minOfficialRating string) ApiGetUsersByUseridItemsResumeRequest {
	r.minOfficialRating = &minOfficialRating
	return r
}

// Optional filter by items that are locked.
func (r ApiGetUsersByUseridItemsResumeRequest) IsLocked(isLocked bool) ApiGetUsersByUseridItemsResumeRequest {
	r.isLocked = &isLocked
	return r
}

// Optional filter by items that are placeholders
func (r ApiGetUsersByUseridItemsResumeRequest) IsPlaceHolder(isPlaceHolder bool) ApiGetUsersByUseridItemsResumeRequest {
	r.isPlaceHolder = &isPlaceHolder
	return r
}

// Optional filter by items that have official ratings
func (r ApiGetUsersByUseridItemsResumeRequest) HasOfficialRating(hasOfficialRating bool) ApiGetUsersByUseridItemsResumeRequest {
	r.hasOfficialRating = &hasOfficialRating
	return r
}

// Whether or not to hide items behind their boxsets.
func (r ApiGetUsersByUseridItemsResumeRequest) GroupItemsIntoCollections(groupItemsIntoCollections bool) ApiGetUsersByUseridItemsResumeRequest {
	r.groupItemsIntoCollections = &groupItemsIntoCollections
	return r
}

// Optional filter by items that are 3D, or not.
func (r ApiGetUsersByUseridItemsResumeRequest) Is3D(is3D bool) ApiGetUsersByUseridItemsResumeRequest {
	r.is3D = &is3D
	return r
}

// Optional filter by Series Status. Allows multiple, comma delimeted.
func (r ApiGetUsersByUseridItemsResumeRequest) SeriesStatus(seriesStatus string) ApiGetUsersByUseridItemsResumeRequest {
	r.seriesStatus = &seriesStatus
	return r
}

// Optional filter by items whose name is sorted equally or greater than a given input string.
func (r ApiGetUsersByUseridItemsResumeRequest) NameStartsWithOrGreater(nameStartsWithOrGreater string) ApiGetUsersByUseridItemsResumeRequest {
	r.nameStartsWithOrGreater = &nameStartsWithOrGreater
	return r
}

// Optional filter by items whose name is sorted equally than a given input string.
func (r ApiGetUsersByUseridItemsResumeRequest) NameStartsWith(nameStartsWith string) ApiGetUsersByUseridItemsResumeRequest {
	r.nameStartsWith = &nameStartsWith
	return r
}

// Optional filter by items whose name is equally or lesser than a given input string.
func (r ApiGetUsersByUseridItemsResumeRequest) NameLessThan(nameLessThan string) ApiGetUsersByUseridItemsResumeRequest {
	r.nameLessThan = &nameLessThan
	return r
}

func (r ApiGetUsersByUseridItemsResumeRequest) Execute() (*QueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetUsersByUseridItemsResumeExecute(r)
}

/*
GetUsersByUseridItemsResume Gets items based on a query.

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @return ApiGetUsersByUseridItemsResumeRequest
*/
func (a *ItemsServiceAPIService) GetUsersByUseridItemsResume(ctx context.Context, userId string) ApiGetUsersByUseridItemsResumeRequest {
	return ApiGetUsersByUseridItemsResumeRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return QueryResultBaseItemDto
func (a *ItemsServiceAPIService) GetUsersByUseridItemsResumeExecute(r ApiGetUsersByUseridItemsResumeRequest) (*QueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemsServiceAPIService.GetUsersByUseridItemsResume")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/Items/Resume"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.artistType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ArtistType", r.artistType, "form", "")
	}
	if r.maxOfficialRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxOfficialRating", r.maxOfficialRating, "form", "")
	}
	if r.hasThemeSong != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasThemeSong", r.hasThemeSong, "form", "")
	}
	if r.hasThemeVideo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasThemeVideo", r.hasThemeVideo, "form", "")
	}
	if r.hasSubtitles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasSubtitles", r.hasSubtitles, "form", "")
	}
	if r.hasSpecialFeature != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasSpecialFeature", r.hasSpecialFeature, "form", "")
	}
	if r.hasTrailer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasTrailer", r.hasTrailer, "form", "")
	}
	if r.adjacentTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AdjacentTo", r.adjacentTo, "form", "")
	}
	if r.minIndexNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinIndexNumber", r.minIndexNumber, "form", "")
	}
	if r.minPlayers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinPlayers", r.minPlayers, "form", "")
	}
	if r.maxPlayers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxPlayers", r.maxPlayers, "form", "")
	}
	if r.parentIndexNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ParentIndexNumber", r.parentIndexNumber, "form", "")
	}
	if r.hasParentalRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasParentalRating", r.hasParentalRating, "form", "")
	}
	if r.isHD != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsHD", r.isHD, "form", "")
	}
	if r.locationTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "LocationTypes", r.locationTypes, "form", "")
	}
	if r.excludeLocationTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ExcludeLocationTypes", r.excludeLocationTypes, "form", "")
	}
	if r.isMissing != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsMissing", r.isMissing, "form", "")
	}
	if r.isUnaired != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsUnaired", r.isUnaired, "form", "")
	}
	if r.minCommunityRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinCommunityRating", r.minCommunityRating, "form", "")
	}
	if r.minCriticRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinCriticRating", r.minCriticRating, "form", "")
	}
	if r.airedDuringSeason != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AiredDuringSeason", r.airedDuringSeason, "form", "")
	}
	if r.minPremiereDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinPremiereDate", r.minPremiereDate, "form", "")
	}
	if r.minDateLastSaved != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinDateLastSaved", r.minDateLastSaved, "form", "")
	}
	if r.minDateLastSavedForUser != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinDateLastSavedForUser", r.minDateLastSavedForUser, "form", "")
	}
	if r.maxPremiereDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxPremiereDate", r.maxPremiereDate, "form", "")
	}
	if r.hasOverview != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasOverview", r.hasOverview, "form", "")
	}
	if r.hasImdbId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasImdbId", r.hasImdbId, "form", "")
	}
	if r.hasTmdbId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasTmdbId", r.hasTmdbId, "form", "")
	}
	if r.hasTvdbId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasTvdbId", r.hasTvdbId, "form", "")
	}
	if r.excludeItemIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ExcludeItemIds", r.excludeItemIds, "form", "")
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartIndex", r.startIndex, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "form", "")
	}
	if r.recursive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Recursive", r.recursive, "form", "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortOrder", r.sortOrder, "form", "")
	}
	if r.parentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ParentId", r.parentId, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "form", "")
	}
	if r.excludeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ExcludeItemTypes", r.excludeItemTypes, "form", "")
	}
	if r.includeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeItemTypes", r.includeItemTypes, "form", "")
	}
	if r.anyProviderIdEquals != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AnyProviderIdEquals", r.anyProviderIdEquals, "form", "")
	}
	if r.filters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Filters", r.filters, "form", "")
	}
	if r.isFavorite != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsFavorite", r.isFavorite, "form", "")
	}
	if r.isMovie != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsMovie", r.isMovie, "form", "")
	}
	if r.isSeries != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsSeries", r.isSeries, "form", "")
	}
	if r.isNews != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsNews", r.isNews, "form", "")
	}
	if r.isKids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsKids", r.isKids, "form", "")
	}
	if r.isSports != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsSports", r.isSports, "form", "")
	}
	if r.mediaTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MediaTypes", r.mediaTypes, "form", "")
	}
	if r.imageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypes", r.imageTypes, "form", "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortBy", r.sortBy, "form", "")
	}
	if r.isPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsPlayed", r.isPlayed, "form", "")
	}
	if r.genres != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Genres", r.genres, "form", "")
	}
	if r.officialRatings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "OfficialRatings", r.officialRatings, "form", "")
	}
	if r.tags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tags", r.tags, "form", "")
	}
	if r.years != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Years", r.years, "form", "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "form", "")
	}
	if r.person != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Person", r.person, "form", "")
	}
	if r.personIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PersonIds", r.personIds, "form", "")
	}
	if r.personTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PersonTypes", r.personTypes, "form", "")
	}
	if r.studios != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Studios", r.studios, "form", "")
	}
	if r.studioIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StudioIds", r.studioIds, "form", "")
	}
	if r.artists != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Artists", r.artists, "form", "")
	}
	if r.artistIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ArtistIds", r.artistIds, "form", "")
	}
	if r.albums != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Albums", r.albums, "form", "")
	}
	if r.ids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Ids", r.ids, "form", "")
	}
	if r.videoTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoTypes", r.videoTypes, "form", "")
	}
	if r.containers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Containers", r.containers, "form", "")
	}
	if r.audioCodecs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodecs", r.audioCodecs, "form", "")
	}
	if r.videoCodecs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodecs", r.videoCodecs, "form", "")
	}
	if r.subtitleCodecs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleCodecs", r.subtitleCodecs, "form", "")
	}
	if r.path != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Path", r.path, "form", "")
	}
	if r.minOfficialRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinOfficialRating", r.minOfficialRating, "form", "")
	}
	if r.isLocked != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsLocked", r.isLocked, "form", "")
	}
	if r.isPlaceHolder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsPlaceHolder", r.isPlaceHolder, "form", "")
	}
	if r.hasOfficialRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasOfficialRating", r.hasOfficialRating, "form", "")
	}
	if r.groupItemsIntoCollections != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "GroupItemsIntoCollections", r.groupItemsIntoCollections, "form", "")
	}
	if r.is3D != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Is3D", r.is3D, "form", "")
	}
	if r.seriesStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SeriesStatus", r.seriesStatus, "form", "")
	}
	if r.nameStartsWithOrGreater != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "NameStartsWithOrGreater", r.nameStartsWithOrGreater, "form", "")
	}
	if r.nameStartsWith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "NameStartsWith", r.nameStartsWith, "form", "")
	}
	if r.nameLessThan != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "NameLessThan", r.nameLessThan, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
