/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ImageByNameServiceAPI interface {

	/*
	GetImagesGeneral Gets all general images by name

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetImagesGeneralRequest
	*/
	GetImagesGeneral(ctx context.Context) ApiGetImagesGeneralRequest

	// GetImagesGeneralExecute executes the request
	//  @return []ImageByNameInfo
	GetImagesGeneralExecute(r ApiGetImagesGeneralRequest) ([]ImageByNameInfo, *http.Response, error)

	/*
	GetImagesGeneralByNameByType Gets a general image by name

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name The name of the image
	@param type_ Image Type (primary, backdrop, logo, etc).
	@return ApiGetImagesGeneralByNameByTypeRequest
	*/
	GetImagesGeneralByNameByType(ctx context.Context, name string, type_ string) ApiGetImagesGeneralByNameByTypeRequest

	// GetImagesGeneralByNameByTypeExecute executes the request
	GetImagesGeneralByNameByTypeExecute(r ApiGetImagesGeneralByNameByTypeRequest) (*http.Response, error)

	/*
	GetImagesMediainfo Gets all media info image by name

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetImagesMediainfoRequest
	*/
	GetImagesMediainfo(ctx context.Context) ApiGetImagesMediainfoRequest

	// GetImagesMediainfoExecute executes the request
	//  @return []ImageByNameInfo
	GetImagesMediainfoExecute(r ApiGetImagesMediainfoRequest) ([]ImageByNameInfo, *http.Response, error)

	/*
	GetImagesMediainfoByThemeByName Gets a media info image by name

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name The name of the image
	@param theme The theme to get the image from
	@return ApiGetImagesMediainfoByThemeByNameRequest
	*/
	GetImagesMediainfoByThemeByName(ctx context.Context, name string, theme string) ApiGetImagesMediainfoByThemeByNameRequest

	// GetImagesMediainfoByThemeByNameExecute executes the request
	GetImagesMediainfoByThemeByNameExecute(r ApiGetImagesMediainfoByThemeByNameRequest) (*http.Response, error)

	/*
	GetImagesRatings Gets all rating images by name

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetImagesRatingsRequest
	*/
	GetImagesRatings(ctx context.Context) ApiGetImagesRatingsRequest

	// GetImagesRatingsExecute executes the request
	//  @return []ImageByNameInfo
	GetImagesRatingsExecute(r ApiGetImagesRatingsRequest) ([]ImageByNameInfo, *http.Response, error)

	/*
	GetImagesRatingsByThemeByName Gets a rating image by name

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name The name of the image
	@param theme The theme to get the image from
	@return ApiGetImagesRatingsByThemeByNameRequest
	*/
	GetImagesRatingsByThemeByName(ctx context.Context, name string, theme string) ApiGetImagesRatingsByThemeByNameRequest

	// GetImagesRatingsByThemeByNameExecute executes the request
	GetImagesRatingsByThemeByNameExecute(r ApiGetImagesRatingsByThemeByNameRequest) (*http.Response, error)
}

// ImageByNameServiceAPIService ImageByNameServiceAPI service
type ImageByNameServiceAPIService service

type ApiGetImagesGeneralRequest struct {
	ctx context.Context
	ApiService ImageByNameServiceAPI
}

func (r ApiGetImagesGeneralRequest) Execute() ([]ImageByNameInfo, *http.Response, error) {
	return r.ApiService.GetImagesGeneralExecute(r)
}

/*
GetImagesGeneral Gets all general images by name

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetImagesGeneralRequest
*/
func (a *ImageByNameServiceAPIService) GetImagesGeneral(ctx context.Context) ApiGetImagesGeneralRequest {
	return ApiGetImagesGeneralRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ImageByNameInfo
func (a *ImageByNameServiceAPIService) GetImagesGeneralExecute(r ApiGetImagesGeneralRequest) ([]ImageByNameInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ImageByNameInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageByNameServiceAPIService.GetImagesGeneral")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Images/General"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetImagesGeneralByNameByTypeRequest struct {
	ctx context.Context
	ApiService ImageByNameServiceAPI
	name string
	type_ string
}

func (r ApiGetImagesGeneralByNameByTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetImagesGeneralByNameByTypeExecute(r)
}

/*
GetImagesGeneralByNameByType Gets a general image by name

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name The name of the image
 @param type_ Image Type (primary, backdrop, logo, etc).
 @return ApiGetImagesGeneralByNameByTypeRequest
*/
func (a *ImageByNameServiceAPIService) GetImagesGeneralByNameByType(ctx context.Context, name string, type_ string) ApiGetImagesGeneralByNameByTypeRequest {
	return ApiGetImagesGeneralByNameByTypeRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		type_: type_,
	}
}

// Execute executes the request
func (a *ImageByNameServiceAPIService) GetImagesGeneralByNameByTypeExecute(r ApiGetImagesGeneralByNameByTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageByNameServiceAPIService.GetImagesGeneralByNameByType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Images/General/{Name}/{Type}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetImagesMediainfoRequest struct {
	ctx context.Context
	ApiService ImageByNameServiceAPI
}

func (r ApiGetImagesMediainfoRequest) Execute() ([]ImageByNameInfo, *http.Response, error) {
	return r.ApiService.GetImagesMediainfoExecute(r)
}

/*
GetImagesMediainfo Gets all media info image by name

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetImagesMediainfoRequest
*/
func (a *ImageByNameServiceAPIService) GetImagesMediainfo(ctx context.Context) ApiGetImagesMediainfoRequest {
	return ApiGetImagesMediainfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ImageByNameInfo
func (a *ImageByNameServiceAPIService) GetImagesMediainfoExecute(r ApiGetImagesMediainfoRequest) ([]ImageByNameInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ImageByNameInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageByNameServiceAPIService.GetImagesMediainfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Images/MediaInfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetImagesMediainfoByThemeByNameRequest struct {
	ctx context.Context
	ApiService ImageByNameServiceAPI
	name string
	theme string
}

func (r ApiGetImagesMediainfoByThemeByNameRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetImagesMediainfoByThemeByNameExecute(r)
}

/*
GetImagesMediainfoByThemeByName Gets a media info image by name

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name The name of the image
 @param theme The theme to get the image from
 @return ApiGetImagesMediainfoByThemeByNameRequest
*/
func (a *ImageByNameServiceAPIService) GetImagesMediainfoByThemeByName(ctx context.Context, name string, theme string) ApiGetImagesMediainfoByThemeByNameRequest {
	return ApiGetImagesMediainfoByThemeByNameRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		theme: theme,
	}
}

// Execute executes the request
func (a *ImageByNameServiceAPIService) GetImagesMediainfoByThemeByNameExecute(r ApiGetImagesMediainfoByThemeByNameRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageByNameServiceAPIService.GetImagesMediainfoByThemeByName")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Images/MediaInfo/{Theme}/{Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Theme"+"}", url.PathEscape(parameterValueToString(r.theme, "theme")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetImagesRatingsRequest struct {
	ctx context.Context
	ApiService ImageByNameServiceAPI
}

func (r ApiGetImagesRatingsRequest) Execute() ([]ImageByNameInfo, *http.Response, error) {
	return r.ApiService.GetImagesRatingsExecute(r)
}

/*
GetImagesRatings Gets all rating images by name

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetImagesRatingsRequest
*/
func (a *ImageByNameServiceAPIService) GetImagesRatings(ctx context.Context) ApiGetImagesRatingsRequest {
	return ApiGetImagesRatingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ImageByNameInfo
func (a *ImageByNameServiceAPIService) GetImagesRatingsExecute(r ApiGetImagesRatingsRequest) ([]ImageByNameInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ImageByNameInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageByNameServiceAPIService.GetImagesRatings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Images/Ratings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetImagesRatingsByThemeByNameRequest struct {
	ctx context.Context
	ApiService ImageByNameServiceAPI
	name string
	theme string
}

func (r ApiGetImagesRatingsByThemeByNameRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetImagesRatingsByThemeByNameExecute(r)
}

/*
GetImagesRatingsByThemeByName Gets a rating image by name

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name The name of the image
 @param theme The theme to get the image from
 @return ApiGetImagesRatingsByThemeByNameRequest
*/
func (a *ImageByNameServiceAPIService) GetImagesRatingsByThemeByName(ctx context.Context, name string, theme string) ApiGetImagesRatingsByThemeByNameRequest {
	return ApiGetImagesRatingsByThemeByNameRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		theme: theme,
	}
}

// Execute executes the request
func (a *ImageByNameServiceAPIService) GetImagesRatingsByThemeByNameExecute(r ApiGetImagesRatingsByThemeByNameRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImageByNameServiceAPIService.GetImagesRatingsByThemeByName")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Images/Ratings/{Theme}/{Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Theme"+"}", url.PathEscape(parameterValueToString(r.theme, "theme")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
