/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ValidatePath type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidatePath{}

// ValidatePath struct for ValidatePath
type ValidatePath struct {
	ValidateWriteable *bool `json:"ValidateWriteable,omitempty"`
	IsFile NullableBool `json:"IsFile,omitempty"`
}

// NewValidatePath instantiates a new ValidatePath object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidatePath() *ValidatePath {
	this := ValidatePath{}
	return &this
}

// NewValidatePathWithDefaults instantiates a new ValidatePath object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidatePathWithDefaults() *ValidatePath {
	this := ValidatePath{}
	return &this
}

// GetValidateWriteable returns the ValidateWriteable field value if set, zero value otherwise.
func (o *ValidatePath) GetValidateWriteable() bool {
	if o == nil || IsNil(o.ValidateWriteable) {
		var ret bool
		return ret
	}
	return *o.ValidateWriteable
}

// GetValidateWriteableOk returns a tuple with the ValidateWriteable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidatePath) GetValidateWriteableOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidateWriteable) {
		return nil, false
	}
	return o.ValidateWriteable, true
}

// HasValidateWriteable returns a boolean if a field has been set.
func (o *ValidatePath) HasValidateWriteable() bool {
	if o != nil && !IsNil(o.ValidateWriteable) {
		return true
	}

	return false
}

// SetValidateWriteable gets a reference to the given bool and assigns it to the ValidateWriteable field.
func (o *ValidatePath) SetValidateWriteable(v bool) {
	o.ValidateWriteable = &v
}

// GetIsFile returns the IsFile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ValidatePath) GetIsFile() bool {
	if o == nil || IsNil(o.IsFile.Get()) {
		var ret bool
		return ret
	}
	return *o.IsFile.Get()
}

// GetIsFileOk returns a tuple with the IsFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ValidatePath) GetIsFileOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsFile.Get(), o.IsFile.IsSet()
}

// HasIsFile returns a boolean if a field has been set.
func (o *ValidatePath) HasIsFile() bool {
	if o != nil && o.IsFile.IsSet() {
		return true
	}

	return false
}

// SetIsFile gets a reference to the given NullableBool and assigns it to the IsFile field.
func (o *ValidatePath) SetIsFile(v bool) {
	o.IsFile.Set(&v)
}
// SetIsFileNil sets the value for IsFile to be an explicit nil
func (o *ValidatePath) SetIsFileNil() {
	o.IsFile.Set(nil)
}

// UnsetIsFile ensures that no value is present for IsFile, not even an explicit nil
func (o *ValidatePath) UnsetIsFile() {
	o.IsFile.Unset()
}

func (o ValidatePath) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidatePath) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ValidateWriteable) {
		toSerialize["ValidateWriteable"] = o.ValidateWriteable
	}
	if o.IsFile.IsSet() {
		toSerialize["IsFile"] = o.IsFile.Get()
	}
	return toSerialize, nil
}

type NullableValidatePath struct {
	value *ValidatePath
	isSet bool
}

func (v NullableValidatePath) Get() *ValidatePath {
	return v.value
}

func (v *NullableValidatePath) Set(val *ValidatePath) {
	v.value = val
	v.isSet = true
}

func (v NullableValidatePath) IsSet() bool {
	return v.isSet
}

func (v *NullableValidatePath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidatePath(val *ValidatePath) *NullableValidatePath {
	return &NullableValidatePath{value: val, isSet: true}
}

func (v NullableValidatePath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidatePath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


