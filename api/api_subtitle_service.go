/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type SubtitleServiceAPI interface {

	/*
	DeleteVideosByIdSubtitlesByIndex Deletes an external subtitle file

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@param index The subtitle stream index
	@return ApiDeleteVideosByIdSubtitlesByIndexRequest
	*/
	DeleteVideosByIdSubtitlesByIndex(ctx context.Context, id string, index int32) ApiDeleteVideosByIdSubtitlesByIndexRequest

	// DeleteVideosByIdSubtitlesByIndexExecute executes the request
	DeleteVideosByIdSubtitlesByIndexExecute(r ApiDeleteVideosByIdSubtitlesByIndexRequest) (*http.Response, error)

	/*
	GetItemsByIdRemotesearchSubtitlesByLanguage Method for GetItemsByIdRemotesearchSubtitlesByLanguage

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@param language Language
	@return ApiGetItemsByIdRemotesearchSubtitlesByLanguageRequest
	*/
	GetItemsByIdRemotesearchSubtitlesByLanguage(ctx context.Context, id string, language string) ApiGetItemsByIdRemotesearchSubtitlesByLanguageRequest

	// GetItemsByIdRemotesearchSubtitlesByLanguageExecute executes the request
	//  @return []RemoteSubtitleInfo
	GetItemsByIdRemotesearchSubtitlesByLanguageExecute(r ApiGetItemsByIdRemotesearchSubtitlesByLanguageRequest) ([]RemoteSubtitleInfo, *http.Response, error)

	/*
	GetProvidersSubtitlesSubtitlesById Method for GetProvidersSubtitlesSubtitlesById

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@return ApiGetProvidersSubtitlesSubtitlesByIdRequest
	*/
	GetProvidersSubtitlesSubtitlesById(ctx context.Context, id string) ApiGetProvidersSubtitlesSubtitlesByIdRequest

	// GetProvidersSubtitlesSubtitlesByIdExecute executes the request
	GetProvidersSubtitlesSubtitlesByIdExecute(r ApiGetProvidersSubtitlesSubtitlesByIdRequest) (*http.Response, error)

	/*
	GetVideosByIdByMediasourceidSubtitlesByIndexByFormat Gets subtitles in a specified format.

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@param mediaSourceId MediaSourceId
	@param index The subtitle stream index
	@param format Format
	@return ApiGetVideosByIdByMediasourceidSubtitlesByIndexByFormatRequest
	*/
	GetVideosByIdByMediasourceidSubtitlesByIndexByFormat(ctx context.Context, id string, mediaSourceId string, index int32, format string) ApiGetVideosByIdByMediasourceidSubtitlesByIndexByFormatRequest

	// GetVideosByIdByMediasourceidSubtitlesByIndexByFormatExecute executes the request
	GetVideosByIdByMediasourceidSubtitlesByIndexByFormatExecute(r ApiGetVideosByIdByMediasourceidSubtitlesByIndexByFormatRequest) (*http.Response, error)

	/*
	GetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat Gets subtitles in a specified format.

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@param mediaSourceId MediaSourceId
	@param index The subtitle stream index
	@param format Format
	@param startPositionTicks StartPositionTicks
	@return ApiGetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormatRequest
	*/
	GetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat(ctx context.Context, id string, mediaSourceId string, index int32, format string, startPositionTicks int64) ApiGetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormatRequest

	// GetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormatExecute executes the request
	GetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormatExecute(r ApiGetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormatRequest) (*http.Response, error)

	/*
	PostItemsByIdRemotesearchSubtitlesBySubtitleid Method for PostItemsByIdRemotesearchSubtitlesBySubtitleid

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@param subtitleId SubtitleId
	@return ApiPostItemsByIdRemotesearchSubtitlesBySubtitleidRequest
	*/
	PostItemsByIdRemotesearchSubtitlesBySubtitleid(ctx context.Context, id string, subtitleId string) ApiPostItemsByIdRemotesearchSubtitlesBySubtitleidRequest

	// PostItemsByIdRemotesearchSubtitlesBySubtitleidExecute executes the request
	PostItemsByIdRemotesearchSubtitlesBySubtitleidExecute(r ApiPostItemsByIdRemotesearchSubtitlesBySubtitleidRequest) (*http.Response, error)
}

// SubtitleServiceAPIService SubtitleServiceAPI service
type SubtitleServiceAPIService service

type ApiDeleteVideosByIdSubtitlesByIndexRequest struct {
	ctx context.Context
	ApiService SubtitleServiceAPI
	id string
	index int32
}

func (r ApiDeleteVideosByIdSubtitlesByIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVideosByIdSubtitlesByIndexExecute(r)
}

/*
DeleteVideosByIdSubtitlesByIndex Deletes an external subtitle file

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param index The subtitle stream index
 @return ApiDeleteVideosByIdSubtitlesByIndexRequest
*/
func (a *SubtitleServiceAPIService) DeleteVideosByIdSubtitlesByIndex(ctx context.Context, id string, index int32) ApiDeleteVideosByIdSubtitlesByIndexRequest {
	return ApiDeleteVideosByIdSubtitlesByIndexRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		index: index,
	}
}

// Execute executes the request
func (a *SubtitleServiceAPIService) DeleteVideosByIdSubtitlesByIndexExecute(r ApiDeleteVideosByIdSubtitlesByIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleServiceAPIService.DeleteVideosByIdSubtitlesByIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/Subtitles/{Index}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetItemsByIdRemotesearchSubtitlesByLanguageRequest struct {
	ctx context.Context
	ApiService SubtitleServiceAPI
	id string
	language string
	isPerfectMatch *bool
	isForced *bool
}

// IsPerfectMatch
func (r ApiGetItemsByIdRemotesearchSubtitlesByLanguageRequest) IsPerfectMatch(isPerfectMatch bool) ApiGetItemsByIdRemotesearchSubtitlesByLanguageRequest {
	r.isPerfectMatch = &isPerfectMatch
	return r
}

// IsForced
func (r ApiGetItemsByIdRemotesearchSubtitlesByLanguageRequest) IsForced(isForced bool) ApiGetItemsByIdRemotesearchSubtitlesByLanguageRequest {
	r.isForced = &isForced
	return r
}

func (r ApiGetItemsByIdRemotesearchSubtitlesByLanguageRequest) Execute() ([]RemoteSubtitleInfo, *http.Response, error) {
	return r.ApiService.GetItemsByIdRemotesearchSubtitlesByLanguageExecute(r)
}

/*
GetItemsByIdRemotesearchSubtitlesByLanguage Method for GetItemsByIdRemotesearchSubtitlesByLanguage

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param language Language
 @return ApiGetItemsByIdRemotesearchSubtitlesByLanguageRequest
*/
func (a *SubtitleServiceAPIService) GetItemsByIdRemotesearchSubtitlesByLanguage(ctx context.Context, id string, language string) ApiGetItemsByIdRemotesearchSubtitlesByLanguageRequest {
	return ApiGetItemsByIdRemotesearchSubtitlesByLanguageRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		language: language,
	}
}

// Execute executes the request
//  @return []RemoteSubtitleInfo
func (a *SubtitleServiceAPIService) GetItemsByIdRemotesearchSubtitlesByLanguageExecute(r ApiGetItemsByIdRemotesearchSubtitlesByLanguageRequest) ([]RemoteSubtitleInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RemoteSubtitleInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleServiceAPIService.GetItemsByIdRemotesearchSubtitlesByLanguage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/RemoteSearch/Subtitles/{Language}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Language"+"}", url.PathEscape(parameterValueToString(r.language, "language")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.isPerfectMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsPerfectMatch", r.isPerfectMatch, "form", "")
	}
	if r.isForced != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsForced", r.isForced, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProvidersSubtitlesSubtitlesByIdRequest struct {
	ctx context.Context
	ApiService SubtitleServiceAPI
	id string
}

func (r ApiGetProvidersSubtitlesSubtitlesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetProvidersSubtitlesSubtitlesByIdExecute(r)
}

/*
GetProvidersSubtitlesSubtitlesById Method for GetProvidersSubtitlesSubtitlesById

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return ApiGetProvidersSubtitlesSubtitlesByIdRequest
*/
func (a *SubtitleServiceAPIService) GetProvidersSubtitlesSubtitlesById(ctx context.Context, id string) ApiGetProvidersSubtitlesSubtitlesByIdRequest {
	return ApiGetProvidersSubtitlesSubtitlesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *SubtitleServiceAPIService) GetProvidersSubtitlesSubtitlesByIdExecute(r ApiGetProvidersSubtitlesSubtitlesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleServiceAPIService.GetProvidersSubtitlesSubtitlesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Providers/Subtitles/Subtitles/{Id}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetVideosByIdByMediasourceidSubtitlesByIndexByFormatRequest struct {
	ctx context.Context
	ApiService SubtitleServiceAPI
	id string
	mediaSourceId string
	index int32
	format string
	startPositionTicks *int64
	endPositionTicks *int64
	copyTimestamps *bool
}

// StartPositionTicks
func (r ApiGetVideosByIdByMediasourceidSubtitlesByIndexByFormatRequest) StartPositionTicks(startPositionTicks int64) ApiGetVideosByIdByMediasourceidSubtitlesByIndexByFormatRequest {
	r.startPositionTicks = &startPositionTicks
	return r
}

// EndPositionTicks
func (r ApiGetVideosByIdByMediasourceidSubtitlesByIndexByFormatRequest) EndPositionTicks(endPositionTicks int64) ApiGetVideosByIdByMediasourceidSubtitlesByIndexByFormatRequest {
	r.endPositionTicks = &endPositionTicks
	return r
}

// CopyTimestamps
func (r ApiGetVideosByIdByMediasourceidSubtitlesByIndexByFormatRequest) CopyTimestamps(copyTimestamps bool) ApiGetVideosByIdByMediasourceidSubtitlesByIndexByFormatRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

func (r ApiGetVideosByIdByMediasourceidSubtitlesByIndexByFormatRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetVideosByIdByMediasourceidSubtitlesByIndexByFormatExecute(r)
}

/*
GetVideosByIdByMediasourceidSubtitlesByIndexByFormat Gets subtitles in a specified format.

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param mediaSourceId MediaSourceId
 @param index The subtitle stream index
 @param format Format
 @return ApiGetVideosByIdByMediasourceidSubtitlesByIndexByFormatRequest
*/
func (a *SubtitleServiceAPIService) GetVideosByIdByMediasourceidSubtitlesByIndexByFormat(ctx context.Context, id string, mediaSourceId string, index int32, format string) ApiGetVideosByIdByMediasourceidSubtitlesByIndexByFormatRequest {
	return ApiGetVideosByIdByMediasourceidSubtitlesByIndexByFormatRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		mediaSourceId: mediaSourceId,
		index: index,
		format: format,
	}
}

// Execute executes the request
func (a *SubtitleServiceAPIService) GetVideosByIdByMediasourceidSubtitlesByIndexByFormatExecute(r ApiGetVideosByIdByMediasourceidSubtitlesByIndexByFormatRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleServiceAPIService.GetVideosByIdByMediasourceidSubtitlesByIndexByFormat")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/{MediaSourceId}/Subtitles/{Index}/Stream.{Format}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"MediaSourceId"+"}", url.PathEscape(parameterValueToString(r.mediaSourceId, "mediaSourceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Format"+"}", url.PathEscape(parameterValueToString(r.format, "format")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startPositionTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartPositionTicks", r.startPositionTicks, "form", "")
	}
	if r.endPositionTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EndPositionTicks", r.endPositionTicks, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormatRequest struct {
	ctx context.Context
	ApiService SubtitleServiceAPI
	id string
	mediaSourceId string
	index int32
	format string
	startPositionTicks int64
	endPositionTicks *int64
	copyTimestamps *bool
}

// EndPositionTicks
func (r ApiGetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormatRequest) EndPositionTicks(endPositionTicks int64) ApiGetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormatRequest {
	r.endPositionTicks = &endPositionTicks
	return r
}

// CopyTimestamps
func (r ApiGetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormatRequest) CopyTimestamps(copyTimestamps bool) ApiGetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormatRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

func (r ApiGetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormatRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormatExecute(r)
}

/*
GetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat Gets subtitles in a specified format.

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param mediaSourceId MediaSourceId
 @param index The subtitle stream index
 @param format Format
 @param startPositionTicks StartPositionTicks
 @return ApiGetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormatRequest
*/
func (a *SubtitleServiceAPIService) GetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat(ctx context.Context, id string, mediaSourceId string, index int32, format string, startPositionTicks int64) ApiGetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormatRequest {
	return ApiGetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormatRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		mediaSourceId: mediaSourceId,
		index: index,
		format: format,
		startPositionTicks: startPositionTicks,
	}
}

// Execute executes the request
func (a *SubtitleServiceAPIService) GetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormatExecute(r ApiGetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormatRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleServiceAPIService.GetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/{MediaSourceId}/Subtitles/{Index}/{StartPositionTicks}/Stream.{Format}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"MediaSourceId"+"}", url.PathEscape(parameterValueToString(r.mediaSourceId, "mediaSourceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Format"+"}", url.PathEscape(parameterValueToString(r.format, "format")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"StartPositionTicks"+"}", url.PathEscape(parameterValueToString(r.startPositionTicks, "startPositionTicks")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.endPositionTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EndPositionTicks", r.endPositionTicks, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostItemsByIdRemotesearchSubtitlesBySubtitleidRequest struct {
	ctx context.Context
	ApiService SubtitleServiceAPI
	id string
	subtitleId string
}

func (r ApiPostItemsByIdRemotesearchSubtitlesBySubtitleidRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostItemsByIdRemotesearchSubtitlesBySubtitleidExecute(r)
}

/*
PostItemsByIdRemotesearchSubtitlesBySubtitleid Method for PostItemsByIdRemotesearchSubtitlesBySubtitleid

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param subtitleId SubtitleId
 @return ApiPostItemsByIdRemotesearchSubtitlesBySubtitleidRequest
*/
func (a *SubtitleServiceAPIService) PostItemsByIdRemotesearchSubtitlesBySubtitleid(ctx context.Context, id string, subtitleId string) ApiPostItemsByIdRemotesearchSubtitlesBySubtitleidRequest {
	return ApiPostItemsByIdRemotesearchSubtitlesBySubtitleidRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		subtitleId: subtitleId,
	}
}

// Execute executes the request
func (a *SubtitleServiceAPIService) PostItemsByIdRemotesearchSubtitlesBySubtitleidExecute(r ApiPostItemsByIdRemotesearchSubtitlesBySubtitleidRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleServiceAPIService.PostItemsByIdRemotesearchSubtitlesBySubtitleid")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/RemoteSearch/Subtitles/{SubtitleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"SubtitleId"+"}", url.PathEscape(parameterValueToString(r.subtitleId, "subtitleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
