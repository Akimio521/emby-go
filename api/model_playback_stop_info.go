/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the PlaybackStopInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlaybackStopInfo{}

// PlaybackStopInfo struct for PlaybackStopInfo
type PlaybackStopInfo struct {
	NowPlayingQueue []QueueItem `json:"NowPlayingQueue,omitempty"`
	PlaylistItemId *string `json:"PlaylistItemId,omitempty"`
	Item *BaseItemDto `json:"Item,omitempty"`
	ItemId *string `json:"ItemId,omitempty"`
	SessionId *string `json:"SessionId,omitempty"`
	MediaSourceId *string `json:"MediaSourceId,omitempty"`
	PositionTicks NullableInt64 `json:"PositionTicks,omitempty"`
	LiveStreamId *string `json:"LiveStreamId,omitempty"`
	PlaySessionId *string `json:"PlaySessionId,omitempty"`
	Failed *bool `json:"Failed,omitempty"`
	NextMediaType *string `json:"NextMediaType,omitempty"`
}

// NewPlaybackStopInfo instantiates a new PlaybackStopInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlaybackStopInfo() *PlaybackStopInfo {
	this := PlaybackStopInfo{}
	return &this
}

// NewPlaybackStopInfoWithDefaults instantiates a new PlaybackStopInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlaybackStopInfoWithDefaults() *PlaybackStopInfo {
	this := PlaybackStopInfo{}
	return &this
}

// GetNowPlayingQueue returns the NowPlayingQueue field value if set, zero value otherwise.
func (o *PlaybackStopInfo) GetNowPlayingQueue() []QueueItem {
	if o == nil || IsNil(o.NowPlayingQueue) {
		var ret []QueueItem
		return ret
	}
	return o.NowPlayingQueue
}

// GetNowPlayingQueueOk returns a tuple with the NowPlayingQueue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybackStopInfo) GetNowPlayingQueueOk() ([]QueueItem, bool) {
	if o == nil || IsNil(o.NowPlayingQueue) {
		return nil, false
	}
	return o.NowPlayingQueue, true
}

// HasNowPlayingQueue returns a boolean if a field has been set.
func (o *PlaybackStopInfo) HasNowPlayingQueue() bool {
	if o != nil && !IsNil(o.NowPlayingQueue) {
		return true
	}

	return false
}

// SetNowPlayingQueue gets a reference to the given []QueueItem and assigns it to the NowPlayingQueue field.
func (o *PlaybackStopInfo) SetNowPlayingQueue(v []QueueItem) {
	o.NowPlayingQueue = v
}

// GetPlaylistItemId returns the PlaylistItemId field value if set, zero value otherwise.
func (o *PlaybackStopInfo) GetPlaylistItemId() string {
	if o == nil || IsNil(o.PlaylistItemId) {
		var ret string
		return ret
	}
	return *o.PlaylistItemId
}

// GetPlaylistItemIdOk returns a tuple with the PlaylistItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybackStopInfo) GetPlaylistItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.PlaylistItemId) {
		return nil, false
	}
	return o.PlaylistItemId, true
}

// HasPlaylistItemId returns a boolean if a field has been set.
func (o *PlaybackStopInfo) HasPlaylistItemId() bool {
	if o != nil && !IsNil(o.PlaylistItemId) {
		return true
	}

	return false
}

// SetPlaylistItemId gets a reference to the given string and assigns it to the PlaylistItemId field.
func (o *PlaybackStopInfo) SetPlaylistItemId(v string) {
	o.PlaylistItemId = &v
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *PlaybackStopInfo) GetItem() BaseItemDto {
	if o == nil || IsNil(o.Item) {
		var ret BaseItemDto
		return ret
	}
	return *o.Item
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybackStopInfo) GetItemOk() (*BaseItemDto, bool) {
	if o == nil || IsNil(o.Item) {
		return nil, false
	}
	return o.Item, true
}

// HasItem returns a boolean if a field has been set.
func (o *PlaybackStopInfo) HasItem() bool {
	if o != nil && !IsNil(o.Item) {
		return true
	}

	return false
}

// SetItem gets a reference to the given BaseItemDto and assigns it to the Item field.
func (o *PlaybackStopInfo) SetItem(v BaseItemDto) {
	o.Item = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *PlaybackStopInfo) GetItemId() string {
	if o == nil || IsNil(o.ItemId) {
		var ret string
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybackStopInfo) GetItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.ItemId) {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *PlaybackStopInfo) HasItemId() bool {
	if o != nil && !IsNil(o.ItemId) {
		return true
	}

	return false
}

// SetItemId gets a reference to the given string and assigns it to the ItemId field.
func (o *PlaybackStopInfo) SetItemId(v string) {
	o.ItemId = &v
}

// GetSessionId returns the SessionId field value if set, zero value otherwise.
func (o *PlaybackStopInfo) GetSessionId() string {
	if o == nil || IsNil(o.SessionId) {
		var ret string
		return ret
	}
	return *o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybackStopInfo) GetSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.SessionId) {
		return nil, false
	}
	return o.SessionId, true
}

// HasSessionId returns a boolean if a field has been set.
func (o *PlaybackStopInfo) HasSessionId() bool {
	if o != nil && !IsNil(o.SessionId) {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given string and assigns it to the SessionId field.
func (o *PlaybackStopInfo) SetSessionId(v string) {
	o.SessionId = &v
}

// GetMediaSourceId returns the MediaSourceId field value if set, zero value otherwise.
func (o *PlaybackStopInfo) GetMediaSourceId() string {
	if o == nil || IsNil(o.MediaSourceId) {
		var ret string
		return ret
	}
	return *o.MediaSourceId
}

// GetMediaSourceIdOk returns a tuple with the MediaSourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybackStopInfo) GetMediaSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.MediaSourceId) {
		return nil, false
	}
	return o.MediaSourceId, true
}

// HasMediaSourceId returns a boolean if a field has been set.
func (o *PlaybackStopInfo) HasMediaSourceId() bool {
	if o != nil && !IsNil(o.MediaSourceId) {
		return true
	}

	return false
}

// SetMediaSourceId gets a reference to the given string and assigns it to the MediaSourceId field.
func (o *PlaybackStopInfo) SetMediaSourceId(v string) {
	o.MediaSourceId = &v
}

// GetPositionTicks returns the PositionTicks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlaybackStopInfo) GetPositionTicks() int64 {
	if o == nil || IsNil(o.PositionTicks.Get()) {
		var ret int64
		return ret
	}
	return *o.PositionTicks.Get()
}

// GetPositionTicksOk returns a tuple with the PositionTicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlaybackStopInfo) GetPositionTicksOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PositionTicks.Get(), o.PositionTicks.IsSet()
}

// HasPositionTicks returns a boolean if a field has been set.
func (o *PlaybackStopInfo) HasPositionTicks() bool {
	if o != nil && o.PositionTicks.IsSet() {
		return true
	}

	return false
}

// SetPositionTicks gets a reference to the given NullableInt64 and assigns it to the PositionTicks field.
func (o *PlaybackStopInfo) SetPositionTicks(v int64) {
	o.PositionTicks.Set(&v)
}
// SetPositionTicksNil sets the value for PositionTicks to be an explicit nil
func (o *PlaybackStopInfo) SetPositionTicksNil() {
	o.PositionTicks.Set(nil)
}

// UnsetPositionTicks ensures that no value is present for PositionTicks, not even an explicit nil
func (o *PlaybackStopInfo) UnsetPositionTicks() {
	o.PositionTicks.Unset()
}

// GetLiveStreamId returns the LiveStreamId field value if set, zero value otherwise.
func (o *PlaybackStopInfo) GetLiveStreamId() string {
	if o == nil || IsNil(o.LiveStreamId) {
		var ret string
		return ret
	}
	return *o.LiveStreamId
}

// GetLiveStreamIdOk returns a tuple with the LiveStreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybackStopInfo) GetLiveStreamIdOk() (*string, bool) {
	if o == nil || IsNil(o.LiveStreamId) {
		return nil, false
	}
	return o.LiveStreamId, true
}

// HasLiveStreamId returns a boolean if a field has been set.
func (o *PlaybackStopInfo) HasLiveStreamId() bool {
	if o != nil && !IsNil(o.LiveStreamId) {
		return true
	}

	return false
}

// SetLiveStreamId gets a reference to the given string and assigns it to the LiveStreamId field.
func (o *PlaybackStopInfo) SetLiveStreamId(v string) {
	o.LiveStreamId = &v
}

// GetPlaySessionId returns the PlaySessionId field value if set, zero value otherwise.
func (o *PlaybackStopInfo) GetPlaySessionId() string {
	if o == nil || IsNil(o.PlaySessionId) {
		var ret string
		return ret
	}
	return *o.PlaySessionId
}

// GetPlaySessionIdOk returns a tuple with the PlaySessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybackStopInfo) GetPlaySessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.PlaySessionId) {
		return nil, false
	}
	return o.PlaySessionId, true
}

// HasPlaySessionId returns a boolean if a field has been set.
func (o *PlaybackStopInfo) HasPlaySessionId() bool {
	if o != nil && !IsNil(o.PlaySessionId) {
		return true
	}

	return false
}

// SetPlaySessionId gets a reference to the given string and assigns it to the PlaySessionId field.
func (o *PlaybackStopInfo) SetPlaySessionId(v string) {
	o.PlaySessionId = &v
}

// GetFailed returns the Failed field value if set, zero value otherwise.
func (o *PlaybackStopInfo) GetFailed() bool {
	if o == nil || IsNil(o.Failed) {
		var ret bool
		return ret
	}
	return *o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybackStopInfo) GetFailedOk() (*bool, bool) {
	if o == nil || IsNil(o.Failed) {
		return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *PlaybackStopInfo) HasFailed() bool {
	if o != nil && !IsNil(o.Failed) {
		return true
	}

	return false
}

// SetFailed gets a reference to the given bool and assigns it to the Failed field.
func (o *PlaybackStopInfo) SetFailed(v bool) {
	o.Failed = &v
}

// GetNextMediaType returns the NextMediaType field value if set, zero value otherwise.
func (o *PlaybackStopInfo) GetNextMediaType() string {
	if o == nil || IsNil(o.NextMediaType) {
		var ret string
		return ret
	}
	return *o.NextMediaType
}

// GetNextMediaTypeOk returns a tuple with the NextMediaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybackStopInfo) GetNextMediaTypeOk() (*string, bool) {
	if o == nil || IsNil(o.NextMediaType) {
		return nil, false
	}
	return o.NextMediaType, true
}

// HasNextMediaType returns a boolean if a field has been set.
func (o *PlaybackStopInfo) HasNextMediaType() bool {
	if o != nil && !IsNil(o.NextMediaType) {
		return true
	}

	return false
}

// SetNextMediaType gets a reference to the given string and assigns it to the NextMediaType field.
func (o *PlaybackStopInfo) SetNextMediaType(v string) {
	o.NextMediaType = &v
}

func (o PlaybackStopInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlaybackStopInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NowPlayingQueue) {
		toSerialize["NowPlayingQueue"] = o.NowPlayingQueue
	}
	if !IsNil(o.PlaylistItemId) {
		toSerialize["PlaylistItemId"] = o.PlaylistItemId
	}
	if !IsNil(o.Item) {
		toSerialize["Item"] = o.Item
	}
	if !IsNil(o.ItemId) {
		toSerialize["ItemId"] = o.ItemId
	}
	if !IsNil(o.SessionId) {
		toSerialize["SessionId"] = o.SessionId
	}
	if !IsNil(o.MediaSourceId) {
		toSerialize["MediaSourceId"] = o.MediaSourceId
	}
	if o.PositionTicks.IsSet() {
		toSerialize["PositionTicks"] = o.PositionTicks.Get()
	}
	if !IsNil(o.LiveStreamId) {
		toSerialize["LiveStreamId"] = o.LiveStreamId
	}
	if !IsNil(o.PlaySessionId) {
		toSerialize["PlaySessionId"] = o.PlaySessionId
	}
	if !IsNil(o.Failed) {
		toSerialize["Failed"] = o.Failed
	}
	if !IsNil(o.NextMediaType) {
		toSerialize["NextMediaType"] = o.NextMediaType
	}
	return toSerialize, nil
}

type NullablePlaybackStopInfo struct {
	value *PlaybackStopInfo
	isSet bool
}

func (v NullablePlaybackStopInfo) Get() *PlaybackStopInfo {
	return v.value
}

func (v *NullablePlaybackStopInfo) Set(val *PlaybackStopInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePlaybackStopInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePlaybackStopInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlaybackStopInfo(val *PlaybackStopInfo) *NullablePlaybackStopInfo {
	return &NullablePlaybackStopInfo{value: val, isSet: true}
}

func (v NullablePlaybackStopInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlaybackStopInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


