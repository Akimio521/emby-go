/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
)


type DeviceServiceAPI interface {

	/*
	DeleteDevices Deletes a device

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteDevicesRequest
	*/
	DeleteDevices(ctx context.Context) ApiDeleteDevicesRequest

	// DeleteDevicesExecute executes the request
	DeleteDevicesExecute(r ApiDeleteDevicesRequest) (*http.Response, error)

	/*
	GetDevices Gets all devices

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetDevicesRequest
	*/
	GetDevices(ctx context.Context) ApiGetDevicesRequest

	// GetDevicesExecute executes the request
	//  @return QueryResultDevicesDeviceInfo
	GetDevicesExecute(r ApiGetDevicesRequest) (*QueryResultDevicesDeviceInfo, *http.Response, error)

	/*
	GetDevicesCamerauploads Gets camera upload history for a device

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetDevicesCamerauploadsRequest
	*/
	GetDevicesCamerauploads(ctx context.Context) ApiGetDevicesCamerauploadsRequest

	// GetDevicesCamerauploadsExecute executes the request
	//  @return DevicesContentUploadHistory
	GetDevicesCamerauploadsExecute(r ApiGetDevicesCamerauploadsRequest) (*DevicesContentUploadHistory, *http.Response, error)

	/*
	GetDevicesInfo Gets info for a device

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetDevicesInfoRequest
	*/
	GetDevicesInfo(ctx context.Context) ApiGetDevicesInfoRequest

	// GetDevicesInfoExecute executes the request
	//  @return DevicesDeviceInfo
	GetDevicesInfoExecute(r ApiGetDevicesInfoRequest) (*DevicesDeviceInfo, *http.Response, error)

	/*
	GetDevicesOptions Gets options for a device

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetDevicesOptionsRequest
	*/
	GetDevicesOptions(ctx context.Context) ApiGetDevicesOptionsRequest

	// GetDevicesOptionsExecute executes the request
	//  @return DevicesDeviceOptions
	GetDevicesOptionsExecute(r ApiGetDevicesOptionsRequest) (*DevicesDeviceOptions, *http.Response, error)

	/*
	PostDevicesCamerauploads Uploads content

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostDevicesCamerauploadsRequest
	*/
	PostDevicesCamerauploads(ctx context.Context) ApiPostDevicesCamerauploadsRequest

	// PostDevicesCamerauploadsExecute executes the request
	PostDevicesCamerauploadsExecute(r ApiPostDevicesCamerauploadsRequest) (*http.Response, error)

	/*
	PostDevicesOptions Updates device options

	Requires authentication as administrator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostDevicesOptionsRequest
	*/
	PostDevicesOptions(ctx context.Context) ApiPostDevicesOptionsRequest

	// PostDevicesOptionsExecute executes the request
	PostDevicesOptionsExecute(r ApiPostDevicesOptionsRequest) (*http.Response, error)
}

// DeviceServiceAPIService DeviceServiceAPI service
type DeviceServiceAPIService service

type ApiDeleteDevicesRequest struct {
	ctx context.Context
	ApiService DeviceServiceAPI
	id *string
}

// Device Id
func (r ApiDeleteDevicesRequest) Id(id string) ApiDeleteDevicesRequest {
	r.id = &id
	return r
}

func (r ApiDeleteDevicesRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteDevicesExecute(r)
}

/*
DeleteDevices Deletes a device

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteDevicesRequest
*/
func (a *DeviceServiceAPIService) DeleteDevices(ctx context.Context) ApiDeleteDevicesRequest {
	return ApiDeleteDevicesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DeviceServiceAPIService) DeleteDevicesExecute(r ApiDeleteDevicesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceServiceAPIService.DeleteDevices")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Devices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id == nil {
		return nil, reportError("id is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Id", r.id, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDevicesRequest struct {
	ctx context.Context
	ApiService DeviceServiceAPI
}

func (r ApiGetDevicesRequest) Execute() (*QueryResultDevicesDeviceInfo, *http.Response, error) {
	return r.ApiService.GetDevicesExecute(r)
}

/*
GetDevices Gets all devices

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetDevicesRequest
*/
func (a *DeviceServiceAPIService) GetDevices(ctx context.Context) ApiGetDevicesRequest {
	return ApiGetDevicesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return QueryResultDevicesDeviceInfo
func (a *DeviceServiceAPIService) GetDevicesExecute(r ApiGetDevicesRequest) (*QueryResultDevicesDeviceInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryResultDevicesDeviceInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceServiceAPIService.GetDevices")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Devices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDevicesCamerauploadsRequest struct {
	ctx context.Context
	ApiService DeviceServiceAPI
	deviceId *string
}

// Device Id
func (r ApiGetDevicesCamerauploadsRequest) DeviceId(deviceId string) ApiGetDevicesCamerauploadsRequest {
	r.deviceId = &deviceId
	return r
}

func (r ApiGetDevicesCamerauploadsRequest) Execute() (*DevicesContentUploadHistory, *http.Response, error) {
	return r.ApiService.GetDevicesCamerauploadsExecute(r)
}

/*
GetDevicesCamerauploads Gets camera upload history for a device

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetDevicesCamerauploadsRequest
*/
func (a *DeviceServiceAPIService) GetDevicesCamerauploads(ctx context.Context) ApiGetDevicesCamerauploadsRequest {
	return ApiGetDevicesCamerauploadsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DevicesContentUploadHistory
func (a *DeviceServiceAPIService) GetDevicesCamerauploadsExecute(r ApiGetDevicesCamerauploadsRequest) (*DevicesContentUploadHistory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DevicesContentUploadHistory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceServiceAPIService.GetDevicesCamerauploads")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Devices/CameraUploads"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDevicesInfoRequest struct {
	ctx context.Context
	ApiService DeviceServiceAPI
	id *string
}

// Device Id
func (r ApiGetDevicesInfoRequest) Id(id string) ApiGetDevicesInfoRequest {
	r.id = &id
	return r
}

func (r ApiGetDevicesInfoRequest) Execute() (*DevicesDeviceInfo, *http.Response, error) {
	return r.ApiService.GetDevicesInfoExecute(r)
}

/*
GetDevicesInfo Gets info for a device

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetDevicesInfoRequest
*/
func (a *DeviceServiceAPIService) GetDevicesInfo(ctx context.Context) ApiGetDevicesInfoRequest {
	return ApiGetDevicesInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DevicesDeviceInfo
func (a *DeviceServiceAPIService) GetDevicesInfoExecute(r ApiGetDevicesInfoRequest) (*DevicesDeviceInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DevicesDeviceInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceServiceAPIService.GetDevicesInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Devices/Info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Id", r.id, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDevicesOptionsRequest struct {
	ctx context.Context
	ApiService DeviceServiceAPI
	id *string
}

// Device Id
func (r ApiGetDevicesOptionsRequest) Id(id string) ApiGetDevicesOptionsRequest {
	r.id = &id
	return r
}

func (r ApiGetDevicesOptionsRequest) Execute() (*DevicesDeviceOptions, *http.Response, error) {
	return r.ApiService.GetDevicesOptionsExecute(r)
}

/*
GetDevicesOptions Gets options for a device

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetDevicesOptionsRequest
*/
func (a *DeviceServiceAPIService) GetDevicesOptions(ctx context.Context) ApiGetDevicesOptionsRequest {
	return ApiGetDevicesOptionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DevicesDeviceOptions
func (a *DeviceServiceAPIService) GetDevicesOptionsExecute(r ApiGetDevicesOptionsRequest) (*DevicesDeviceOptions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DevicesDeviceOptions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceServiceAPIService.GetDevicesOptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Devices/Options"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Id", r.id, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostDevicesCamerauploadsRequest struct {
	ctx context.Context
	ApiService DeviceServiceAPI
	deviceId *string
	album *string
	name *string
	id *string
	body *os.File
}

// Device Id
func (r ApiPostDevicesCamerauploadsRequest) DeviceId(deviceId string) ApiPostDevicesCamerauploadsRequest {
	r.deviceId = &deviceId
	return r
}

// Album
func (r ApiPostDevicesCamerauploadsRequest) Album(album string) ApiPostDevicesCamerauploadsRequest {
	r.album = &album
	return r
}

// Name
func (r ApiPostDevicesCamerauploadsRequest) Name(name string) ApiPostDevicesCamerauploadsRequest {
	r.name = &name
	return r
}

// Id
func (r ApiPostDevicesCamerauploadsRequest) Id(id string) ApiPostDevicesCamerauploadsRequest {
	r.id = &id
	return r
}

// Binary stream
func (r ApiPostDevicesCamerauploadsRequest) Body(body *os.File) ApiPostDevicesCamerauploadsRequest {
	r.body = body
	return r
}

func (r ApiPostDevicesCamerauploadsRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostDevicesCamerauploadsExecute(r)
}

/*
PostDevicesCamerauploads Uploads content

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostDevicesCamerauploadsRequest
*/
func (a *DeviceServiceAPIService) PostDevicesCamerauploads(ctx context.Context) ApiPostDevicesCamerauploadsRequest {
	return ApiPostDevicesCamerauploadsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DeviceServiceAPIService) PostDevicesCamerauploadsExecute(r ApiPostDevicesCamerauploadsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceServiceAPIService.PostDevicesCamerauploads")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Devices/CameraUploads"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return nil, reportError("deviceId is required and must be specified")
	}
	if r.album == nil {
		return nil, reportError("album is required and must be specified")
	}
	if r.name == nil {
		return nil, reportError("name is required and must be specified")
	}
	if r.id == nil {
		return nil, reportError("id is required and must be specified")
	}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "Album", r.album, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "Name", r.name, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "Id", r.id, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostDevicesOptionsRequest struct {
	ctx context.Context
	ApiService DeviceServiceAPI
	devicesDeviceOptions *DevicesDeviceOptions
}

// DeviceOptions: 
func (r ApiPostDevicesOptionsRequest) DevicesDeviceOptions(devicesDeviceOptions DevicesDeviceOptions) ApiPostDevicesOptionsRequest {
	r.devicesDeviceOptions = &devicesDeviceOptions
	return r
}

func (r ApiPostDevicesOptionsRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostDevicesOptionsExecute(r)
}

/*
PostDevicesOptions Updates device options

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostDevicesOptionsRequest
*/
func (a *DeviceServiceAPIService) PostDevicesOptions(ctx context.Context) ApiPostDevicesOptionsRequest {
	return ApiPostDevicesOptionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DeviceServiceAPIService) PostDevicesOptionsExecute(r ApiPostDevicesOptionsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceServiceAPIService.PostDevicesOptions")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Devices/Options"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.devicesDeviceOptions == nil {
		return nil, reportError("devicesDeviceOptions is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.devicesDeviceOptions
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
