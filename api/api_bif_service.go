/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type BifServiceAPI interface {

	/*
	GetItemsByIdThumbnailset Method for GetItemsByIdThumbnailset

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@return ApiGetItemsByIdThumbnailsetRequest
	*/
	GetItemsByIdThumbnailset(ctx context.Context, id string) ApiGetItemsByIdThumbnailsetRequest

	// GetItemsByIdThumbnailsetExecute executes the request
	//  @return RokuMetadataApiThumbnailSetInfo
	GetItemsByIdThumbnailsetExecute(r ApiGetItemsByIdThumbnailsetRequest) (*RokuMetadataApiThumbnailSetInfo, *http.Response, error)

	/*
	GetVideosByIdIndexBif Method for GetVideosByIdIndexBif

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@return ApiGetVideosByIdIndexBifRequest
	*/
	GetVideosByIdIndexBif(ctx context.Context, id string) ApiGetVideosByIdIndexBifRequest

	// GetVideosByIdIndexBifExecute executes the request
	GetVideosByIdIndexBifExecute(r ApiGetVideosByIdIndexBifRequest) (*http.Response, error)
}

// BifServiceAPIService BifServiceAPI service
type BifServiceAPIService service

type ApiGetItemsByIdThumbnailsetRequest struct {
	ctx context.Context
	ApiService BifServiceAPI
	width *int32
	id string
}

func (r ApiGetItemsByIdThumbnailsetRequest) Width(width int32) ApiGetItemsByIdThumbnailsetRequest {
	r.width = &width
	return r
}

func (r ApiGetItemsByIdThumbnailsetRequest) Execute() (*RokuMetadataApiThumbnailSetInfo, *http.Response, error) {
	return r.ApiService.GetItemsByIdThumbnailsetExecute(r)
}

/*
GetItemsByIdThumbnailset Method for GetItemsByIdThumbnailset

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return ApiGetItemsByIdThumbnailsetRequest
*/
func (a *BifServiceAPIService) GetItemsByIdThumbnailset(ctx context.Context, id string) ApiGetItemsByIdThumbnailsetRequest {
	return ApiGetItemsByIdThumbnailsetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RokuMetadataApiThumbnailSetInfo
func (a *BifServiceAPIService) GetItemsByIdThumbnailsetExecute(r ApiGetItemsByIdThumbnailsetRequest) (*RokuMetadataApiThumbnailSetInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RokuMetadataApiThumbnailSetInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BifServiceAPIService.GetItemsByIdThumbnailset")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/ThumbnailSet"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.width == nil {
		return localVarReturnValue, nil, reportError("width is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVideosByIdIndexBifRequest struct {
	ctx context.Context
	ApiService BifServiceAPI
	width *int32
	id string
}

func (r ApiGetVideosByIdIndexBifRequest) Width(width int32) ApiGetVideosByIdIndexBifRequest {
	r.width = &width
	return r
}

func (r ApiGetVideosByIdIndexBifRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetVideosByIdIndexBifExecute(r)
}

/*
GetVideosByIdIndexBif Method for GetVideosByIdIndexBif

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return ApiGetVideosByIdIndexBifRequest
*/
func (a *BifServiceAPIService) GetVideosByIdIndexBif(ctx context.Context, id string) ApiGetVideosByIdIndexBifRequest {
	return ApiGetVideosByIdIndexBifRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *BifServiceAPIService) GetVideosByIdIndexBifExecute(r ApiGetVideosByIdIndexBifRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BifServiceAPIService.GetVideosByIdIndexBif")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/index.bif"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.width == nil {
		return nil, reportError("width is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
