/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type DynamicHlsServiceAPI interface {

	/*
	GetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer Method for GetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param playlistId
	@param segmentId
	@param segmentContainer SegmentContainer
	@param id Item Id
	@return ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest
	*/
	GetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer(ctx context.Context, playlistId string, segmentId string, segmentContainer string, id string) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest

	// GetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerExecute executes the request
	GetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerExecute(r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) (*http.Response, error)

	/*
	GetAudioByIdMainM3u8 Gets an audio stream using HTTP live streaming.

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@return ApiGetAudioByIdMainM3u8Request
	*/
	GetAudioByIdMainM3u8(ctx context.Context, id string) ApiGetAudioByIdMainM3u8Request

	// GetAudioByIdMainM3u8Execute executes the request
	GetAudioByIdMainM3u8Execute(r ApiGetAudioByIdMainM3u8Request) (*http.Response, error)

	/*
	GetAudioByIdMasterM3u8 Gets an audio stream using HTTP live streaming.

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@return ApiGetAudioByIdMasterM3u8Request
	*/
	GetAudioByIdMasterM3u8(ctx context.Context, id string) ApiGetAudioByIdMasterM3u8Request

	// GetAudioByIdMasterM3u8Execute executes the request
	GetAudioByIdMasterM3u8Execute(r ApiGetAudioByIdMasterM3u8Request) (*http.Response, error)

	/*
	GetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer Method for GetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param playlistId
	@param segmentId
	@param segmentContainer SegmentContainer
	@param id Item Id
	@return ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest
	*/
	GetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer(ctx context.Context, playlistId string, segmentId string, segmentContainer string, id string) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest

	// GetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerExecute executes the request
	GetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerExecute(r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) (*http.Response, error)

	/*
	GetVideosByIdMainM3u8 Gets a video stream using HTTP live streaming.

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@return ApiGetVideosByIdMainM3u8Request
	*/
	GetVideosByIdMainM3u8(ctx context.Context, id string) ApiGetVideosByIdMainM3u8Request

	// GetVideosByIdMainM3u8Execute executes the request
	GetVideosByIdMainM3u8Execute(r ApiGetVideosByIdMainM3u8Request) (*http.Response, error)

	/*
	GetVideosByIdMasterM3u8 Gets a video stream using HTTP live streaming.

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@return ApiGetVideosByIdMasterM3u8Request
	*/
	GetVideosByIdMasterM3u8(ctx context.Context, id string) ApiGetVideosByIdMasterM3u8Request

	// GetVideosByIdMasterM3u8Execute executes the request
	GetVideosByIdMasterM3u8Execute(r ApiGetVideosByIdMasterM3u8Request) (*http.Response, error)

	/*
	GetVideosByIdSubtitlesM3u8 Gets an HLS subtitle playlist.

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@return ApiGetVideosByIdSubtitlesM3u8Request
	*/
	GetVideosByIdSubtitlesM3u8(ctx context.Context, id string) ApiGetVideosByIdSubtitlesM3u8Request

	// GetVideosByIdSubtitlesM3u8Execute executes the request
	GetVideosByIdSubtitlesM3u8Execute(r ApiGetVideosByIdSubtitlesM3u8Request) (*http.Response, error)

	/*
	HeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer Method for HeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param playlistId
	@param segmentId
	@param segmentContainer SegmentContainer
	@param id Item Id
	@return ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest
	*/
	HeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer(ctx context.Context, playlistId string, segmentId string, segmentContainer string, id string) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest

	// HeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerExecute executes the request
	HeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerExecute(r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) (*http.Response, error)

	/*
	HeadAudioByIdMasterM3u8 Gets an audio stream using HTTP live streaming.

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@return ApiHeadAudioByIdMasterM3u8Request
	*/
	HeadAudioByIdMasterM3u8(ctx context.Context, id string) ApiHeadAudioByIdMasterM3u8Request

	// HeadAudioByIdMasterM3u8Execute executes the request
	HeadAudioByIdMasterM3u8Execute(r ApiHeadAudioByIdMasterM3u8Request) (*http.Response, error)

	/*
	HeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer Method for HeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param playlistId
	@param segmentId
	@param segmentContainer SegmentContainer
	@param id Item Id
	@return ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest
	*/
	HeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer(ctx context.Context, playlistId string, segmentId string, segmentContainer string, id string) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest

	// HeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerExecute executes the request
	HeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerExecute(r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) (*http.Response, error)

	/*
	HeadVideosByIdMasterM3u8 Gets a video stream using HTTP live streaming.

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@return ApiHeadVideosByIdMasterM3u8Request
	*/
	HeadVideosByIdMasterM3u8(ctx context.Context, id string) ApiHeadVideosByIdMasterM3u8Request

	// HeadVideosByIdMasterM3u8Execute executes the request
	HeadVideosByIdMasterM3u8Execute(r ApiHeadVideosByIdMasterM3u8Request) (*http.Response, error)
}

// DynamicHlsServiceAPIService DynamicHlsServiceAPI service
type DynamicHlsServiceAPIService service

type ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest struct {
	ctx context.Context
	ApiService DynamicHlsServiceAPI
	playlistId string
	segmentId string
	segmentContainer string
	id string
	container *string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *string
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Container
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Container(container string) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.container = &container
	return r
}

// Optional. The dlna device profile id to utilize.
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) DeviceProfileId(deviceProfileId string) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) DeviceId(deviceId string) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) AudioCodec(audioCodec string) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) AudioSampleRate(audioSampleRate int32) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) AudioBitRate(audioBitRate int32) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) AudioChannels(audioChannels int32) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) MaxAudioChannels(maxAudioChannels int32) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Static(static bool) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Profile(profile string) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Level(level string) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Framerate(framerate float32) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) MaxFramerate(maxFramerate float32) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) CopyTimestamps(copyTimestamps bool) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) StartTimeTicks(startTimeTicks int64) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Width(width int32) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Height(height int32) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) MaxWidth(maxWidth int32) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) MaxHeight(maxHeight int32) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) VideoBitRate(videoBitRate int32) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) SubtitleStreamIndex(subtitleStreamIndex int32) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) SubtitleMethod(subtitleMethod string) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) MaxRefFrames(maxRefFrames int32) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) MaxVideoBitDepth(maxVideoBitDepth int32) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) VideoCodec(videoCodec string) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) AudioStreamIndex(audioStreamIndex int32) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) VideoStreamIndex(videoStreamIndex int32) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerExecute(r)
}

/*
GetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer Method for GetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param playlistId
 @param segmentId
 @param segmentContainer SegmentContainer
 @param id Item Id
 @return ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest
*/
func (a *DynamicHlsServiceAPIService) GetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer(ctx context.Context, playlistId string, segmentId string, segmentContainer string, id string) ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	return ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest{
		ApiService: a,
		ctx: ctx,
		playlistId: playlistId,
		segmentId: segmentId,
		segmentContainer: segmentContainer,
		id: id,
	}
}

// Execute executes the request
func (a *DynamicHlsServiceAPIService) GetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerExecute(r ApiGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicHlsServiceAPIService.GetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Audio/{Id}/hls1/{PlaylistId}/{SegmentId}.{SegmentContainer}"
	localVarPath = strings.Replace(localVarPath, "{"+"PlaylistId"+"}", url.PathEscape(parameterValueToString(r.playlistId, "playlistId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"SegmentId"+"}", url.PathEscape(parameterValueToString(r.segmentId, "segmentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"SegmentContainer"+"}", url.PathEscape(parameterValueToString(r.segmentContainer, "segmentContainer")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.container == nil {
		return nil, reportError("container is required and must be specified")
	}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "form", "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Container", r.container, "form", "")
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "form", "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "form", "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "form", "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "form", "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "form", "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "form", "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "form", "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "form", "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "form", "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "form", "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "form", "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAudioByIdMainM3u8Request struct {
	ctx context.Context
	ApiService DynamicHlsServiceAPI
	id string
	container *string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *string
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Container
func (r ApiGetAudioByIdMainM3u8Request) Container(container string) ApiGetAudioByIdMainM3u8Request {
	r.container = &container
	return r
}

// Optional. The dlna device profile id to utilize.
func (r ApiGetAudioByIdMainM3u8Request) DeviceProfileId(deviceProfileId string) ApiGetAudioByIdMainM3u8Request {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r ApiGetAudioByIdMainM3u8Request) DeviceId(deviceId string) ApiGetAudioByIdMainM3u8Request {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r ApiGetAudioByIdMainM3u8Request) AudioCodec(audioCodec string) ApiGetAudioByIdMainM3u8Request {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r ApiGetAudioByIdMainM3u8Request) EnableAutoStreamCopy(enableAutoStreamCopy bool) ApiGetAudioByIdMainM3u8Request {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r ApiGetAudioByIdMainM3u8Request) AudioSampleRate(audioSampleRate int32) ApiGetAudioByIdMainM3u8Request {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r ApiGetAudioByIdMainM3u8Request) AudioBitRate(audioBitRate int32) ApiGetAudioByIdMainM3u8Request {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r ApiGetAudioByIdMainM3u8Request) AudioChannels(audioChannels int32) ApiGetAudioByIdMainM3u8Request {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r ApiGetAudioByIdMainM3u8Request) MaxAudioChannels(maxAudioChannels int32) ApiGetAudioByIdMainM3u8Request {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r ApiGetAudioByIdMainM3u8Request) Static(static bool) ApiGetAudioByIdMainM3u8Request {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r ApiGetAudioByIdMainM3u8Request) Profile(profile string) ApiGetAudioByIdMainM3u8Request {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r ApiGetAudioByIdMainM3u8Request) Level(level string) ApiGetAudioByIdMainM3u8Request {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiGetAudioByIdMainM3u8Request) Framerate(framerate float32) ApiGetAudioByIdMainM3u8Request {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiGetAudioByIdMainM3u8Request) MaxFramerate(maxFramerate float32) ApiGetAudioByIdMainM3u8Request {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r ApiGetAudioByIdMainM3u8Request) CopyTimestamps(copyTimestamps bool) ApiGetAudioByIdMainM3u8Request {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
func (r ApiGetAudioByIdMainM3u8Request) StartTimeTicks(startTimeTicks int64) ApiGetAudioByIdMainM3u8Request {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r ApiGetAudioByIdMainM3u8Request) Width(width int32) ApiGetAudioByIdMainM3u8Request {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r ApiGetAudioByIdMainM3u8Request) Height(height int32) ApiGetAudioByIdMainM3u8Request {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r ApiGetAudioByIdMainM3u8Request) MaxWidth(maxWidth int32) ApiGetAudioByIdMainM3u8Request {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r ApiGetAudioByIdMainM3u8Request) MaxHeight(maxHeight int32) ApiGetAudioByIdMainM3u8Request {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r ApiGetAudioByIdMainM3u8Request) VideoBitRate(videoBitRate int32) ApiGetAudioByIdMainM3u8Request {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r ApiGetAudioByIdMainM3u8Request) SubtitleStreamIndex(subtitleStreamIndex int32) ApiGetAudioByIdMainM3u8Request {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r ApiGetAudioByIdMainM3u8Request) SubtitleMethod(subtitleMethod string) ApiGetAudioByIdMainM3u8Request {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r ApiGetAudioByIdMainM3u8Request) MaxRefFrames(maxRefFrames int32) ApiGetAudioByIdMainM3u8Request {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r ApiGetAudioByIdMainM3u8Request) MaxVideoBitDepth(maxVideoBitDepth int32) ApiGetAudioByIdMainM3u8Request {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r ApiGetAudioByIdMainM3u8Request) VideoCodec(videoCodec string) ApiGetAudioByIdMainM3u8Request {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r ApiGetAudioByIdMainM3u8Request) AudioStreamIndex(audioStreamIndex int32) ApiGetAudioByIdMainM3u8Request {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r ApiGetAudioByIdMainM3u8Request) VideoStreamIndex(videoStreamIndex int32) ApiGetAudioByIdMainM3u8Request {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r ApiGetAudioByIdMainM3u8Request) Execute() (*http.Response, error) {
	return r.ApiService.GetAudioByIdMainM3u8Execute(r)
}

/*
GetAudioByIdMainM3u8 Gets an audio stream using HTTP live streaming.

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return ApiGetAudioByIdMainM3u8Request
*/
func (a *DynamicHlsServiceAPIService) GetAudioByIdMainM3u8(ctx context.Context, id string) ApiGetAudioByIdMainM3u8Request {
	return ApiGetAudioByIdMainM3u8Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DynamicHlsServiceAPIService) GetAudioByIdMainM3u8Execute(r ApiGetAudioByIdMainM3u8Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicHlsServiceAPIService.GetAudioByIdMainM3u8")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Audio/{Id}/main.m3u8"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.container == nil {
		return nil, reportError("container is required and must be specified")
	}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "form", "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Container", r.container, "form", "")
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "form", "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "form", "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "form", "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "form", "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "form", "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "form", "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "form", "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "form", "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "form", "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "form", "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "form", "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAudioByIdMasterM3u8Request struct {
	ctx context.Context
	ApiService DynamicHlsServiceAPI
	id string
	container *string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *string
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Container
func (r ApiGetAudioByIdMasterM3u8Request) Container(container string) ApiGetAudioByIdMasterM3u8Request {
	r.container = &container
	return r
}

// Optional. The dlna device profile id to utilize.
func (r ApiGetAudioByIdMasterM3u8Request) DeviceProfileId(deviceProfileId string) ApiGetAudioByIdMasterM3u8Request {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r ApiGetAudioByIdMasterM3u8Request) DeviceId(deviceId string) ApiGetAudioByIdMasterM3u8Request {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r ApiGetAudioByIdMasterM3u8Request) AudioCodec(audioCodec string) ApiGetAudioByIdMasterM3u8Request {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r ApiGetAudioByIdMasterM3u8Request) EnableAutoStreamCopy(enableAutoStreamCopy bool) ApiGetAudioByIdMasterM3u8Request {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r ApiGetAudioByIdMasterM3u8Request) AudioSampleRate(audioSampleRate int32) ApiGetAudioByIdMasterM3u8Request {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r ApiGetAudioByIdMasterM3u8Request) AudioBitRate(audioBitRate int32) ApiGetAudioByIdMasterM3u8Request {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r ApiGetAudioByIdMasterM3u8Request) AudioChannels(audioChannels int32) ApiGetAudioByIdMasterM3u8Request {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r ApiGetAudioByIdMasterM3u8Request) MaxAudioChannels(maxAudioChannels int32) ApiGetAudioByIdMasterM3u8Request {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r ApiGetAudioByIdMasterM3u8Request) Static(static bool) ApiGetAudioByIdMasterM3u8Request {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r ApiGetAudioByIdMasterM3u8Request) Profile(profile string) ApiGetAudioByIdMasterM3u8Request {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r ApiGetAudioByIdMasterM3u8Request) Level(level string) ApiGetAudioByIdMasterM3u8Request {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiGetAudioByIdMasterM3u8Request) Framerate(framerate float32) ApiGetAudioByIdMasterM3u8Request {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiGetAudioByIdMasterM3u8Request) MaxFramerate(maxFramerate float32) ApiGetAudioByIdMasterM3u8Request {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r ApiGetAudioByIdMasterM3u8Request) CopyTimestamps(copyTimestamps bool) ApiGetAudioByIdMasterM3u8Request {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
func (r ApiGetAudioByIdMasterM3u8Request) StartTimeTicks(startTimeTicks int64) ApiGetAudioByIdMasterM3u8Request {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r ApiGetAudioByIdMasterM3u8Request) Width(width int32) ApiGetAudioByIdMasterM3u8Request {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r ApiGetAudioByIdMasterM3u8Request) Height(height int32) ApiGetAudioByIdMasterM3u8Request {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r ApiGetAudioByIdMasterM3u8Request) MaxWidth(maxWidth int32) ApiGetAudioByIdMasterM3u8Request {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r ApiGetAudioByIdMasterM3u8Request) MaxHeight(maxHeight int32) ApiGetAudioByIdMasterM3u8Request {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r ApiGetAudioByIdMasterM3u8Request) VideoBitRate(videoBitRate int32) ApiGetAudioByIdMasterM3u8Request {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r ApiGetAudioByIdMasterM3u8Request) SubtitleStreamIndex(subtitleStreamIndex int32) ApiGetAudioByIdMasterM3u8Request {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r ApiGetAudioByIdMasterM3u8Request) SubtitleMethod(subtitleMethod string) ApiGetAudioByIdMasterM3u8Request {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r ApiGetAudioByIdMasterM3u8Request) MaxRefFrames(maxRefFrames int32) ApiGetAudioByIdMasterM3u8Request {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r ApiGetAudioByIdMasterM3u8Request) MaxVideoBitDepth(maxVideoBitDepth int32) ApiGetAudioByIdMasterM3u8Request {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r ApiGetAudioByIdMasterM3u8Request) VideoCodec(videoCodec string) ApiGetAudioByIdMasterM3u8Request {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r ApiGetAudioByIdMasterM3u8Request) AudioStreamIndex(audioStreamIndex int32) ApiGetAudioByIdMasterM3u8Request {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r ApiGetAudioByIdMasterM3u8Request) VideoStreamIndex(videoStreamIndex int32) ApiGetAudioByIdMasterM3u8Request {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r ApiGetAudioByIdMasterM3u8Request) Execute() (*http.Response, error) {
	return r.ApiService.GetAudioByIdMasterM3u8Execute(r)
}

/*
GetAudioByIdMasterM3u8 Gets an audio stream using HTTP live streaming.

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return ApiGetAudioByIdMasterM3u8Request
*/
func (a *DynamicHlsServiceAPIService) GetAudioByIdMasterM3u8(ctx context.Context, id string) ApiGetAudioByIdMasterM3u8Request {
	return ApiGetAudioByIdMasterM3u8Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DynamicHlsServiceAPIService) GetAudioByIdMasterM3u8Execute(r ApiGetAudioByIdMasterM3u8Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicHlsServiceAPIService.GetAudioByIdMasterM3u8")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Audio/{Id}/master.m3u8"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.container == nil {
		return nil, reportError("container is required and must be specified")
	}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "form", "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Container", r.container, "form", "")
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "form", "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "form", "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "form", "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "form", "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "form", "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "form", "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "form", "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "form", "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "form", "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "form", "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "form", "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest struct {
	ctx context.Context
	ApiService DynamicHlsServiceAPI
	playlistId string
	segmentId string
	segmentContainer string
	id string
	container *string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *string
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Container
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Container(container string) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.container = &container
	return r
}

// Optional. The dlna device profile id to utilize.
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) DeviceProfileId(deviceProfileId string) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) DeviceId(deviceId string) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) AudioCodec(audioCodec string) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) AudioSampleRate(audioSampleRate int32) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) AudioBitRate(audioBitRate int32) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) AudioChannels(audioChannels int32) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) MaxAudioChannels(maxAudioChannels int32) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Static(static bool) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Profile(profile string) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Level(level string) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Framerate(framerate float32) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) MaxFramerate(maxFramerate float32) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) CopyTimestamps(copyTimestamps bool) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) StartTimeTicks(startTimeTicks int64) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Width(width int32) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Height(height int32) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) MaxWidth(maxWidth int32) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) MaxHeight(maxHeight int32) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) VideoBitRate(videoBitRate int32) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) SubtitleStreamIndex(subtitleStreamIndex int32) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) SubtitleMethod(subtitleMethod string) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) MaxRefFrames(maxRefFrames int32) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) MaxVideoBitDepth(maxVideoBitDepth int32) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) VideoCodec(videoCodec string) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) AudioStreamIndex(audioStreamIndex int32) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) VideoStreamIndex(videoStreamIndex int32) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerExecute(r)
}

/*
GetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer Method for GetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param playlistId
 @param segmentId
 @param segmentContainer SegmentContainer
 @param id Item Id
 @return ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest
*/
func (a *DynamicHlsServiceAPIService) GetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer(ctx context.Context, playlistId string, segmentId string, segmentContainer string, id string) ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	return ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest{
		ApiService: a,
		ctx: ctx,
		playlistId: playlistId,
		segmentId: segmentId,
		segmentContainer: segmentContainer,
		id: id,
	}
}

// Execute executes the request
func (a *DynamicHlsServiceAPIService) GetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerExecute(r ApiGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicHlsServiceAPIService.GetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/hls1/{PlaylistId}/{SegmentId}.{SegmentContainer}"
	localVarPath = strings.Replace(localVarPath, "{"+"PlaylistId"+"}", url.PathEscape(parameterValueToString(r.playlistId, "playlistId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"SegmentId"+"}", url.PathEscape(parameterValueToString(r.segmentId, "segmentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"SegmentContainer"+"}", url.PathEscape(parameterValueToString(r.segmentContainer, "segmentContainer")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.container == nil {
		return nil, reportError("container is required and must be specified")
	}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "form", "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Container", r.container, "form", "")
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "form", "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "form", "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "form", "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "form", "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "form", "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "form", "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "form", "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "form", "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "form", "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "form", "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "form", "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetVideosByIdMainM3u8Request struct {
	ctx context.Context
	ApiService DynamicHlsServiceAPI
	id string
	container *string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *string
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Container
func (r ApiGetVideosByIdMainM3u8Request) Container(container string) ApiGetVideosByIdMainM3u8Request {
	r.container = &container
	return r
}

// Optional. The dlna device profile id to utilize.
func (r ApiGetVideosByIdMainM3u8Request) DeviceProfileId(deviceProfileId string) ApiGetVideosByIdMainM3u8Request {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r ApiGetVideosByIdMainM3u8Request) DeviceId(deviceId string) ApiGetVideosByIdMainM3u8Request {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r ApiGetVideosByIdMainM3u8Request) AudioCodec(audioCodec string) ApiGetVideosByIdMainM3u8Request {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r ApiGetVideosByIdMainM3u8Request) EnableAutoStreamCopy(enableAutoStreamCopy bool) ApiGetVideosByIdMainM3u8Request {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r ApiGetVideosByIdMainM3u8Request) AudioSampleRate(audioSampleRate int32) ApiGetVideosByIdMainM3u8Request {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r ApiGetVideosByIdMainM3u8Request) AudioBitRate(audioBitRate int32) ApiGetVideosByIdMainM3u8Request {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r ApiGetVideosByIdMainM3u8Request) AudioChannels(audioChannels int32) ApiGetVideosByIdMainM3u8Request {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r ApiGetVideosByIdMainM3u8Request) MaxAudioChannels(maxAudioChannels int32) ApiGetVideosByIdMainM3u8Request {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r ApiGetVideosByIdMainM3u8Request) Static(static bool) ApiGetVideosByIdMainM3u8Request {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r ApiGetVideosByIdMainM3u8Request) Profile(profile string) ApiGetVideosByIdMainM3u8Request {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r ApiGetVideosByIdMainM3u8Request) Level(level string) ApiGetVideosByIdMainM3u8Request {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiGetVideosByIdMainM3u8Request) Framerate(framerate float32) ApiGetVideosByIdMainM3u8Request {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiGetVideosByIdMainM3u8Request) MaxFramerate(maxFramerate float32) ApiGetVideosByIdMainM3u8Request {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r ApiGetVideosByIdMainM3u8Request) CopyTimestamps(copyTimestamps bool) ApiGetVideosByIdMainM3u8Request {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
func (r ApiGetVideosByIdMainM3u8Request) StartTimeTicks(startTimeTicks int64) ApiGetVideosByIdMainM3u8Request {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r ApiGetVideosByIdMainM3u8Request) Width(width int32) ApiGetVideosByIdMainM3u8Request {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r ApiGetVideosByIdMainM3u8Request) Height(height int32) ApiGetVideosByIdMainM3u8Request {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r ApiGetVideosByIdMainM3u8Request) MaxWidth(maxWidth int32) ApiGetVideosByIdMainM3u8Request {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r ApiGetVideosByIdMainM3u8Request) MaxHeight(maxHeight int32) ApiGetVideosByIdMainM3u8Request {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r ApiGetVideosByIdMainM3u8Request) VideoBitRate(videoBitRate int32) ApiGetVideosByIdMainM3u8Request {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r ApiGetVideosByIdMainM3u8Request) SubtitleStreamIndex(subtitleStreamIndex int32) ApiGetVideosByIdMainM3u8Request {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r ApiGetVideosByIdMainM3u8Request) SubtitleMethod(subtitleMethod string) ApiGetVideosByIdMainM3u8Request {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r ApiGetVideosByIdMainM3u8Request) MaxRefFrames(maxRefFrames int32) ApiGetVideosByIdMainM3u8Request {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r ApiGetVideosByIdMainM3u8Request) MaxVideoBitDepth(maxVideoBitDepth int32) ApiGetVideosByIdMainM3u8Request {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r ApiGetVideosByIdMainM3u8Request) VideoCodec(videoCodec string) ApiGetVideosByIdMainM3u8Request {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r ApiGetVideosByIdMainM3u8Request) AudioStreamIndex(audioStreamIndex int32) ApiGetVideosByIdMainM3u8Request {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r ApiGetVideosByIdMainM3u8Request) VideoStreamIndex(videoStreamIndex int32) ApiGetVideosByIdMainM3u8Request {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r ApiGetVideosByIdMainM3u8Request) Execute() (*http.Response, error) {
	return r.ApiService.GetVideosByIdMainM3u8Execute(r)
}

/*
GetVideosByIdMainM3u8 Gets a video stream using HTTP live streaming.

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return ApiGetVideosByIdMainM3u8Request
*/
func (a *DynamicHlsServiceAPIService) GetVideosByIdMainM3u8(ctx context.Context, id string) ApiGetVideosByIdMainM3u8Request {
	return ApiGetVideosByIdMainM3u8Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DynamicHlsServiceAPIService) GetVideosByIdMainM3u8Execute(r ApiGetVideosByIdMainM3u8Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicHlsServiceAPIService.GetVideosByIdMainM3u8")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/main.m3u8"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.container == nil {
		return nil, reportError("container is required and must be specified")
	}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "form", "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Container", r.container, "form", "")
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "form", "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "form", "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "form", "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "form", "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "form", "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "form", "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "form", "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "form", "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "form", "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "form", "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "form", "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetVideosByIdMasterM3u8Request struct {
	ctx context.Context
	ApiService DynamicHlsServiceAPI
	id string
	container *string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *string
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Container
func (r ApiGetVideosByIdMasterM3u8Request) Container(container string) ApiGetVideosByIdMasterM3u8Request {
	r.container = &container
	return r
}

// Optional. The dlna device profile id to utilize.
func (r ApiGetVideosByIdMasterM3u8Request) DeviceProfileId(deviceProfileId string) ApiGetVideosByIdMasterM3u8Request {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r ApiGetVideosByIdMasterM3u8Request) DeviceId(deviceId string) ApiGetVideosByIdMasterM3u8Request {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r ApiGetVideosByIdMasterM3u8Request) AudioCodec(audioCodec string) ApiGetVideosByIdMasterM3u8Request {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r ApiGetVideosByIdMasterM3u8Request) EnableAutoStreamCopy(enableAutoStreamCopy bool) ApiGetVideosByIdMasterM3u8Request {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r ApiGetVideosByIdMasterM3u8Request) AudioSampleRate(audioSampleRate int32) ApiGetVideosByIdMasterM3u8Request {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r ApiGetVideosByIdMasterM3u8Request) AudioBitRate(audioBitRate int32) ApiGetVideosByIdMasterM3u8Request {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r ApiGetVideosByIdMasterM3u8Request) AudioChannels(audioChannels int32) ApiGetVideosByIdMasterM3u8Request {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r ApiGetVideosByIdMasterM3u8Request) MaxAudioChannels(maxAudioChannels int32) ApiGetVideosByIdMasterM3u8Request {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r ApiGetVideosByIdMasterM3u8Request) Static(static bool) ApiGetVideosByIdMasterM3u8Request {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r ApiGetVideosByIdMasterM3u8Request) Profile(profile string) ApiGetVideosByIdMasterM3u8Request {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r ApiGetVideosByIdMasterM3u8Request) Level(level string) ApiGetVideosByIdMasterM3u8Request {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiGetVideosByIdMasterM3u8Request) Framerate(framerate float32) ApiGetVideosByIdMasterM3u8Request {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiGetVideosByIdMasterM3u8Request) MaxFramerate(maxFramerate float32) ApiGetVideosByIdMasterM3u8Request {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r ApiGetVideosByIdMasterM3u8Request) CopyTimestamps(copyTimestamps bool) ApiGetVideosByIdMasterM3u8Request {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
func (r ApiGetVideosByIdMasterM3u8Request) StartTimeTicks(startTimeTicks int64) ApiGetVideosByIdMasterM3u8Request {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r ApiGetVideosByIdMasterM3u8Request) Width(width int32) ApiGetVideosByIdMasterM3u8Request {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r ApiGetVideosByIdMasterM3u8Request) Height(height int32) ApiGetVideosByIdMasterM3u8Request {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r ApiGetVideosByIdMasterM3u8Request) MaxWidth(maxWidth int32) ApiGetVideosByIdMasterM3u8Request {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r ApiGetVideosByIdMasterM3u8Request) MaxHeight(maxHeight int32) ApiGetVideosByIdMasterM3u8Request {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r ApiGetVideosByIdMasterM3u8Request) VideoBitRate(videoBitRate int32) ApiGetVideosByIdMasterM3u8Request {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r ApiGetVideosByIdMasterM3u8Request) SubtitleStreamIndex(subtitleStreamIndex int32) ApiGetVideosByIdMasterM3u8Request {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r ApiGetVideosByIdMasterM3u8Request) SubtitleMethod(subtitleMethod string) ApiGetVideosByIdMasterM3u8Request {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r ApiGetVideosByIdMasterM3u8Request) MaxRefFrames(maxRefFrames int32) ApiGetVideosByIdMasterM3u8Request {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r ApiGetVideosByIdMasterM3u8Request) MaxVideoBitDepth(maxVideoBitDepth int32) ApiGetVideosByIdMasterM3u8Request {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r ApiGetVideosByIdMasterM3u8Request) VideoCodec(videoCodec string) ApiGetVideosByIdMasterM3u8Request {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r ApiGetVideosByIdMasterM3u8Request) AudioStreamIndex(audioStreamIndex int32) ApiGetVideosByIdMasterM3u8Request {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r ApiGetVideosByIdMasterM3u8Request) VideoStreamIndex(videoStreamIndex int32) ApiGetVideosByIdMasterM3u8Request {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r ApiGetVideosByIdMasterM3u8Request) Execute() (*http.Response, error) {
	return r.ApiService.GetVideosByIdMasterM3u8Execute(r)
}

/*
GetVideosByIdMasterM3u8 Gets a video stream using HTTP live streaming.

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return ApiGetVideosByIdMasterM3u8Request
*/
func (a *DynamicHlsServiceAPIService) GetVideosByIdMasterM3u8(ctx context.Context, id string) ApiGetVideosByIdMasterM3u8Request {
	return ApiGetVideosByIdMasterM3u8Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DynamicHlsServiceAPIService) GetVideosByIdMasterM3u8Execute(r ApiGetVideosByIdMasterM3u8Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicHlsServiceAPIService.GetVideosByIdMasterM3u8")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/master.m3u8"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.container == nil {
		return nil, reportError("container is required and must be specified")
	}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "form", "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Container", r.container, "form", "")
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "form", "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "form", "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "form", "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "form", "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "form", "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "form", "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "form", "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "form", "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "form", "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "form", "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "form", "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetVideosByIdSubtitlesM3u8Request struct {
	ctx context.Context
	ApiService DynamicHlsServiceAPI
	id string
	subtitleSegmentLength *int32
	manifestSubtitles *string
}

// The subtitle segment length
func (r ApiGetVideosByIdSubtitlesM3u8Request) SubtitleSegmentLength(subtitleSegmentLength int32) ApiGetVideosByIdSubtitlesM3u8Request {
	r.subtitleSegmentLength = &subtitleSegmentLength
	return r
}

// The subtitle segment format
func (r ApiGetVideosByIdSubtitlesM3u8Request) ManifestSubtitles(manifestSubtitles string) ApiGetVideosByIdSubtitlesM3u8Request {
	r.manifestSubtitles = &manifestSubtitles
	return r
}

func (r ApiGetVideosByIdSubtitlesM3u8Request) Execute() (*http.Response, error) {
	return r.ApiService.GetVideosByIdSubtitlesM3u8Execute(r)
}

/*
GetVideosByIdSubtitlesM3u8 Gets an HLS subtitle playlist.

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return ApiGetVideosByIdSubtitlesM3u8Request
*/
func (a *DynamicHlsServiceAPIService) GetVideosByIdSubtitlesM3u8(ctx context.Context, id string) ApiGetVideosByIdSubtitlesM3u8Request {
	return ApiGetVideosByIdSubtitlesM3u8Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DynamicHlsServiceAPIService) GetVideosByIdSubtitlesM3u8Execute(r ApiGetVideosByIdSubtitlesM3u8Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicHlsServiceAPIService.GetVideosByIdSubtitlesM3u8")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/subtitles.m3u8"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subtitleSegmentLength == nil {
		return nil, reportError("subtitleSegmentLength is required and must be specified")
	}
	if r.manifestSubtitles == nil {
		return nil, reportError("manifestSubtitles is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleSegmentLength", r.subtitleSegmentLength, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "ManifestSubtitles", r.manifestSubtitles, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest struct {
	ctx context.Context
	ApiService DynamicHlsServiceAPI
	playlistId string
	segmentId string
	segmentContainer string
	id string
	container *string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *string
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Container
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Container(container string) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.container = &container
	return r
}

// Optional. The dlna device profile id to utilize.
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) DeviceProfileId(deviceProfileId string) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) DeviceId(deviceId string) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) AudioCodec(audioCodec string) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) AudioSampleRate(audioSampleRate int32) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) AudioBitRate(audioBitRate int32) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) AudioChannels(audioChannels int32) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) MaxAudioChannels(maxAudioChannels int32) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Static(static bool) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Profile(profile string) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Level(level string) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Framerate(framerate float32) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) MaxFramerate(maxFramerate float32) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) CopyTimestamps(copyTimestamps bool) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) StartTimeTicks(startTimeTicks int64) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Width(width int32) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Height(height int32) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) MaxWidth(maxWidth int32) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) MaxHeight(maxHeight int32) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) VideoBitRate(videoBitRate int32) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) SubtitleStreamIndex(subtitleStreamIndex int32) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) SubtitleMethod(subtitleMethod string) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) MaxRefFrames(maxRefFrames int32) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) MaxVideoBitDepth(maxVideoBitDepth int32) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) VideoCodec(videoCodec string) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) AudioStreamIndex(audioStreamIndex int32) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) VideoStreamIndex(videoStreamIndex int32) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerExecute(r)
}

/*
HeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer Method for HeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param playlistId
 @param segmentId
 @param segmentContainer SegmentContainer
 @param id Item Id
 @return ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest
*/
func (a *DynamicHlsServiceAPIService) HeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer(ctx context.Context, playlistId string, segmentId string, segmentContainer string, id string) ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	return ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest{
		ApiService: a,
		ctx: ctx,
		playlistId: playlistId,
		segmentId: segmentId,
		segmentContainer: segmentContainer,
		id: id,
	}
}

// Execute executes the request
func (a *DynamicHlsServiceAPIService) HeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerExecute(r ApiHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicHlsServiceAPIService.HeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Audio/{Id}/hls1/{PlaylistId}/{SegmentId}.{SegmentContainer}"
	localVarPath = strings.Replace(localVarPath, "{"+"PlaylistId"+"}", url.PathEscape(parameterValueToString(r.playlistId, "playlistId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"SegmentId"+"}", url.PathEscape(parameterValueToString(r.segmentId, "segmentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"SegmentContainer"+"}", url.PathEscape(parameterValueToString(r.segmentContainer, "segmentContainer")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.container == nil {
		return nil, reportError("container is required and must be specified")
	}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "form", "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Container", r.container, "form", "")
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "form", "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "form", "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "form", "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "form", "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "form", "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "form", "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "form", "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "form", "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "form", "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "form", "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "form", "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHeadAudioByIdMasterM3u8Request struct {
	ctx context.Context
	ApiService DynamicHlsServiceAPI
	id string
	container *string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *string
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Container
func (r ApiHeadAudioByIdMasterM3u8Request) Container(container string) ApiHeadAudioByIdMasterM3u8Request {
	r.container = &container
	return r
}

// Optional. The dlna device profile id to utilize.
func (r ApiHeadAudioByIdMasterM3u8Request) DeviceProfileId(deviceProfileId string) ApiHeadAudioByIdMasterM3u8Request {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r ApiHeadAudioByIdMasterM3u8Request) DeviceId(deviceId string) ApiHeadAudioByIdMasterM3u8Request {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r ApiHeadAudioByIdMasterM3u8Request) AudioCodec(audioCodec string) ApiHeadAudioByIdMasterM3u8Request {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r ApiHeadAudioByIdMasterM3u8Request) EnableAutoStreamCopy(enableAutoStreamCopy bool) ApiHeadAudioByIdMasterM3u8Request {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r ApiHeadAudioByIdMasterM3u8Request) AudioSampleRate(audioSampleRate int32) ApiHeadAudioByIdMasterM3u8Request {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r ApiHeadAudioByIdMasterM3u8Request) AudioBitRate(audioBitRate int32) ApiHeadAudioByIdMasterM3u8Request {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r ApiHeadAudioByIdMasterM3u8Request) AudioChannels(audioChannels int32) ApiHeadAudioByIdMasterM3u8Request {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r ApiHeadAudioByIdMasterM3u8Request) MaxAudioChannels(maxAudioChannels int32) ApiHeadAudioByIdMasterM3u8Request {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r ApiHeadAudioByIdMasterM3u8Request) Static(static bool) ApiHeadAudioByIdMasterM3u8Request {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r ApiHeadAudioByIdMasterM3u8Request) Profile(profile string) ApiHeadAudioByIdMasterM3u8Request {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r ApiHeadAudioByIdMasterM3u8Request) Level(level string) ApiHeadAudioByIdMasterM3u8Request {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiHeadAudioByIdMasterM3u8Request) Framerate(framerate float32) ApiHeadAudioByIdMasterM3u8Request {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiHeadAudioByIdMasterM3u8Request) MaxFramerate(maxFramerate float32) ApiHeadAudioByIdMasterM3u8Request {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r ApiHeadAudioByIdMasterM3u8Request) CopyTimestamps(copyTimestamps bool) ApiHeadAudioByIdMasterM3u8Request {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
func (r ApiHeadAudioByIdMasterM3u8Request) StartTimeTicks(startTimeTicks int64) ApiHeadAudioByIdMasterM3u8Request {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r ApiHeadAudioByIdMasterM3u8Request) Width(width int32) ApiHeadAudioByIdMasterM3u8Request {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r ApiHeadAudioByIdMasterM3u8Request) Height(height int32) ApiHeadAudioByIdMasterM3u8Request {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r ApiHeadAudioByIdMasterM3u8Request) MaxWidth(maxWidth int32) ApiHeadAudioByIdMasterM3u8Request {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r ApiHeadAudioByIdMasterM3u8Request) MaxHeight(maxHeight int32) ApiHeadAudioByIdMasterM3u8Request {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r ApiHeadAudioByIdMasterM3u8Request) VideoBitRate(videoBitRate int32) ApiHeadAudioByIdMasterM3u8Request {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r ApiHeadAudioByIdMasterM3u8Request) SubtitleStreamIndex(subtitleStreamIndex int32) ApiHeadAudioByIdMasterM3u8Request {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r ApiHeadAudioByIdMasterM3u8Request) SubtitleMethod(subtitleMethod string) ApiHeadAudioByIdMasterM3u8Request {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r ApiHeadAudioByIdMasterM3u8Request) MaxRefFrames(maxRefFrames int32) ApiHeadAudioByIdMasterM3u8Request {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r ApiHeadAudioByIdMasterM3u8Request) MaxVideoBitDepth(maxVideoBitDepth int32) ApiHeadAudioByIdMasterM3u8Request {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r ApiHeadAudioByIdMasterM3u8Request) VideoCodec(videoCodec string) ApiHeadAudioByIdMasterM3u8Request {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r ApiHeadAudioByIdMasterM3u8Request) AudioStreamIndex(audioStreamIndex int32) ApiHeadAudioByIdMasterM3u8Request {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r ApiHeadAudioByIdMasterM3u8Request) VideoStreamIndex(videoStreamIndex int32) ApiHeadAudioByIdMasterM3u8Request {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r ApiHeadAudioByIdMasterM3u8Request) Execute() (*http.Response, error) {
	return r.ApiService.HeadAudioByIdMasterM3u8Execute(r)
}

/*
HeadAudioByIdMasterM3u8 Gets an audio stream using HTTP live streaming.

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return ApiHeadAudioByIdMasterM3u8Request
*/
func (a *DynamicHlsServiceAPIService) HeadAudioByIdMasterM3u8(ctx context.Context, id string) ApiHeadAudioByIdMasterM3u8Request {
	return ApiHeadAudioByIdMasterM3u8Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DynamicHlsServiceAPIService) HeadAudioByIdMasterM3u8Execute(r ApiHeadAudioByIdMasterM3u8Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicHlsServiceAPIService.HeadAudioByIdMasterM3u8")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Audio/{Id}/master.m3u8"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.container == nil {
		return nil, reportError("container is required and must be specified")
	}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "form", "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Container", r.container, "form", "")
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "form", "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "form", "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "form", "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "form", "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "form", "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "form", "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "form", "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "form", "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "form", "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "form", "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "form", "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest struct {
	ctx context.Context
	ApiService DynamicHlsServiceAPI
	playlistId string
	segmentId string
	segmentContainer string
	id string
	container *string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *string
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Container
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Container(container string) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.container = &container
	return r
}

// Optional. The dlna device profile id to utilize.
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) DeviceProfileId(deviceProfileId string) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) DeviceId(deviceId string) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) AudioCodec(audioCodec string) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) AudioSampleRate(audioSampleRate int32) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) AudioBitRate(audioBitRate int32) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) AudioChannels(audioChannels int32) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) MaxAudioChannels(maxAudioChannels int32) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Static(static bool) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Profile(profile string) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Level(level string) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Framerate(framerate float32) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) MaxFramerate(maxFramerate float32) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) CopyTimestamps(copyTimestamps bool) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) StartTimeTicks(startTimeTicks int64) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Width(width int32) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Height(height int32) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) MaxWidth(maxWidth int32) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) MaxHeight(maxHeight int32) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) VideoBitRate(videoBitRate int32) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) SubtitleStreamIndex(subtitleStreamIndex int32) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) SubtitleMethod(subtitleMethod string) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) MaxRefFrames(maxRefFrames int32) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) MaxVideoBitDepth(maxVideoBitDepth int32) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) VideoCodec(videoCodec string) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) AudioStreamIndex(audioStreamIndex int32) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) VideoStreamIndex(videoStreamIndex int32) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerExecute(r)
}

/*
HeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer Method for HeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param playlistId
 @param segmentId
 @param segmentContainer SegmentContainer
 @param id Item Id
 @return ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest
*/
func (a *DynamicHlsServiceAPIService) HeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer(ctx context.Context, playlistId string, segmentId string, segmentContainer string, id string) ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	return ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest{
		ApiService: a,
		ctx: ctx,
		playlistId: playlistId,
		segmentId: segmentId,
		segmentContainer: segmentContainer,
		id: id,
	}
}

// Execute executes the request
func (a *DynamicHlsServiceAPIService) HeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerExecute(r ApiHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicHlsServiceAPIService.HeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/hls1/{PlaylistId}/{SegmentId}.{SegmentContainer}"
	localVarPath = strings.Replace(localVarPath, "{"+"PlaylistId"+"}", url.PathEscape(parameterValueToString(r.playlistId, "playlistId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"SegmentId"+"}", url.PathEscape(parameterValueToString(r.segmentId, "segmentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"SegmentContainer"+"}", url.PathEscape(parameterValueToString(r.segmentContainer, "segmentContainer")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.container == nil {
		return nil, reportError("container is required and must be specified")
	}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "form", "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Container", r.container, "form", "")
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "form", "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "form", "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "form", "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "form", "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "form", "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "form", "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "form", "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "form", "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "form", "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "form", "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "form", "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHeadVideosByIdMasterM3u8Request struct {
	ctx context.Context
	ApiService DynamicHlsServiceAPI
	id string
	container *string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *string
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Container
func (r ApiHeadVideosByIdMasterM3u8Request) Container(container string) ApiHeadVideosByIdMasterM3u8Request {
	r.container = &container
	return r
}

// Optional. The dlna device profile id to utilize.
func (r ApiHeadVideosByIdMasterM3u8Request) DeviceProfileId(deviceProfileId string) ApiHeadVideosByIdMasterM3u8Request {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r ApiHeadVideosByIdMasterM3u8Request) DeviceId(deviceId string) ApiHeadVideosByIdMasterM3u8Request {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r ApiHeadVideosByIdMasterM3u8Request) AudioCodec(audioCodec string) ApiHeadVideosByIdMasterM3u8Request {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r ApiHeadVideosByIdMasterM3u8Request) EnableAutoStreamCopy(enableAutoStreamCopy bool) ApiHeadVideosByIdMasterM3u8Request {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r ApiHeadVideosByIdMasterM3u8Request) AudioSampleRate(audioSampleRate int32) ApiHeadVideosByIdMasterM3u8Request {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r ApiHeadVideosByIdMasterM3u8Request) AudioBitRate(audioBitRate int32) ApiHeadVideosByIdMasterM3u8Request {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r ApiHeadVideosByIdMasterM3u8Request) AudioChannels(audioChannels int32) ApiHeadVideosByIdMasterM3u8Request {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r ApiHeadVideosByIdMasterM3u8Request) MaxAudioChannels(maxAudioChannels int32) ApiHeadVideosByIdMasterM3u8Request {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r ApiHeadVideosByIdMasterM3u8Request) Static(static bool) ApiHeadVideosByIdMasterM3u8Request {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r ApiHeadVideosByIdMasterM3u8Request) Profile(profile string) ApiHeadVideosByIdMasterM3u8Request {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r ApiHeadVideosByIdMasterM3u8Request) Level(level string) ApiHeadVideosByIdMasterM3u8Request {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiHeadVideosByIdMasterM3u8Request) Framerate(framerate float32) ApiHeadVideosByIdMasterM3u8Request {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiHeadVideosByIdMasterM3u8Request) MaxFramerate(maxFramerate float32) ApiHeadVideosByIdMasterM3u8Request {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r ApiHeadVideosByIdMasterM3u8Request) CopyTimestamps(copyTimestamps bool) ApiHeadVideosByIdMasterM3u8Request {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
func (r ApiHeadVideosByIdMasterM3u8Request) StartTimeTicks(startTimeTicks int64) ApiHeadVideosByIdMasterM3u8Request {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r ApiHeadVideosByIdMasterM3u8Request) Width(width int32) ApiHeadVideosByIdMasterM3u8Request {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r ApiHeadVideosByIdMasterM3u8Request) Height(height int32) ApiHeadVideosByIdMasterM3u8Request {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r ApiHeadVideosByIdMasterM3u8Request) MaxWidth(maxWidth int32) ApiHeadVideosByIdMasterM3u8Request {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r ApiHeadVideosByIdMasterM3u8Request) MaxHeight(maxHeight int32) ApiHeadVideosByIdMasterM3u8Request {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r ApiHeadVideosByIdMasterM3u8Request) VideoBitRate(videoBitRate int32) ApiHeadVideosByIdMasterM3u8Request {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r ApiHeadVideosByIdMasterM3u8Request) SubtitleStreamIndex(subtitleStreamIndex int32) ApiHeadVideosByIdMasterM3u8Request {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r ApiHeadVideosByIdMasterM3u8Request) SubtitleMethod(subtitleMethod string) ApiHeadVideosByIdMasterM3u8Request {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r ApiHeadVideosByIdMasterM3u8Request) MaxRefFrames(maxRefFrames int32) ApiHeadVideosByIdMasterM3u8Request {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r ApiHeadVideosByIdMasterM3u8Request) MaxVideoBitDepth(maxVideoBitDepth int32) ApiHeadVideosByIdMasterM3u8Request {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r ApiHeadVideosByIdMasterM3u8Request) VideoCodec(videoCodec string) ApiHeadVideosByIdMasterM3u8Request {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r ApiHeadVideosByIdMasterM3u8Request) AudioStreamIndex(audioStreamIndex int32) ApiHeadVideosByIdMasterM3u8Request {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r ApiHeadVideosByIdMasterM3u8Request) VideoStreamIndex(videoStreamIndex int32) ApiHeadVideosByIdMasterM3u8Request {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r ApiHeadVideosByIdMasterM3u8Request) Execute() (*http.Response, error) {
	return r.ApiService.HeadVideosByIdMasterM3u8Execute(r)
}

/*
HeadVideosByIdMasterM3u8 Gets a video stream using HTTP live streaming.

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return ApiHeadVideosByIdMasterM3u8Request
*/
func (a *DynamicHlsServiceAPIService) HeadVideosByIdMasterM3u8(ctx context.Context, id string) ApiHeadVideosByIdMasterM3u8Request {
	return ApiHeadVideosByIdMasterM3u8Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DynamicHlsServiceAPIService) HeadVideosByIdMasterM3u8Execute(r ApiHeadVideosByIdMasterM3u8Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicHlsServiceAPIService.HeadVideosByIdMasterM3u8")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/master.m3u8"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.container == nil {
		return nil, reportError("container is required and must be specified")
	}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "form", "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Container", r.container, "form", "")
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "form", "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "form", "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "form", "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "form", "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "form", "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "form", "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "form", "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "form", "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "form", "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "form", "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "form", "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "form", "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "form", "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
