/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type UniversalAudioServiceAPI interface {

	/*
	GetAudioByIdByContainer Gets an audio stream

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@param container
	@return ApiGetAudioByIdByContainerRequest
	*/
	GetAudioByIdByContainer(ctx context.Context, id string, container string) ApiGetAudioByIdByContainerRequest

	// GetAudioByIdByContainerExecute executes the request
	GetAudioByIdByContainerExecute(r ApiGetAudioByIdByContainerRequest) (*http.Response, error)

	/*
	GetAudioByIdUniversal Gets an audio stream

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@return ApiGetAudioByIdUniversalRequest
	*/
	GetAudioByIdUniversal(ctx context.Context, id string) ApiGetAudioByIdUniversalRequest

	// GetAudioByIdUniversalExecute executes the request
	GetAudioByIdUniversalExecute(r ApiGetAudioByIdUniversalRequest) (*http.Response, error)

	/*
	HeadAudioByIdByContainer Gets an audio stream

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@param container
	@return ApiHeadAudioByIdByContainerRequest
	*/
	HeadAudioByIdByContainer(ctx context.Context, id string, container string) ApiHeadAudioByIdByContainerRequest

	// HeadAudioByIdByContainerExecute executes the request
	HeadAudioByIdByContainerExecute(r ApiHeadAudioByIdByContainerRequest) (*http.Response, error)

	/*
	HeadAudioByIdUniversal Gets an audio stream

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@return ApiHeadAudioByIdUniversalRequest
	*/
	HeadAudioByIdUniversal(ctx context.Context, id string) ApiHeadAudioByIdUniversalRequest

	// HeadAudioByIdUniversalExecute executes the request
	HeadAudioByIdUniversalExecute(r ApiHeadAudioByIdUniversalRequest) (*http.Response, error)
}

// UniversalAudioServiceAPIService UniversalAudioServiceAPI service
type UniversalAudioServiceAPIService service

type ApiGetAudioByIdByContainerRequest struct {
	ctx context.Context
	ApiService UniversalAudioServiceAPI
	id string
	container string
	deviceId *string
	startTimeTicks *int64
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r ApiGetAudioByIdByContainerRequest) DeviceId(deviceId string) ApiGetAudioByIdByContainerRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
func (r ApiGetAudioByIdByContainerRequest) StartTimeTicks(startTimeTicks int64) ApiGetAudioByIdByContainerRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

func (r ApiGetAudioByIdByContainerRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetAudioByIdByContainerExecute(r)
}

/*
GetAudioByIdByContainer Gets an audio stream

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param container
 @return ApiGetAudioByIdByContainerRequest
*/
func (a *UniversalAudioServiceAPIService) GetAudioByIdByContainer(ctx context.Context, id string, container string) ApiGetAudioByIdByContainerRequest {
	return ApiGetAudioByIdByContainerRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		container: container,
	}
}

// Execute executes the request
func (a *UniversalAudioServiceAPIService) GetAudioByIdByContainerExecute(r ApiGetAudioByIdByContainerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UniversalAudioServiceAPIService.GetAudioByIdByContainer")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Audio/{Id}/universal.{Container}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Container"+"}", url.PathEscape(parameterValueToString(r.container, "container")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAudioByIdUniversalRequest struct {
	ctx context.Context
	ApiService UniversalAudioServiceAPI
	id string
	deviceId *string
	startTimeTicks *int64
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r ApiGetAudioByIdUniversalRequest) DeviceId(deviceId string) ApiGetAudioByIdUniversalRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
func (r ApiGetAudioByIdUniversalRequest) StartTimeTicks(startTimeTicks int64) ApiGetAudioByIdUniversalRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

func (r ApiGetAudioByIdUniversalRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetAudioByIdUniversalExecute(r)
}

/*
GetAudioByIdUniversal Gets an audio stream

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return ApiGetAudioByIdUniversalRequest
*/
func (a *UniversalAudioServiceAPIService) GetAudioByIdUniversal(ctx context.Context, id string) ApiGetAudioByIdUniversalRequest {
	return ApiGetAudioByIdUniversalRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *UniversalAudioServiceAPIService) GetAudioByIdUniversalExecute(r ApiGetAudioByIdUniversalRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UniversalAudioServiceAPIService.GetAudioByIdUniversal")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Audio/{Id}/universal"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHeadAudioByIdByContainerRequest struct {
	ctx context.Context
	ApiService UniversalAudioServiceAPI
	id string
	container string
	deviceId *string
	startTimeTicks *int64
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r ApiHeadAudioByIdByContainerRequest) DeviceId(deviceId string) ApiHeadAudioByIdByContainerRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
func (r ApiHeadAudioByIdByContainerRequest) StartTimeTicks(startTimeTicks int64) ApiHeadAudioByIdByContainerRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

func (r ApiHeadAudioByIdByContainerRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadAudioByIdByContainerExecute(r)
}

/*
HeadAudioByIdByContainer Gets an audio stream

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param container
 @return ApiHeadAudioByIdByContainerRequest
*/
func (a *UniversalAudioServiceAPIService) HeadAudioByIdByContainer(ctx context.Context, id string, container string) ApiHeadAudioByIdByContainerRequest {
	return ApiHeadAudioByIdByContainerRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		container: container,
	}
}

// Execute executes the request
func (a *UniversalAudioServiceAPIService) HeadAudioByIdByContainerExecute(r ApiHeadAudioByIdByContainerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UniversalAudioServiceAPIService.HeadAudioByIdByContainer")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Audio/{Id}/universal.{Container}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Container"+"}", url.PathEscape(parameterValueToString(r.container, "container")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHeadAudioByIdUniversalRequest struct {
	ctx context.Context
	ApiService UniversalAudioServiceAPI
	id string
	deviceId *string
	startTimeTicks *int64
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r ApiHeadAudioByIdUniversalRequest) DeviceId(deviceId string) ApiHeadAudioByIdUniversalRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
func (r ApiHeadAudioByIdUniversalRequest) StartTimeTicks(startTimeTicks int64) ApiHeadAudioByIdUniversalRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

func (r ApiHeadAudioByIdUniversalRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadAudioByIdUniversalExecute(r)
}

/*
HeadAudioByIdUniversal Gets an audio stream

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return ApiHeadAudioByIdUniversalRequest
*/
func (a *UniversalAudioServiceAPIService) HeadAudioByIdUniversal(ctx context.Context, id string) ApiHeadAudioByIdUniversalRequest {
	return ApiHeadAudioByIdUniversalRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *UniversalAudioServiceAPIService) HeadAudioByIdUniversalExecute(r ApiHeadAudioByIdUniversalRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UniversalAudioServiceAPIService.HeadAudioByIdUniversal")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Audio/{Id}/universal"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
