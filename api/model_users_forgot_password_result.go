/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the UsersForgotPasswordResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsersForgotPasswordResult{}

// UsersForgotPasswordResult struct for UsersForgotPasswordResult
type UsersForgotPasswordResult struct {
	Action *string `json:"Action,omitempty"`
	PinFile *string `json:"PinFile,omitempty"`
	PinExpirationDate NullableTime `json:"PinExpirationDate,omitempty"`
}

// NewUsersForgotPasswordResult instantiates a new UsersForgotPasswordResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersForgotPasswordResult() *UsersForgotPasswordResult {
	this := UsersForgotPasswordResult{}
	return &this
}

// NewUsersForgotPasswordResultWithDefaults instantiates a new UsersForgotPasswordResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersForgotPasswordResultWithDefaults() *UsersForgotPasswordResult {
	this := UsersForgotPasswordResult{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *UsersForgotPasswordResult) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersForgotPasswordResult) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *UsersForgotPasswordResult) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *UsersForgotPasswordResult) SetAction(v string) {
	o.Action = &v
}

// GetPinFile returns the PinFile field value if set, zero value otherwise.
func (o *UsersForgotPasswordResult) GetPinFile() string {
	if o == nil || IsNil(o.PinFile) {
		var ret string
		return ret
	}
	return *o.PinFile
}

// GetPinFileOk returns a tuple with the PinFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersForgotPasswordResult) GetPinFileOk() (*string, bool) {
	if o == nil || IsNil(o.PinFile) {
		return nil, false
	}
	return o.PinFile, true
}

// HasPinFile returns a boolean if a field has been set.
func (o *UsersForgotPasswordResult) HasPinFile() bool {
	if o != nil && !IsNil(o.PinFile) {
		return true
	}

	return false
}

// SetPinFile gets a reference to the given string and assigns it to the PinFile field.
func (o *UsersForgotPasswordResult) SetPinFile(v string) {
	o.PinFile = &v
}

// GetPinExpirationDate returns the PinExpirationDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsersForgotPasswordResult) GetPinExpirationDate() time.Time {
	if o == nil || IsNil(o.PinExpirationDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.PinExpirationDate.Get()
}

// GetPinExpirationDateOk returns a tuple with the PinExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsersForgotPasswordResult) GetPinExpirationDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.PinExpirationDate.Get(), o.PinExpirationDate.IsSet()
}

// HasPinExpirationDate returns a boolean if a field has been set.
func (o *UsersForgotPasswordResult) HasPinExpirationDate() bool {
	if o != nil && o.PinExpirationDate.IsSet() {
		return true
	}

	return false
}

// SetPinExpirationDate gets a reference to the given NullableTime and assigns it to the PinExpirationDate field.
func (o *UsersForgotPasswordResult) SetPinExpirationDate(v time.Time) {
	o.PinExpirationDate.Set(&v)
}
// SetPinExpirationDateNil sets the value for PinExpirationDate to be an explicit nil
func (o *UsersForgotPasswordResult) SetPinExpirationDateNil() {
	o.PinExpirationDate.Set(nil)
}

// UnsetPinExpirationDate ensures that no value is present for PinExpirationDate, not even an explicit nil
func (o *UsersForgotPasswordResult) UnsetPinExpirationDate() {
	o.PinExpirationDate.Unset()
}

func (o UsersForgotPasswordResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsersForgotPasswordResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["Action"] = o.Action
	}
	if !IsNil(o.PinFile) {
		toSerialize["PinFile"] = o.PinFile
	}
	if o.PinExpirationDate.IsSet() {
		toSerialize["PinExpirationDate"] = o.PinExpirationDate.Get()
	}
	return toSerialize, nil
}

type NullableUsersForgotPasswordResult struct {
	value *UsersForgotPasswordResult
	isSet bool
}

func (v NullableUsersForgotPasswordResult) Get() *UsersForgotPasswordResult {
	return v.value
}

func (v *NullableUsersForgotPasswordResult) Set(val *UsersForgotPasswordResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersForgotPasswordResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersForgotPasswordResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersForgotPasswordResult(val *UsersForgotPasswordResult) *NullableUsersForgotPasswordResult {
	return &NullableUsersForgotPasswordResult{value: val, isSet: true}
}

func (v NullableUsersForgotPasswordResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersForgotPasswordResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


