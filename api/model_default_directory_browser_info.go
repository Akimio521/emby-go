/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the DefaultDirectoryBrowserInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefaultDirectoryBrowserInfo{}

// DefaultDirectoryBrowserInfo struct for DefaultDirectoryBrowserInfo
type DefaultDirectoryBrowserInfo struct {
	Path *string `json:"Path,omitempty"`
}

// NewDefaultDirectoryBrowserInfo instantiates a new DefaultDirectoryBrowserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefaultDirectoryBrowserInfo() *DefaultDirectoryBrowserInfo {
	this := DefaultDirectoryBrowserInfo{}
	return &this
}

// NewDefaultDirectoryBrowserInfoWithDefaults instantiates a new DefaultDirectoryBrowserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefaultDirectoryBrowserInfoWithDefaults() *DefaultDirectoryBrowserInfo {
	this := DefaultDirectoryBrowserInfo{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *DefaultDirectoryBrowserInfo) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultDirectoryBrowserInfo) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *DefaultDirectoryBrowserInfo) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *DefaultDirectoryBrowserInfo) SetPath(v string) {
	o.Path = &v
}

func (o DefaultDirectoryBrowserInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefaultDirectoryBrowserInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Path) {
		toSerialize["Path"] = o.Path
	}
	return toSerialize, nil
}

type NullableDefaultDirectoryBrowserInfo struct {
	value *DefaultDirectoryBrowserInfo
	isSet bool
}

func (v NullableDefaultDirectoryBrowserInfo) Get() *DefaultDirectoryBrowserInfo {
	return v.value
}

func (v *NullableDefaultDirectoryBrowserInfo) Set(val *DefaultDirectoryBrowserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultDirectoryBrowserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultDirectoryBrowserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultDirectoryBrowserInfo(val *DefaultDirectoryBrowserInfo) *NullableDefaultDirectoryBrowserInfo {
	return &NullableDefaultDirectoryBrowserInfo{value: val, isSet: true}
}

func (v NullableDefaultDirectoryBrowserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultDirectoryBrowserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


