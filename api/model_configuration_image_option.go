/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ConfigurationImageOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigurationImageOption{}

// ConfigurationImageOption struct for ConfigurationImageOption
type ConfigurationImageOption struct {
	Type *string `json:"Type,omitempty"`
	Limit *int32 `json:"Limit,omitempty"`
	MinWidth *int32 `json:"MinWidth,omitempty"`
}

// NewConfigurationImageOption instantiates a new ConfigurationImageOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationImageOption() *ConfigurationImageOption {
	this := ConfigurationImageOption{}
	return &this
}

// NewConfigurationImageOptionWithDefaults instantiates a new ConfigurationImageOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationImageOptionWithDefaults() *ConfigurationImageOption {
	this := ConfigurationImageOption{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConfigurationImageOption) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationImageOption) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConfigurationImageOption) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ConfigurationImageOption) SetType(v string) {
	o.Type = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *ConfigurationImageOption) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationImageOption) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *ConfigurationImageOption) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *ConfigurationImageOption) SetLimit(v int32) {
	o.Limit = &v
}

// GetMinWidth returns the MinWidth field value if set, zero value otherwise.
func (o *ConfigurationImageOption) GetMinWidth() int32 {
	if o == nil || IsNil(o.MinWidth) {
		var ret int32
		return ret
	}
	return *o.MinWidth
}

// GetMinWidthOk returns a tuple with the MinWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationImageOption) GetMinWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.MinWidth) {
		return nil, false
	}
	return o.MinWidth, true
}

// HasMinWidth returns a boolean if a field has been set.
func (o *ConfigurationImageOption) HasMinWidth() bool {
	if o != nil && !IsNil(o.MinWidth) {
		return true
	}

	return false
}

// SetMinWidth gets a reference to the given int32 and assigns it to the MinWidth field.
func (o *ConfigurationImageOption) SetMinWidth(v int32) {
	o.MinWidth = &v
}

func (o ConfigurationImageOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigurationImageOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !IsNil(o.Limit) {
		toSerialize["Limit"] = o.Limit
	}
	if !IsNil(o.MinWidth) {
		toSerialize["MinWidth"] = o.MinWidth
	}
	return toSerialize, nil
}

type NullableConfigurationImageOption struct {
	value *ConfigurationImageOption
	isSet bool
}

func (v NullableConfigurationImageOption) Get() *ConfigurationImageOption {
	return v.value
}

func (v *NullableConfigurationImageOption) Set(val *ConfigurationImageOption) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationImageOption) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationImageOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationImageOption(val *ConfigurationImageOption) *NullableConfigurationImageOption {
	return &NullableConfigurationImageOption{value: val, isSet: true}
}

func (v NullableConfigurationImageOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationImageOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


