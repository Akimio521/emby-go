/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ServerApiEndpointsAPI interface {

	/*
	PostNotificationSMTPTestByUserid Tests SMTP

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userID User Id
	@return ApiPostNotificationSMTPTestByUseridRequest
	*/
	PostNotificationSMTPTestByUserid(ctx context.Context, userID string) ApiPostNotificationSMTPTestByUseridRequest

	// PostNotificationSMTPTestByUseridExecute executes the request
	PostNotificationSMTPTestByUseridExecute(r ApiPostNotificationSMTPTestByUseridRequest) (*http.Response, error)
}

// ServerApiEndpointsAPIService ServerApiEndpointsAPI service
type ServerApiEndpointsAPIService service

type ApiPostNotificationSMTPTestByUseridRequest struct {
	ctx context.Context
	ApiService ServerApiEndpointsAPI
	userID string
}

func (r ApiPostNotificationSMTPTestByUseridRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostNotificationSMTPTestByUseridExecute(r)
}

/*
PostNotificationSMTPTestByUserid Tests SMTP

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userID User Id
 @return ApiPostNotificationSMTPTestByUseridRequest
*/
func (a *ServerApiEndpointsAPIService) PostNotificationSMTPTestByUserid(ctx context.Context, userID string) ApiPostNotificationSMTPTestByUseridRequest {
	return ApiPostNotificationSMTPTestByUseridRequest{
		ApiService: a,
		ctx: ctx,
		userID: userID,
	}
}

// Execute executes the request
func (a *ServerApiEndpointsAPIService) PostNotificationSMTPTestByUseridExecute(r ApiPostNotificationSMTPTestByUseridRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerApiEndpointsAPIService.PostNotificationSMTPTestByUserid")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Notification/SMTP/Test/{UserID}"
	localVarPath = strings.Replace(localVarPath, "{"+"UserID"+"}", url.PathEscape(parameterValueToString(r.userID, "userID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
