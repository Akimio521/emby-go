/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the EmbyNotificationsApiNotificationResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbyNotificationsApiNotificationResult{}

// EmbyNotificationsApiNotificationResult struct for EmbyNotificationsApiNotificationResult
type EmbyNotificationsApiNotificationResult struct {
	Notifications []EmbyNotificationsApiNotification `json:"Notifications,omitempty"`
	TotalRecordCount *int32 `json:"TotalRecordCount,omitempty"`
}

// NewEmbyNotificationsApiNotificationResult instantiates a new EmbyNotificationsApiNotificationResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbyNotificationsApiNotificationResult() *EmbyNotificationsApiNotificationResult {
	this := EmbyNotificationsApiNotificationResult{}
	return &this
}

// NewEmbyNotificationsApiNotificationResultWithDefaults instantiates a new EmbyNotificationsApiNotificationResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbyNotificationsApiNotificationResultWithDefaults() *EmbyNotificationsApiNotificationResult {
	this := EmbyNotificationsApiNotificationResult{}
	return &this
}

// GetNotifications returns the Notifications field value if set, zero value otherwise.
func (o *EmbyNotificationsApiNotificationResult) GetNotifications() []EmbyNotificationsApiNotification {
	if o == nil || IsNil(o.Notifications) {
		var ret []EmbyNotificationsApiNotification
		return ret
	}
	return o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbyNotificationsApiNotificationResult) GetNotificationsOk() ([]EmbyNotificationsApiNotification, bool) {
	if o == nil || IsNil(o.Notifications) {
		return nil, false
	}
	return o.Notifications, true
}

// HasNotifications returns a boolean if a field has been set.
func (o *EmbyNotificationsApiNotificationResult) HasNotifications() bool {
	if o != nil && !IsNil(o.Notifications) {
		return true
	}

	return false
}

// SetNotifications gets a reference to the given []EmbyNotificationsApiNotification and assigns it to the Notifications field.
func (o *EmbyNotificationsApiNotificationResult) SetNotifications(v []EmbyNotificationsApiNotification) {
	o.Notifications = v
}

// GetTotalRecordCount returns the TotalRecordCount field value if set, zero value otherwise.
func (o *EmbyNotificationsApiNotificationResult) GetTotalRecordCount() int32 {
	if o == nil || IsNil(o.TotalRecordCount) {
		var ret int32
		return ret
	}
	return *o.TotalRecordCount
}

// GetTotalRecordCountOk returns a tuple with the TotalRecordCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbyNotificationsApiNotificationResult) GetTotalRecordCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalRecordCount) {
		return nil, false
	}
	return o.TotalRecordCount, true
}

// HasTotalRecordCount returns a boolean if a field has been set.
func (o *EmbyNotificationsApiNotificationResult) HasTotalRecordCount() bool {
	if o != nil && !IsNil(o.TotalRecordCount) {
		return true
	}

	return false
}

// SetTotalRecordCount gets a reference to the given int32 and assigns it to the TotalRecordCount field.
func (o *EmbyNotificationsApiNotificationResult) SetTotalRecordCount(v int32) {
	o.TotalRecordCount = &v
}

func (o EmbyNotificationsApiNotificationResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbyNotificationsApiNotificationResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Notifications) {
		toSerialize["Notifications"] = o.Notifications
	}
	if !IsNil(o.TotalRecordCount) {
		toSerialize["TotalRecordCount"] = o.TotalRecordCount
	}
	return toSerialize, nil
}

type NullableEmbyNotificationsApiNotificationResult struct {
	value *EmbyNotificationsApiNotificationResult
	isSet bool
}

func (v NullableEmbyNotificationsApiNotificationResult) Get() *EmbyNotificationsApiNotificationResult {
	return v.value
}

func (v *NullableEmbyNotificationsApiNotificationResult) Set(val *EmbyNotificationsApiNotificationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbyNotificationsApiNotificationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbyNotificationsApiNotificationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbyNotificationsApiNotificationResult(val *EmbyNotificationsApiNotificationResult) *NullableEmbyNotificationsApiNotificationResult {
	return &NullableEmbyNotificationsApiNotificationResult{value: val, isSet: true}
}

func (v NullableEmbyNotificationsApiNotificationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbyNotificationsApiNotificationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


