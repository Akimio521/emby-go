/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type TvShowsServiceAPI interface {

	/*
	GetShowsByIdEpisodes Gets episodes for a tv season

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The series id
	@return ApiGetShowsByIdEpisodesRequest
	*/
	GetShowsByIdEpisodes(ctx context.Context, id string) ApiGetShowsByIdEpisodesRequest

	// GetShowsByIdEpisodesExecute executes the request
	//  @return QueryResultBaseItemDto
	GetShowsByIdEpisodesExecute(r ApiGetShowsByIdEpisodesRequest) (*QueryResultBaseItemDto, *http.Response, error)

	/*
	GetShowsByIdSeasons Gets seasons for a tv series

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The series id
	@return ApiGetShowsByIdSeasonsRequest
	*/
	GetShowsByIdSeasons(ctx context.Context, id string) ApiGetShowsByIdSeasonsRequest

	// GetShowsByIdSeasonsExecute executes the request
	//  @return QueryResultBaseItemDto
	GetShowsByIdSeasonsExecute(r ApiGetShowsByIdSeasonsRequest) (*QueryResultBaseItemDto, *http.Response, error)

	/*
	GetShowsNextup Gets a list of next up episodes

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetShowsNextupRequest
	*/
	GetShowsNextup(ctx context.Context) ApiGetShowsNextupRequest

	// GetShowsNextupExecute executes the request
	//  @return QueryResultBaseItemDto
	GetShowsNextupExecute(r ApiGetShowsNextupRequest) (*QueryResultBaseItemDto, *http.Response, error)

	/*
	GetShowsUpcoming Gets a list of upcoming episodes

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetShowsUpcomingRequest
	*/
	GetShowsUpcoming(ctx context.Context) ApiGetShowsUpcomingRequest

	// GetShowsUpcomingExecute executes the request
	//  @return QueryResultBaseItemDto
	GetShowsUpcomingExecute(r ApiGetShowsUpcomingRequest) (*QueryResultBaseItemDto, *http.Response, error)
}

// TvShowsServiceAPIService TvShowsServiceAPI service
type TvShowsServiceAPIService service

type ApiGetShowsByIdEpisodesRequest struct {
	ctx context.Context
	ApiService TvShowsServiceAPI
	userId *string
	id string
	fields *string
	season *int32
	seasonId *string
	isMissing *bool
	adjacentTo *string
	startItemId *string
	startIndex *int32
	limit *int32
	enableImages *bool
	imageTypeLimit *int32
	enableImageTypes *string
	enableUserData *bool
	sortBy *string
	sortOrder *string
}

// User Id
func (r ApiGetShowsByIdEpisodesRequest) UserId(userId string) ApiGetShowsByIdEpisodesRequest {
	r.userId = &userId
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
func (r ApiGetShowsByIdEpisodesRequest) Fields(fields string) ApiGetShowsByIdEpisodesRequest {
	r.fields = &fields
	return r
}

// Optional filter by season number.
func (r ApiGetShowsByIdEpisodesRequest) Season(season int32) ApiGetShowsByIdEpisodesRequest {
	r.season = &season
	return r
}

// Optional. Filter by season id
func (r ApiGetShowsByIdEpisodesRequest) SeasonId(seasonId string) ApiGetShowsByIdEpisodesRequest {
	r.seasonId = &seasonId
	return r
}

// Optional filter by items that are missing episodes or not.
func (r ApiGetShowsByIdEpisodesRequest) IsMissing(isMissing bool) ApiGetShowsByIdEpisodesRequest {
	r.isMissing = &isMissing
	return r
}

// Optional. Return items that are siblings of a supplied item.
func (r ApiGetShowsByIdEpisodesRequest) AdjacentTo(adjacentTo string) ApiGetShowsByIdEpisodesRequest {
	r.adjacentTo = &adjacentTo
	return r
}

// Optional. Skip through the list until a given item is found.
func (r ApiGetShowsByIdEpisodesRequest) StartItemId(startItemId string) ApiGetShowsByIdEpisodesRequest {
	r.startItemId = &startItemId
	return r
}

// Optional. The record index to start at. All items with a lower index will be dropped from the results.
func (r ApiGetShowsByIdEpisodesRequest) StartIndex(startIndex int32) ApiGetShowsByIdEpisodesRequest {
	r.startIndex = &startIndex
	return r
}

// Optional. The maximum number of records to return
func (r ApiGetShowsByIdEpisodesRequest) Limit(limit int32) ApiGetShowsByIdEpisodesRequest {
	r.limit = &limit
	return r
}

// Optional, include image information in output
func (r ApiGetShowsByIdEpisodesRequest) EnableImages(enableImages bool) ApiGetShowsByIdEpisodesRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, the max number of images to return, per image type
func (r ApiGetShowsByIdEpisodesRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetShowsByIdEpisodesRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetShowsByIdEpisodesRequest) EnableImageTypes(enableImageTypes string) ApiGetShowsByIdEpisodesRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional, include user data
func (r ApiGetShowsByIdEpisodesRequest) EnableUserData(enableUserData bool) ApiGetShowsByIdEpisodesRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
func (r ApiGetShowsByIdEpisodesRequest) SortBy(sortBy string) ApiGetShowsByIdEpisodesRequest {
	r.sortBy = &sortBy
	return r
}

// Sort Order - Ascending,Descending
func (r ApiGetShowsByIdEpisodesRequest) SortOrder(sortOrder string) ApiGetShowsByIdEpisodesRequest {
	r.sortOrder = &sortOrder
	return r
}

func (r ApiGetShowsByIdEpisodesRequest) Execute() (*QueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetShowsByIdEpisodesExecute(r)
}

/*
GetShowsByIdEpisodes Gets episodes for a tv season

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The series id
 @return ApiGetShowsByIdEpisodesRequest
*/
func (a *TvShowsServiceAPIService) GetShowsByIdEpisodes(ctx context.Context, id string) ApiGetShowsByIdEpisodesRequest {
	return ApiGetShowsByIdEpisodesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return QueryResultBaseItemDto
func (a *TvShowsServiceAPIService) GetShowsByIdEpisodesExecute(r ApiGetShowsByIdEpisodesRequest) (*QueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TvShowsServiceAPIService.GetShowsByIdEpisodes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Shows/{Id}/Episodes"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "form", "")
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "form", "")
	}
	if r.season != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Season", r.season, "form", "")
	}
	if r.seasonId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SeasonId", r.seasonId, "form", "")
	}
	if r.isMissing != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsMissing", r.isMissing, "form", "")
	}
	if r.adjacentTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AdjacentTo", r.adjacentTo, "form", "")
	}
	if r.startItemId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartItemId", r.startItemId, "form", "")
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartIndex", r.startIndex, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "form", "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "form", "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortBy", r.sortBy, "form", "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortOrder", r.sortOrder, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetShowsByIdSeasonsRequest struct {
	ctx context.Context
	ApiService TvShowsServiceAPI
	userId *string
	id string
	fields *string
	isSpecialSeason *bool
	isMissing *bool
	adjacentTo *string
	enableImages *bool
	imageTypeLimit *int32
	enableImageTypes *string
	enableUserData *bool
}

// User Id
func (r ApiGetShowsByIdSeasonsRequest) UserId(userId string) ApiGetShowsByIdSeasonsRequest {
	r.userId = &userId
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
func (r ApiGetShowsByIdSeasonsRequest) Fields(fields string) ApiGetShowsByIdSeasonsRequest {
	r.fields = &fields
	return r
}

// Optional. Filter by special season.
func (r ApiGetShowsByIdSeasonsRequest) IsSpecialSeason(isSpecialSeason bool) ApiGetShowsByIdSeasonsRequest {
	r.isSpecialSeason = &isSpecialSeason
	return r
}

// Optional filter by items that are missing episodes or not.
func (r ApiGetShowsByIdSeasonsRequest) IsMissing(isMissing bool) ApiGetShowsByIdSeasonsRequest {
	r.isMissing = &isMissing
	return r
}

// Optional. Return items that are siblings of a supplied item.
func (r ApiGetShowsByIdSeasonsRequest) AdjacentTo(adjacentTo string) ApiGetShowsByIdSeasonsRequest {
	r.adjacentTo = &adjacentTo
	return r
}

// Optional, include image information in output
func (r ApiGetShowsByIdSeasonsRequest) EnableImages(enableImages bool) ApiGetShowsByIdSeasonsRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, the max number of images to return, per image type
func (r ApiGetShowsByIdSeasonsRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetShowsByIdSeasonsRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetShowsByIdSeasonsRequest) EnableImageTypes(enableImageTypes string) ApiGetShowsByIdSeasonsRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional, include user data
func (r ApiGetShowsByIdSeasonsRequest) EnableUserData(enableUserData bool) ApiGetShowsByIdSeasonsRequest {
	r.enableUserData = &enableUserData
	return r
}

func (r ApiGetShowsByIdSeasonsRequest) Execute() (*QueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetShowsByIdSeasonsExecute(r)
}

/*
GetShowsByIdSeasons Gets seasons for a tv series

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The series id
 @return ApiGetShowsByIdSeasonsRequest
*/
func (a *TvShowsServiceAPIService) GetShowsByIdSeasons(ctx context.Context, id string) ApiGetShowsByIdSeasonsRequest {
	return ApiGetShowsByIdSeasonsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return QueryResultBaseItemDto
func (a *TvShowsServiceAPIService) GetShowsByIdSeasonsExecute(r ApiGetShowsByIdSeasonsRequest) (*QueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TvShowsServiceAPIService.GetShowsByIdSeasons")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Shows/{Id}/Seasons"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "form", "")
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "form", "")
	}
	if r.isSpecialSeason != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsSpecialSeason", r.isSpecialSeason, "form", "")
	}
	if r.isMissing != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsMissing", r.isMissing, "form", "")
	}
	if r.adjacentTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AdjacentTo", r.adjacentTo, "form", "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetShowsNextupRequest struct {
	ctx context.Context
	ApiService TvShowsServiceAPI
	userId *string
	startIndex *int32
	limit *int32
	fields *string
	seriesId *string
	parentId *string
	enableImages *bool
	imageTypeLimit *int32
	enableImageTypes *string
	enableUserData *bool
}

// User Id
func (r ApiGetShowsNextupRequest) UserId(userId string) ApiGetShowsNextupRequest {
	r.userId = &userId
	return r
}

// Optional. The record index to start at. All items with a lower index will be dropped from the results.
func (r ApiGetShowsNextupRequest) StartIndex(startIndex int32) ApiGetShowsNextupRequest {
	r.startIndex = &startIndex
	return r
}

// Optional. The maximum number of records to return
func (r ApiGetShowsNextupRequest) Limit(limit int32) ApiGetShowsNextupRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
func (r ApiGetShowsNextupRequest) Fields(fields string) ApiGetShowsNextupRequest {
	r.fields = &fields
	return r
}

// Optional. Filter by series id
func (r ApiGetShowsNextupRequest) SeriesId(seriesId string) ApiGetShowsNextupRequest {
	r.seriesId = &seriesId
	return r
}

// Specify this to localize the search to a specific item or folder. Omit to use the root
func (r ApiGetShowsNextupRequest) ParentId(parentId string) ApiGetShowsNextupRequest {
	r.parentId = &parentId
	return r
}

// Optional, include image information in output
func (r ApiGetShowsNextupRequest) EnableImages(enableImages bool) ApiGetShowsNextupRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, the max number of images to return, per image type
func (r ApiGetShowsNextupRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetShowsNextupRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetShowsNextupRequest) EnableImageTypes(enableImageTypes string) ApiGetShowsNextupRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional, include user data
func (r ApiGetShowsNextupRequest) EnableUserData(enableUserData bool) ApiGetShowsNextupRequest {
	r.enableUserData = &enableUserData
	return r
}

func (r ApiGetShowsNextupRequest) Execute() (*QueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetShowsNextupExecute(r)
}

/*
GetShowsNextup Gets a list of next up episodes

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetShowsNextupRequest
*/
func (a *TvShowsServiceAPIService) GetShowsNextup(ctx context.Context) ApiGetShowsNextupRequest {
	return ApiGetShowsNextupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return QueryResultBaseItemDto
func (a *TvShowsServiceAPIService) GetShowsNextupExecute(r ApiGetShowsNextupRequest) (*QueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TvShowsServiceAPIService.GetShowsNextup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Shows/NextUp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "form", "")
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartIndex", r.startIndex, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "form", "")
	}
	if r.seriesId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SeriesId", r.seriesId, "form", "")
	}
	if r.parentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ParentId", r.parentId, "form", "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetShowsUpcomingRequest struct {
	ctx context.Context
	ApiService TvShowsServiceAPI
	userId *string
	startIndex *int32
	limit *int32
	fields *string
	parentId *string
	enableImages *bool
	imageTypeLimit *int32
	enableImageTypes *string
	enableUserData *bool
}

// User Id
func (r ApiGetShowsUpcomingRequest) UserId(userId string) ApiGetShowsUpcomingRequest {
	r.userId = &userId
	return r
}

// Optional. The record index to start at. All items with a lower index will be dropped from the results.
func (r ApiGetShowsUpcomingRequest) StartIndex(startIndex int32) ApiGetShowsUpcomingRequest {
	r.startIndex = &startIndex
	return r
}

// Optional. The maximum number of records to return
func (r ApiGetShowsUpcomingRequest) Limit(limit int32) ApiGetShowsUpcomingRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
func (r ApiGetShowsUpcomingRequest) Fields(fields string) ApiGetShowsUpcomingRequest {
	r.fields = &fields
	return r
}

// Specify this to localize the search to a specific item or folder. Omit to use the root
func (r ApiGetShowsUpcomingRequest) ParentId(parentId string) ApiGetShowsUpcomingRequest {
	r.parentId = &parentId
	return r
}

// Optional, include image information in output
func (r ApiGetShowsUpcomingRequest) EnableImages(enableImages bool) ApiGetShowsUpcomingRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, the max number of images to return, per image type
func (r ApiGetShowsUpcomingRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetShowsUpcomingRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetShowsUpcomingRequest) EnableImageTypes(enableImageTypes string) ApiGetShowsUpcomingRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional, include user data
func (r ApiGetShowsUpcomingRequest) EnableUserData(enableUserData bool) ApiGetShowsUpcomingRequest {
	r.enableUserData = &enableUserData
	return r
}

func (r ApiGetShowsUpcomingRequest) Execute() (*QueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetShowsUpcomingExecute(r)
}

/*
GetShowsUpcoming Gets a list of upcoming episodes

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetShowsUpcomingRequest
*/
func (a *TvShowsServiceAPIService) GetShowsUpcoming(ctx context.Context) ApiGetShowsUpcomingRequest {
	return ApiGetShowsUpcomingRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return QueryResultBaseItemDto
func (a *TvShowsServiceAPIService) GetShowsUpcomingExecute(r ApiGetShowsUpcomingRequest) (*QueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TvShowsServiceAPIService.GetShowsUpcoming")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Shows/Upcoming"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "form", "")
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartIndex", r.startIndex, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "form", "")
	}
	if r.parentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ParentId", r.parentId, "form", "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
