/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the GameSystemSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GameSystemSummary{}

// GameSystemSummary struct for GameSystemSummary
type GameSystemSummary struct {
	Name *string `json:"Name,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty"`
	GameCount *int32 `json:"GameCount,omitempty"`
	GameFileExtensions []string `json:"GameFileExtensions,omitempty"`
	ClientInstalledGameCount *int32 `json:"ClientInstalledGameCount,omitempty"`
}

// NewGameSystemSummary instantiates a new GameSystemSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGameSystemSummary() *GameSystemSummary {
	this := GameSystemSummary{}
	return &this
}

// NewGameSystemSummaryWithDefaults instantiates a new GameSystemSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGameSystemSummaryWithDefaults() *GameSystemSummary {
	this := GameSystemSummary{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GameSystemSummary) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameSystemSummary) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GameSystemSummary) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GameSystemSummary) SetName(v string) {
	o.Name = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *GameSystemSummary) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameSystemSummary) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *GameSystemSummary) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *GameSystemSummary) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetGameCount returns the GameCount field value if set, zero value otherwise.
func (o *GameSystemSummary) GetGameCount() int32 {
	if o == nil || IsNil(o.GameCount) {
		var ret int32
		return ret
	}
	return *o.GameCount
}

// GetGameCountOk returns a tuple with the GameCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameSystemSummary) GetGameCountOk() (*int32, bool) {
	if o == nil || IsNil(o.GameCount) {
		return nil, false
	}
	return o.GameCount, true
}

// HasGameCount returns a boolean if a field has been set.
func (o *GameSystemSummary) HasGameCount() bool {
	if o != nil && !IsNil(o.GameCount) {
		return true
	}

	return false
}

// SetGameCount gets a reference to the given int32 and assigns it to the GameCount field.
func (o *GameSystemSummary) SetGameCount(v int32) {
	o.GameCount = &v
}

// GetGameFileExtensions returns the GameFileExtensions field value if set, zero value otherwise.
func (o *GameSystemSummary) GetGameFileExtensions() []string {
	if o == nil || IsNil(o.GameFileExtensions) {
		var ret []string
		return ret
	}
	return o.GameFileExtensions
}

// GetGameFileExtensionsOk returns a tuple with the GameFileExtensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameSystemSummary) GetGameFileExtensionsOk() ([]string, bool) {
	if o == nil || IsNil(o.GameFileExtensions) {
		return nil, false
	}
	return o.GameFileExtensions, true
}

// HasGameFileExtensions returns a boolean if a field has been set.
func (o *GameSystemSummary) HasGameFileExtensions() bool {
	if o != nil && !IsNil(o.GameFileExtensions) {
		return true
	}

	return false
}

// SetGameFileExtensions gets a reference to the given []string and assigns it to the GameFileExtensions field.
func (o *GameSystemSummary) SetGameFileExtensions(v []string) {
	o.GameFileExtensions = v
}

// GetClientInstalledGameCount returns the ClientInstalledGameCount field value if set, zero value otherwise.
func (o *GameSystemSummary) GetClientInstalledGameCount() int32 {
	if o == nil || IsNil(o.ClientInstalledGameCount) {
		var ret int32
		return ret
	}
	return *o.ClientInstalledGameCount
}

// GetClientInstalledGameCountOk returns a tuple with the ClientInstalledGameCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameSystemSummary) GetClientInstalledGameCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ClientInstalledGameCount) {
		return nil, false
	}
	return o.ClientInstalledGameCount, true
}

// HasClientInstalledGameCount returns a boolean if a field has been set.
func (o *GameSystemSummary) HasClientInstalledGameCount() bool {
	if o != nil && !IsNil(o.ClientInstalledGameCount) {
		return true
	}

	return false
}

// SetClientInstalledGameCount gets a reference to the given int32 and assigns it to the ClientInstalledGameCount field.
func (o *GameSystemSummary) SetClientInstalledGameCount(v int32) {
	o.ClientInstalledGameCount = &v
}

func (o GameSystemSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GameSystemSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.DisplayName) {
		toSerialize["DisplayName"] = o.DisplayName
	}
	if !IsNil(o.GameCount) {
		toSerialize["GameCount"] = o.GameCount
	}
	if !IsNil(o.GameFileExtensions) {
		toSerialize["GameFileExtensions"] = o.GameFileExtensions
	}
	if !IsNil(o.ClientInstalledGameCount) {
		toSerialize["ClientInstalledGameCount"] = o.ClientInstalledGameCount
	}
	return toSerialize, nil
}

type NullableGameSystemSummary struct {
	value *GameSystemSummary
	isSet bool
}

func (v NullableGameSystemSummary) Get() *GameSystemSummary {
	return v.value
}

func (v *NullableGameSystemSummary) Set(val *GameSystemSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableGameSystemSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableGameSystemSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGameSystemSummary(val *GameSystemSummary) *NullableGameSystemSummary {
	return &NullableGameSystemSummary{value: val, isSet: true}
}

func (v NullableGameSystemSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGameSystemSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


