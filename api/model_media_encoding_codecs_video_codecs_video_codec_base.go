/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the MediaEncodingCodecsVideoCodecsVideoCodecBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaEncodingCodecsVideoCodecsVideoCodecBase{}

// MediaEncodingCodecsVideoCodecsVideoCodecBase struct for MediaEncodingCodecsVideoCodecsVideoCodecBase
type MediaEncodingCodecsVideoCodecsVideoCodecBase struct {
	CodecKind *string `json:"CodecKind,omitempty"`
	MediaTypeName *string `json:"MediaTypeName,omitempty"`
	VideoMediaType *string `json:"VideoMediaType,omitempty"`
	MinWidth NullableInt32 `json:"MinWidth,omitempty"`
	MaxWidth NullableInt32 `json:"MaxWidth,omitempty"`
	MinHeight NullableInt32 `json:"MinHeight,omitempty"`
	MaxHeight NullableInt32 `json:"MaxHeight,omitempty"`
	WidthAlignment NullableInt32 `json:"WidthAlignment,omitempty"`
	HeightAlignment NullableInt32 `json:"HeightAlignment,omitempty"`
	MinFrameRate NullableInt32 `json:"MinFrameRate,omitempty"`
	MaxFrameRate NullableInt32 `json:"MaxFrameRate,omitempty"`
	SupportedColorFormats []string `json:"SupportedColorFormats,omitempty"`
	SupportedColorFormatStrings []string `json:"SupportedColorFormatStrings,omitempty"`
	ProfileAndLevelInformation []MediaEncodingCodecsCommonTypesProfileLevelInformation `json:"ProfileAndLevelInformation,omitempty"`
	Id *string `json:"Id,omitempty"`
	Direction *string `json:"Direction,omitempty"`
	Name *string `json:"Name,omitempty"`
	Description *string `json:"Description,omitempty"`
	FrameworkCodec *string `json:"FrameworkCodec,omitempty"`
	IsHardwareCodec *bool `json:"IsHardwareCodec,omitempty"`
	SecondaryFramework *string `json:"SecondaryFramework,omitempty"`
	SecondaryFrameworkCodec *string `json:"SecondaryFrameworkCodec,omitempty"`
	MaxInstanceCount NullableInt32 `json:"MaxInstanceCount,omitempty"`
	MinBitRate *MediaEncodingCodecsCommonTypesBitRate `json:"MinBitRate,omitempty"`
	MaxBitRate *MediaEncodingCodecsCommonTypesBitRate `json:"MaxBitRate,omitempty"`
	IsEnabledByDefault *bool `json:"IsEnabledByDefault,omitempty"`
	DefaultPriority *int32 `json:"DefaultPriority,omitempty"`
}

// NewMediaEncodingCodecsVideoCodecsVideoCodecBase instantiates a new MediaEncodingCodecsVideoCodecsVideoCodecBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaEncodingCodecsVideoCodecsVideoCodecBase() *MediaEncodingCodecsVideoCodecsVideoCodecBase {
	this := MediaEncodingCodecsVideoCodecsVideoCodecBase{}
	return &this
}

// NewMediaEncodingCodecsVideoCodecsVideoCodecBaseWithDefaults instantiates a new MediaEncodingCodecsVideoCodecsVideoCodecBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaEncodingCodecsVideoCodecsVideoCodecBaseWithDefaults() *MediaEncodingCodecsVideoCodecsVideoCodecBase {
	this := MediaEncodingCodecsVideoCodecsVideoCodecBase{}
	return &this
}

// GetCodecKind returns the CodecKind field value if set, zero value otherwise.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetCodecKind() string {
	if o == nil || IsNil(o.CodecKind) {
		var ret string
		return ret
	}
	return *o.CodecKind
}

// GetCodecKindOk returns a tuple with the CodecKind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetCodecKindOk() (*string, bool) {
	if o == nil || IsNil(o.CodecKind) {
		return nil, false
	}
	return o.CodecKind, true
}

// HasCodecKind returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasCodecKind() bool {
	if o != nil && !IsNil(o.CodecKind) {
		return true
	}

	return false
}

// SetCodecKind gets a reference to the given string and assigns it to the CodecKind field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetCodecKind(v string) {
	o.CodecKind = &v
}

// GetMediaTypeName returns the MediaTypeName field value if set, zero value otherwise.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetMediaTypeName() string {
	if o == nil || IsNil(o.MediaTypeName) {
		var ret string
		return ret
	}
	return *o.MediaTypeName
}

// GetMediaTypeNameOk returns a tuple with the MediaTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetMediaTypeNameOk() (*string, bool) {
	if o == nil || IsNil(o.MediaTypeName) {
		return nil, false
	}
	return o.MediaTypeName, true
}

// HasMediaTypeName returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasMediaTypeName() bool {
	if o != nil && !IsNil(o.MediaTypeName) {
		return true
	}

	return false
}

// SetMediaTypeName gets a reference to the given string and assigns it to the MediaTypeName field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetMediaTypeName(v string) {
	o.MediaTypeName = &v
}

// GetVideoMediaType returns the VideoMediaType field value if set, zero value otherwise.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetVideoMediaType() string {
	if o == nil || IsNil(o.VideoMediaType) {
		var ret string
		return ret
	}
	return *o.VideoMediaType
}

// GetVideoMediaTypeOk returns a tuple with the VideoMediaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetVideoMediaTypeOk() (*string, bool) {
	if o == nil || IsNil(o.VideoMediaType) {
		return nil, false
	}
	return o.VideoMediaType, true
}

// HasVideoMediaType returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasVideoMediaType() bool {
	if o != nil && !IsNil(o.VideoMediaType) {
		return true
	}

	return false
}

// SetVideoMediaType gets a reference to the given string and assigns it to the VideoMediaType field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetVideoMediaType(v string) {
	o.VideoMediaType = &v
}

// GetMinWidth returns the MinWidth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetMinWidth() int32 {
	if o == nil || IsNil(o.MinWidth.Get()) {
		var ret int32
		return ret
	}
	return *o.MinWidth.Get()
}

// GetMinWidthOk returns a tuple with the MinWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetMinWidthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinWidth.Get(), o.MinWidth.IsSet()
}

// HasMinWidth returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasMinWidth() bool {
	if o != nil && o.MinWidth.IsSet() {
		return true
	}

	return false
}

// SetMinWidth gets a reference to the given NullableInt32 and assigns it to the MinWidth field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetMinWidth(v int32) {
	o.MinWidth.Set(&v)
}
// SetMinWidthNil sets the value for MinWidth to be an explicit nil
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetMinWidthNil() {
	o.MinWidth.Set(nil)
}

// UnsetMinWidth ensures that no value is present for MinWidth, not even an explicit nil
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) UnsetMinWidth() {
	o.MinWidth.Unset()
}

// GetMaxWidth returns the MaxWidth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetMaxWidth() int32 {
	if o == nil || IsNil(o.MaxWidth.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxWidth.Get()
}

// GetMaxWidthOk returns a tuple with the MaxWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetMaxWidthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxWidth.Get(), o.MaxWidth.IsSet()
}

// HasMaxWidth returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasMaxWidth() bool {
	if o != nil && o.MaxWidth.IsSet() {
		return true
	}

	return false
}

// SetMaxWidth gets a reference to the given NullableInt32 and assigns it to the MaxWidth field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetMaxWidth(v int32) {
	o.MaxWidth.Set(&v)
}
// SetMaxWidthNil sets the value for MaxWidth to be an explicit nil
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetMaxWidthNil() {
	o.MaxWidth.Set(nil)
}

// UnsetMaxWidth ensures that no value is present for MaxWidth, not even an explicit nil
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) UnsetMaxWidth() {
	o.MaxWidth.Unset()
}

// GetMinHeight returns the MinHeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetMinHeight() int32 {
	if o == nil || IsNil(o.MinHeight.Get()) {
		var ret int32
		return ret
	}
	return *o.MinHeight.Get()
}

// GetMinHeightOk returns a tuple with the MinHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetMinHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinHeight.Get(), o.MinHeight.IsSet()
}

// HasMinHeight returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasMinHeight() bool {
	if o != nil && o.MinHeight.IsSet() {
		return true
	}

	return false
}

// SetMinHeight gets a reference to the given NullableInt32 and assigns it to the MinHeight field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetMinHeight(v int32) {
	o.MinHeight.Set(&v)
}
// SetMinHeightNil sets the value for MinHeight to be an explicit nil
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetMinHeightNil() {
	o.MinHeight.Set(nil)
}

// UnsetMinHeight ensures that no value is present for MinHeight, not even an explicit nil
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) UnsetMinHeight() {
	o.MinHeight.Unset()
}

// GetMaxHeight returns the MaxHeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetMaxHeight() int32 {
	if o == nil || IsNil(o.MaxHeight.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxHeight.Get()
}

// GetMaxHeightOk returns a tuple with the MaxHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetMaxHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxHeight.Get(), o.MaxHeight.IsSet()
}

// HasMaxHeight returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasMaxHeight() bool {
	if o != nil && o.MaxHeight.IsSet() {
		return true
	}

	return false
}

// SetMaxHeight gets a reference to the given NullableInt32 and assigns it to the MaxHeight field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetMaxHeight(v int32) {
	o.MaxHeight.Set(&v)
}
// SetMaxHeightNil sets the value for MaxHeight to be an explicit nil
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetMaxHeightNil() {
	o.MaxHeight.Set(nil)
}

// UnsetMaxHeight ensures that no value is present for MaxHeight, not even an explicit nil
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) UnsetMaxHeight() {
	o.MaxHeight.Unset()
}

// GetWidthAlignment returns the WidthAlignment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetWidthAlignment() int32 {
	if o == nil || IsNil(o.WidthAlignment.Get()) {
		var ret int32
		return ret
	}
	return *o.WidthAlignment.Get()
}

// GetWidthAlignmentOk returns a tuple with the WidthAlignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetWidthAlignmentOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WidthAlignment.Get(), o.WidthAlignment.IsSet()
}

// HasWidthAlignment returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasWidthAlignment() bool {
	if o != nil && o.WidthAlignment.IsSet() {
		return true
	}

	return false
}

// SetWidthAlignment gets a reference to the given NullableInt32 and assigns it to the WidthAlignment field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetWidthAlignment(v int32) {
	o.WidthAlignment.Set(&v)
}
// SetWidthAlignmentNil sets the value for WidthAlignment to be an explicit nil
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetWidthAlignmentNil() {
	o.WidthAlignment.Set(nil)
}

// UnsetWidthAlignment ensures that no value is present for WidthAlignment, not even an explicit nil
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) UnsetWidthAlignment() {
	o.WidthAlignment.Unset()
}

// GetHeightAlignment returns the HeightAlignment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetHeightAlignment() int32 {
	if o == nil || IsNil(o.HeightAlignment.Get()) {
		var ret int32
		return ret
	}
	return *o.HeightAlignment.Get()
}

// GetHeightAlignmentOk returns a tuple with the HeightAlignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetHeightAlignmentOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.HeightAlignment.Get(), o.HeightAlignment.IsSet()
}

// HasHeightAlignment returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasHeightAlignment() bool {
	if o != nil && o.HeightAlignment.IsSet() {
		return true
	}

	return false
}

// SetHeightAlignment gets a reference to the given NullableInt32 and assigns it to the HeightAlignment field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetHeightAlignment(v int32) {
	o.HeightAlignment.Set(&v)
}
// SetHeightAlignmentNil sets the value for HeightAlignment to be an explicit nil
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetHeightAlignmentNil() {
	o.HeightAlignment.Set(nil)
}

// UnsetHeightAlignment ensures that no value is present for HeightAlignment, not even an explicit nil
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) UnsetHeightAlignment() {
	o.HeightAlignment.Unset()
}

// GetMinFrameRate returns the MinFrameRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetMinFrameRate() int32 {
	if o == nil || IsNil(o.MinFrameRate.Get()) {
		var ret int32
		return ret
	}
	return *o.MinFrameRate.Get()
}

// GetMinFrameRateOk returns a tuple with the MinFrameRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetMinFrameRateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinFrameRate.Get(), o.MinFrameRate.IsSet()
}

// HasMinFrameRate returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasMinFrameRate() bool {
	if o != nil && o.MinFrameRate.IsSet() {
		return true
	}

	return false
}

// SetMinFrameRate gets a reference to the given NullableInt32 and assigns it to the MinFrameRate field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetMinFrameRate(v int32) {
	o.MinFrameRate.Set(&v)
}
// SetMinFrameRateNil sets the value for MinFrameRate to be an explicit nil
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetMinFrameRateNil() {
	o.MinFrameRate.Set(nil)
}

// UnsetMinFrameRate ensures that no value is present for MinFrameRate, not even an explicit nil
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) UnsetMinFrameRate() {
	o.MinFrameRate.Unset()
}

// GetMaxFrameRate returns the MaxFrameRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetMaxFrameRate() int32 {
	if o == nil || IsNil(o.MaxFrameRate.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxFrameRate.Get()
}

// GetMaxFrameRateOk returns a tuple with the MaxFrameRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetMaxFrameRateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxFrameRate.Get(), o.MaxFrameRate.IsSet()
}

// HasMaxFrameRate returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasMaxFrameRate() bool {
	if o != nil && o.MaxFrameRate.IsSet() {
		return true
	}

	return false
}

// SetMaxFrameRate gets a reference to the given NullableInt32 and assigns it to the MaxFrameRate field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetMaxFrameRate(v int32) {
	o.MaxFrameRate.Set(&v)
}
// SetMaxFrameRateNil sets the value for MaxFrameRate to be an explicit nil
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetMaxFrameRateNil() {
	o.MaxFrameRate.Set(nil)
}

// UnsetMaxFrameRate ensures that no value is present for MaxFrameRate, not even an explicit nil
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) UnsetMaxFrameRate() {
	o.MaxFrameRate.Unset()
}

// GetSupportedColorFormats returns the SupportedColorFormats field value if set, zero value otherwise.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetSupportedColorFormats() []string {
	if o == nil || IsNil(o.SupportedColorFormats) {
		var ret []string
		return ret
	}
	return o.SupportedColorFormats
}

// GetSupportedColorFormatsOk returns a tuple with the SupportedColorFormats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetSupportedColorFormatsOk() ([]string, bool) {
	if o == nil || IsNil(o.SupportedColorFormats) {
		return nil, false
	}
	return o.SupportedColorFormats, true
}

// HasSupportedColorFormats returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasSupportedColorFormats() bool {
	if o != nil && !IsNil(o.SupportedColorFormats) {
		return true
	}

	return false
}

// SetSupportedColorFormats gets a reference to the given []string and assigns it to the SupportedColorFormats field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetSupportedColorFormats(v []string) {
	o.SupportedColorFormats = v
}

// GetSupportedColorFormatStrings returns the SupportedColorFormatStrings field value if set, zero value otherwise.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetSupportedColorFormatStrings() []string {
	if o == nil || IsNil(o.SupportedColorFormatStrings) {
		var ret []string
		return ret
	}
	return o.SupportedColorFormatStrings
}

// GetSupportedColorFormatStringsOk returns a tuple with the SupportedColorFormatStrings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetSupportedColorFormatStringsOk() ([]string, bool) {
	if o == nil || IsNil(o.SupportedColorFormatStrings) {
		return nil, false
	}
	return o.SupportedColorFormatStrings, true
}

// HasSupportedColorFormatStrings returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasSupportedColorFormatStrings() bool {
	if o != nil && !IsNil(o.SupportedColorFormatStrings) {
		return true
	}

	return false
}

// SetSupportedColorFormatStrings gets a reference to the given []string and assigns it to the SupportedColorFormatStrings field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetSupportedColorFormatStrings(v []string) {
	o.SupportedColorFormatStrings = v
}

// GetProfileAndLevelInformation returns the ProfileAndLevelInformation field value if set, zero value otherwise.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetProfileAndLevelInformation() []MediaEncodingCodecsCommonTypesProfileLevelInformation {
	if o == nil || IsNil(o.ProfileAndLevelInformation) {
		var ret []MediaEncodingCodecsCommonTypesProfileLevelInformation
		return ret
	}
	return o.ProfileAndLevelInformation
}

// GetProfileAndLevelInformationOk returns a tuple with the ProfileAndLevelInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetProfileAndLevelInformationOk() ([]MediaEncodingCodecsCommonTypesProfileLevelInformation, bool) {
	if o == nil || IsNil(o.ProfileAndLevelInformation) {
		return nil, false
	}
	return o.ProfileAndLevelInformation, true
}

// HasProfileAndLevelInformation returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasProfileAndLevelInformation() bool {
	if o != nil && !IsNil(o.ProfileAndLevelInformation) {
		return true
	}

	return false
}

// SetProfileAndLevelInformation gets a reference to the given []MediaEncodingCodecsCommonTypesProfileLevelInformation and assigns it to the ProfileAndLevelInformation field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetProfileAndLevelInformation(v []MediaEncodingCodecsCommonTypesProfileLevelInformation) {
	o.ProfileAndLevelInformation = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetId(v string) {
	o.Id = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetDirection() string {
	if o == nil || IsNil(o.Direction) {
		var ret string
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetDirectionOk() (*string, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given string and assigns it to the Direction field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetDirection(v string) {
	o.Direction = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetDescription(v string) {
	o.Description = &v
}

// GetFrameworkCodec returns the FrameworkCodec field value if set, zero value otherwise.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetFrameworkCodec() string {
	if o == nil || IsNil(o.FrameworkCodec) {
		var ret string
		return ret
	}
	return *o.FrameworkCodec
}

// GetFrameworkCodecOk returns a tuple with the FrameworkCodec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetFrameworkCodecOk() (*string, bool) {
	if o == nil || IsNil(o.FrameworkCodec) {
		return nil, false
	}
	return o.FrameworkCodec, true
}

// HasFrameworkCodec returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasFrameworkCodec() bool {
	if o != nil && !IsNil(o.FrameworkCodec) {
		return true
	}

	return false
}

// SetFrameworkCodec gets a reference to the given string and assigns it to the FrameworkCodec field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetFrameworkCodec(v string) {
	o.FrameworkCodec = &v
}

// GetIsHardwareCodec returns the IsHardwareCodec field value if set, zero value otherwise.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetIsHardwareCodec() bool {
	if o == nil || IsNil(o.IsHardwareCodec) {
		var ret bool
		return ret
	}
	return *o.IsHardwareCodec
}

// GetIsHardwareCodecOk returns a tuple with the IsHardwareCodec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetIsHardwareCodecOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHardwareCodec) {
		return nil, false
	}
	return o.IsHardwareCodec, true
}

// HasIsHardwareCodec returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasIsHardwareCodec() bool {
	if o != nil && !IsNil(o.IsHardwareCodec) {
		return true
	}

	return false
}

// SetIsHardwareCodec gets a reference to the given bool and assigns it to the IsHardwareCodec field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetIsHardwareCodec(v bool) {
	o.IsHardwareCodec = &v
}

// GetSecondaryFramework returns the SecondaryFramework field value if set, zero value otherwise.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetSecondaryFramework() string {
	if o == nil || IsNil(o.SecondaryFramework) {
		var ret string
		return ret
	}
	return *o.SecondaryFramework
}

// GetSecondaryFrameworkOk returns a tuple with the SecondaryFramework field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetSecondaryFrameworkOk() (*string, bool) {
	if o == nil || IsNil(o.SecondaryFramework) {
		return nil, false
	}
	return o.SecondaryFramework, true
}

// HasSecondaryFramework returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasSecondaryFramework() bool {
	if o != nil && !IsNil(o.SecondaryFramework) {
		return true
	}

	return false
}

// SetSecondaryFramework gets a reference to the given string and assigns it to the SecondaryFramework field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetSecondaryFramework(v string) {
	o.SecondaryFramework = &v
}

// GetSecondaryFrameworkCodec returns the SecondaryFrameworkCodec field value if set, zero value otherwise.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetSecondaryFrameworkCodec() string {
	if o == nil || IsNil(o.SecondaryFrameworkCodec) {
		var ret string
		return ret
	}
	return *o.SecondaryFrameworkCodec
}

// GetSecondaryFrameworkCodecOk returns a tuple with the SecondaryFrameworkCodec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetSecondaryFrameworkCodecOk() (*string, bool) {
	if o == nil || IsNil(o.SecondaryFrameworkCodec) {
		return nil, false
	}
	return o.SecondaryFrameworkCodec, true
}

// HasSecondaryFrameworkCodec returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasSecondaryFrameworkCodec() bool {
	if o != nil && !IsNil(o.SecondaryFrameworkCodec) {
		return true
	}

	return false
}

// SetSecondaryFrameworkCodec gets a reference to the given string and assigns it to the SecondaryFrameworkCodec field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetSecondaryFrameworkCodec(v string) {
	o.SecondaryFrameworkCodec = &v
}

// GetMaxInstanceCount returns the MaxInstanceCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetMaxInstanceCount() int32 {
	if o == nil || IsNil(o.MaxInstanceCount.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxInstanceCount.Get()
}

// GetMaxInstanceCountOk returns a tuple with the MaxInstanceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetMaxInstanceCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxInstanceCount.Get(), o.MaxInstanceCount.IsSet()
}

// HasMaxInstanceCount returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasMaxInstanceCount() bool {
	if o != nil && o.MaxInstanceCount.IsSet() {
		return true
	}

	return false
}

// SetMaxInstanceCount gets a reference to the given NullableInt32 and assigns it to the MaxInstanceCount field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetMaxInstanceCount(v int32) {
	o.MaxInstanceCount.Set(&v)
}
// SetMaxInstanceCountNil sets the value for MaxInstanceCount to be an explicit nil
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetMaxInstanceCountNil() {
	o.MaxInstanceCount.Set(nil)
}

// UnsetMaxInstanceCount ensures that no value is present for MaxInstanceCount, not even an explicit nil
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) UnsetMaxInstanceCount() {
	o.MaxInstanceCount.Unset()
}

// GetMinBitRate returns the MinBitRate field value if set, zero value otherwise.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetMinBitRate() MediaEncodingCodecsCommonTypesBitRate {
	if o == nil || IsNil(o.MinBitRate) {
		var ret MediaEncodingCodecsCommonTypesBitRate
		return ret
	}
	return *o.MinBitRate
}

// GetMinBitRateOk returns a tuple with the MinBitRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetMinBitRateOk() (*MediaEncodingCodecsCommonTypesBitRate, bool) {
	if o == nil || IsNil(o.MinBitRate) {
		return nil, false
	}
	return o.MinBitRate, true
}

// HasMinBitRate returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasMinBitRate() bool {
	if o != nil && !IsNil(o.MinBitRate) {
		return true
	}

	return false
}

// SetMinBitRate gets a reference to the given MediaEncodingCodecsCommonTypesBitRate and assigns it to the MinBitRate field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetMinBitRate(v MediaEncodingCodecsCommonTypesBitRate) {
	o.MinBitRate = &v
}

// GetMaxBitRate returns the MaxBitRate field value if set, zero value otherwise.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetMaxBitRate() MediaEncodingCodecsCommonTypesBitRate {
	if o == nil || IsNil(o.MaxBitRate) {
		var ret MediaEncodingCodecsCommonTypesBitRate
		return ret
	}
	return *o.MaxBitRate
}

// GetMaxBitRateOk returns a tuple with the MaxBitRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetMaxBitRateOk() (*MediaEncodingCodecsCommonTypesBitRate, bool) {
	if o == nil || IsNil(o.MaxBitRate) {
		return nil, false
	}
	return o.MaxBitRate, true
}

// HasMaxBitRate returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasMaxBitRate() bool {
	if o != nil && !IsNil(o.MaxBitRate) {
		return true
	}

	return false
}

// SetMaxBitRate gets a reference to the given MediaEncodingCodecsCommonTypesBitRate and assigns it to the MaxBitRate field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetMaxBitRate(v MediaEncodingCodecsCommonTypesBitRate) {
	o.MaxBitRate = &v
}

// GetIsEnabledByDefault returns the IsEnabledByDefault field value if set, zero value otherwise.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetIsEnabledByDefault() bool {
	if o == nil || IsNil(o.IsEnabledByDefault) {
		var ret bool
		return ret
	}
	return *o.IsEnabledByDefault
}

// GetIsEnabledByDefaultOk returns a tuple with the IsEnabledByDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetIsEnabledByDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabledByDefault) {
		return nil, false
	}
	return o.IsEnabledByDefault, true
}

// HasIsEnabledByDefault returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasIsEnabledByDefault() bool {
	if o != nil && !IsNil(o.IsEnabledByDefault) {
		return true
	}

	return false
}

// SetIsEnabledByDefault gets a reference to the given bool and assigns it to the IsEnabledByDefault field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetIsEnabledByDefault(v bool) {
	o.IsEnabledByDefault = &v
}

// GetDefaultPriority returns the DefaultPriority field value if set, zero value otherwise.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetDefaultPriority() int32 {
	if o == nil || IsNil(o.DefaultPriority) {
		var ret int32
		return ret
	}
	return *o.DefaultPriority
}

// GetDefaultPriorityOk returns a tuple with the DefaultPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) GetDefaultPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.DefaultPriority) {
		return nil, false
	}
	return o.DefaultPriority, true
}

// HasDefaultPriority returns a boolean if a field has been set.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) HasDefaultPriority() bool {
	if o != nil && !IsNil(o.DefaultPriority) {
		return true
	}

	return false
}

// SetDefaultPriority gets a reference to the given int32 and assigns it to the DefaultPriority field.
func (o *MediaEncodingCodecsVideoCodecsVideoCodecBase) SetDefaultPriority(v int32) {
	o.DefaultPriority = &v
}

func (o MediaEncodingCodecsVideoCodecsVideoCodecBase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaEncodingCodecsVideoCodecsVideoCodecBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CodecKind) {
		toSerialize["CodecKind"] = o.CodecKind
	}
	if !IsNil(o.MediaTypeName) {
		toSerialize["MediaTypeName"] = o.MediaTypeName
	}
	if !IsNil(o.VideoMediaType) {
		toSerialize["VideoMediaType"] = o.VideoMediaType
	}
	if o.MinWidth.IsSet() {
		toSerialize["MinWidth"] = o.MinWidth.Get()
	}
	if o.MaxWidth.IsSet() {
		toSerialize["MaxWidth"] = o.MaxWidth.Get()
	}
	if o.MinHeight.IsSet() {
		toSerialize["MinHeight"] = o.MinHeight.Get()
	}
	if o.MaxHeight.IsSet() {
		toSerialize["MaxHeight"] = o.MaxHeight.Get()
	}
	if o.WidthAlignment.IsSet() {
		toSerialize["WidthAlignment"] = o.WidthAlignment.Get()
	}
	if o.HeightAlignment.IsSet() {
		toSerialize["HeightAlignment"] = o.HeightAlignment.Get()
	}
	if o.MinFrameRate.IsSet() {
		toSerialize["MinFrameRate"] = o.MinFrameRate.Get()
	}
	if o.MaxFrameRate.IsSet() {
		toSerialize["MaxFrameRate"] = o.MaxFrameRate.Get()
	}
	if !IsNil(o.SupportedColorFormats) {
		toSerialize["SupportedColorFormats"] = o.SupportedColorFormats
	}
	if !IsNil(o.SupportedColorFormatStrings) {
		toSerialize["SupportedColorFormatStrings"] = o.SupportedColorFormatStrings
	}
	if !IsNil(o.ProfileAndLevelInformation) {
		toSerialize["ProfileAndLevelInformation"] = o.ProfileAndLevelInformation
	}
	if !IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !IsNil(o.Direction) {
		toSerialize["Direction"] = o.Direction
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.FrameworkCodec) {
		toSerialize["FrameworkCodec"] = o.FrameworkCodec
	}
	if !IsNil(o.IsHardwareCodec) {
		toSerialize["IsHardwareCodec"] = o.IsHardwareCodec
	}
	if !IsNil(o.SecondaryFramework) {
		toSerialize["SecondaryFramework"] = o.SecondaryFramework
	}
	if !IsNil(o.SecondaryFrameworkCodec) {
		toSerialize["SecondaryFrameworkCodec"] = o.SecondaryFrameworkCodec
	}
	if o.MaxInstanceCount.IsSet() {
		toSerialize["MaxInstanceCount"] = o.MaxInstanceCount.Get()
	}
	if !IsNil(o.MinBitRate) {
		toSerialize["MinBitRate"] = o.MinBitRate
	}
	if !IsNil(o.MaxBitRate) {
		toSerialize["MaxBitRate"] = o.MaxBitRate
	}
	if !IsNil(o.IsEnabledByDefault) {
		toSerialize["IsEnabledByDefault"] = o.IsEnabledByDefault
	}
	if !IsNil(o.DefaultPriority) {
		toSerialize["DefaultPriority"] = o.DefaultPriority
	}
	return toSerialize, nil
}

type NullableMediaEncodingCodecsVideoCodecsVideoCodecBase struct {
	value *MediaEncodingCodecsVideoCodecsVideoCodecBase
	isSet bool
}

func (v NullableMediaEncodingCodecsVideoCodecsVideoCodecBase) Get() *MediaEncodingCodecsVideoCodecsVideoCodecBase {
	return v.value
}

func (v *NullableMediaEncodingCodecsVideoCodecsVideoCodecBase) Set(val *MediaEncodingCodecsVideoCodecsVideoCodecBase) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaEncodingCodecsVideoCodecsVideoCodecBase) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaEncodingCodecsVideoCodecsVideoCodecBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaEncodingCodecsVideoCodecsVideoCodecBase(val *MediaEncodingCodecsVideoCodecsVideoCodecBase) *NullableMediaEncodingCodecsVideoCodecsVideoCodecBase {
	return &NullableMediaEncodingCodecsVideoCodecsVideoCodecBase{value: val, isSet: true}
}

func (v NullableMediaEncodingCodecsVideoCodecsVideoCodecBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaEncodingCodecsVideoCodecsVideoCodecBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


