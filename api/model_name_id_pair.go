/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the NameIdPair type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NameIdPair{}

// NameIdPair struct for NameIdPair
type NameIdPair struct {
	Name *string `json:"Name,omitempty"`
	Id *string `json:"Id,omitempty"`
}

// NewNameIdPair instantiates a new NameIdPair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNameIdPair() *NameIdPair {
	this := NameIdPair{}
	return &this
}

// NewNameIdPairWithDefaults instantiates a new NameIdPair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNameIdPairWithDefaults() *NameIdPair {
	this := NameIdPair{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NameIdPair) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameIdPair) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NameIdPair) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NameIdPair) SetName(v string) {
	o.Name = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NameIdPair) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameIdPair) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NameIdPair) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NameIdPair) SetId(v string) {
	o.Id = &v
}

func (o NameIdPair) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NameIdPair) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	return toSerialize, nil
}

type NullableNameIdPair struct {
	value *NameIdPair
	isSet bool
}

func (v NullableNameIdPair) Get() *NameIdPair {
	return v.value
}

func (v *NullableNameIdPair) Set(val *NameIdPair) {
	v.value = val
	v.isSet = true
}

func (v NullableNameIdPair) IsSet() bool {
	return v.isSet
}

func (v *NullableNameIdPair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNameIdPair(val *NameIdPair) *NullableNameIdPair {
	return &NullableNameIdPair{value: val, isSet: true}
}

func (v NullableNameIdPair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNameIdPair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


