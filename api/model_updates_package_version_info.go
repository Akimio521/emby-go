/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the UpdatesPackageVersionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatesPackageVersionInfo{}

// UpdatesPackageVersionInfo struct for UpdatesPackageVersionInfo
type UpdatesPackageVersionInfo struct {
	Name *string `json:"name,omitempty"`
	Guid *string `json:"guid,omitempty"`
	VersionStr *string `json:"versionStr,omitempty"`
	Classification *string `json:"classification,omitempty"`
	Description *string `json:"description,omitempty"`
	RequiredVersionStr *string `json:"requiredVersionStr,omitempty"`
	SourceUrl *string `json:"sourceUrl,omitempty"`
	Checksum *string `json:"checksum,omitempty"`
	TargetFilename *string `json:"targetFilename,omitempty"`
	InfoUrl *string `json:"infoUrl,omitempty"`
	Runtimes *string `json:"runtimes,omitempty"`
}

// NewUpdatesPackageVersionInfo instantiates a new UpdatesPackageVersionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatesPackageVersionInfo() *UpdatesPackageVersionInfo {
	this := UpdatesPackageVersionInfo{}
	return &this
}

// NewUpdatesPackageVersionInfoWithDefaults instantiates a new UpdatesPackageVersionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatesPackageVersionInfoWithDefaults() *UpdatesPackageVersionInfo {
	this := UpdatesPackageVersionInfo{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdatesPackageVersionInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageVersionInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdatesPackageVersionInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdatesPackageVersionInfo) SetName(v string) {
	o.Name = &v
}

// GetGuid returns the Guid field value if set, zero value otherwise.
func (o *UpdatesPackageVersionInfo) GetGuid() string {
	if o == nil || IsNil(o.Guid) {
		var ret string
		return ret
	}
	return *o.Guid
}

// GetGuidOk returns a tuple with the Guid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageVersionInfo) GetGuidOk() (*string, bool) {
	if o == nil || IsNil(o.Guid) {
		return nil, false
	}
	return o.Guid, true
}

// HasGuid returns a boolean if a field has been set.
func (o *UpdatesPackageVersionInfo) HasGuid() bool {
	if o != nil && !IsNil(o.Guid) {
		return true
	}

	return false
}

// SetGuid gets a reference to the given string and assigns it to the Guid field.
func (o *UpdatesPackageVersionInfo) SetGuid(v string) {
	o.Guid = &v
}

// GetVersionStr returns the VersionStr field value if set, zero value otherwise.
func (o *UpdatesPackageVersionInfo) GetVersionStr() string {
	if o == nil || IsNil(o.VersionStr) {
		var ret string
		return ret
	}
	return *o.VersionStr
}

// GetVersionStrOk returns a tuple with the VersionStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageVersionInfo) GetVersionStrOk() (*string, bool) {
	if o == nil || IsNil(o.VersionStr) {
		return nil, false
	}
	return o.VersionStr, true
}

// HasVersionStr returns a boolean if a field has been set.
func (o *UpdatesPackageVersionInfo) HasVersionStr() bool {
	if o != nil && !IsNil(o.VersionStr) {
		return true
	}

	return false
}

// SetVersionStr gets a reference to the given string and assigns it to the VersionStr field.
func (o *UpdatesPackageVersionInfo) SetVersionStr(v string) {
	o.VersionStr = &v
}

// GetClassification returns the Classification field value if set, zero value otherwise.
func (o *UpdatesPackageVersionInfo) GetClassification() string {
	if o == nil || IsNil(o.Classification) {
		var ret string
		return ret
	}
	return *o.Classification
}

// GetClassificationOk returns a tuple with the Classification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageVersionInfo) GetClassificationOk() (*string, bool) {
	if o == nil || IsNil(o.Classification) {
		return nil, false
	}
	return o.Classification, true
}

// HasClassification returns a boolean if a field has been set.
func (o *UpdatesPackageVersionInfo) HasClassification() bool {
	if o != nil && !IsNil(o.Classification) {
		return true
	}

	return false
}

// SetClassification gets a reference to the given string and assigns it to the Classification field.
func (o *UpdatesPackageVersionInfo) SetClassification(v string) {
	o.Classification = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdatesPackageVersionInfo) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageVersionInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdatesPackageVersionInfo) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdatesPackageVersionInfo) SetDescription(v string) {
	o.Description = &v
}

// GetRequiredVersionStr returns the RequiredVersionStr field value if set, zero value otherwise.
func (o *UpdatesPackageVersionInfo) GetRequiredVersionStr() string {
	if o == nil || IsNil(o.RequiredVersionStr) {
		var ret string
		return ret
	}
	return *o.RequiredVersionStr
}

// GetRequiredVersionStrOk returns a tuple with the RequiredVersionStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageVersionInfo) GetRequiredVersionStrOk() (*string, bool) {
	if o == nil || IsNil(o.RequiredVersionStr) {
		return nil, false
	}
	return o.RequiredVersionStr, true
}

// HasRequiredVersionStr returns a boolean if a field has been set.
func (o *UpdatesPackageVersionInfo) HasRequiredVersionStr() bool {
	if o != nil && !IsNil(o.RequiredVersionStr) {
		return true
	}

	return false
}

// SetRequiredVersionStr gets a reference to the given string and assigns it to the RequiredVersionStr field.
func (o *UpdatesPackageVersionInfo) SetRequiredVersionStr(v string) {
	o.RequiredVersionStr = &v
}

// GetSourceUrl returns the SourceUrl field value if set, zero value otherwise.
func (o *UpdatesPackageVersionInfo) GetSourceUrl() string {
	if o == nil || IsNil(o.SourceUrl) {
		var ret string
		return ret
	}
	return *o.SourceUrl
}

// GetSourceUrlOk returns a tuple with the SourceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageVersionInfo) GetSourceUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SourceUrl) {
		return nil, false
	}
	return o.SourceUrl, true
}

// HasSourceUrl returns a boolean if a field has been set.
func (o *UpdatesPackageVersionInfo) HasSourceUrl() bool {
	if o != nil && !IsNil(o.SourceUrl) {
		return true
	}

	return false
}

// SetSourceUrl gets a reference to the given string and assigns it to the SourceUrl field.
func (o *UpdatesPackageVersionInfo) SetSourceUrl(v string) {
	o.SourceUrl = &v
}

// GetChecksum returns the Checksum field value if set, zero value otherwise.
func (o *UpdatesPackageVersionInfo) GetChecksum() string {
	if o == nil || IsNil(o.Checksum) {
		var ret string
		return ret
	}
	return *o.Checksum
}

// GetChecksumOk returns a tuple with the Checksum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageVersionInfo) GetChecksumOk() (*string, bool) {
	if o == nil || IsNil(o.Checksum) {
		return nil, false
	}
	return o.Checksum, true
}

// HasChecksum returns a boolean if a field has been set.
func (o *UpdatesPackageVersionInfo) HasChecksum() bool {
	if o != nil && !IsNil(o.Checksum) {
		return true
	}

	return false
}

// SetChecksum gets a reference to the given string and assigns it to the Checksum field.
func (o *UpdatesPackageVersionInfo) SetChecksum(v string) {
	o.Checksum = &v
}

// GetTargetFilename returns the TargetFilename field value if set, zero value otherwise.
func (o *UpdatesPackageVersionInfo) GetTargetFilename() string {
	if o == nil || IsNil(o.TargetFilename) {
		var ret string
		return ret
	}
	return *o.TargetFilename
}

// GetTargetFilenameOk returns a tuple with the TargetFilename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageVersionInfo) GetTargetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.TargetFilename) {
		return nil, false
	}
	return o.TargetFilename, true
}

// HasTargetFilename returns a boolean if a field has been set.
func (o *UpdatesPackageVersionInfo) HasTargetFilename() bool {
	if o != nil && !IsNil(o.TargetFilename) {
		return true
	}

	return false
}

// SetTargetFilename gets a reference to the given string and assigns it to the TargetFilename field.
func (o *UpdatesPackageVersionInfo) SetTargetFilename(v string) {
	o.TargetFilename = &v
}

// GetInfoUrl returns the InfoUrl field value if set, zero value otherwise.
func (o *UpdatesPackageVersionInfo) GetInfoUrl() string {
	if o == nil || IsNil(o.InfoUrl) {
		var ret string
		return ret
	}
	return *o.InfoUrl
}

// GetInfoUrlOk returns a tuple with the InfoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageVersionInfo) GetInfoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.InfoUrl) {
		return nil, false
	}
	return o.InfoUrl, true
}

// HasInfoUrl returns a boolean if a field has been set.
func (o *UpdatesPackageVersionInfo) HasInfoUrl() bool {
	if o != nil && !IsNil(o.InfoUrl) {
		return true
	}

	return false
}

// SetInfoUrl gets a reference to the given string and assigns it to the InfoUrl field.
func (o *UpdatesPackageVersionInfo) SetInfoUrl(v string) {
	o.InfoUrl = &v
}

// GetRuntimes returns the Runtimes field value if set, zero value otherwise.
func (o *UpdatesPackageVersionInfo) GetRuntimes() string {
	if o == nil || IsNil(o.Runtimes) {
		var ret string
		return ret
	}
	return *o.Runtimes
}

// GetRuntimesOk returns a tuple with the Runtimes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatesPackageVersionInfo) GetRuntimesOk() (*string, bool) {
	if o == nil || IsNil(o.Runtimes) {
		return nil, false
	}
	return o.Runtimes, true
}

// HasRuntimes returns a boolean if a field has been set.
func (o *UpdatesPackageVersionInfo) HasRuntimes() bool {
	if o != nil && !IsNil(o.Runtimes) {
		return true
	}

	return false
}

// SetRuntimes gets a reference to the given string and assigns it to the Runtimes field.
func (o *UpdatesPackageVersionInfo) SetRuntimes(v string) {
	o.Runtimes = &v
}

func (o UpdatesPackageVersionInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatesPackageVersionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Guid) {
		toSerialize["guid"] = o.Guid
	}
	if !IsNil(o.VersionStr) {
		toSerialize["versionStr"] = o.VersionStr
	}
	if !IsNil(o.Classification) {
		toSerialize["classification"] = o.Classification
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.RequiredVersionStr) {
		toSerialize["requiredVersionStr"] = o.RequiredVersionStr
	}
	if !IsNil(o.SourceUrl) {
		toSerialize["sourceUrl"] = o.SourceUrl
	}
	if !IsNil(o.Checksum) {
		toSerialize["checksum"] = o.Checksum
	}
	if !IsNil(o.TargetFilename) {
		toSerialize["targetFilename"] = o.TargetFilename
	}
	if !IsNil(o.InfoUrl) {
		toSerialize["infoUrl"] = o.InfoUrl
	}
	if !IsNil(o.Runtimes) {
		toSerialize["runtimes"] = o.Runtimes
	}
	return toSerialize, nil
}

type NullableUpdatesPackageVersionInfo struct {
	value *UpdatesPackageVersionInfo
	isSet bool
}

func (v NullableUpdatesPackageVersionInfo) Get() *UpdatesPackageVersionInfo {
	return v.value
}

func (v *NullableUpdatesPackageVersionInfo) Set(val *UpdatesPackageVersionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatesPackageVersionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatesPackageVersionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatesPackageVersionInfo(val *UpdatesPackageVersionInfo) *NullableUpdatesPackageVersionInfo {
	return &NullableUpdatesPackageVersionInfo{value: val, isSet: true}
}

func (v NullableUpdatesPackageVersionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatesPackageVersionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


