/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the DevicesLocalFileInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DevicesLocalFileInfo{}

// DevicesLocalFileInfo struct for DevicesLocalFileInfo
type DevicesLocalFileInfo struct {
	Name *string `json:"Name,omitempty"`
	Id *string `json:"Id,omitempty"`
	Album *string `json:"Album,omitempty"`
	MimeType *string `json:"MimeType,omitempty"`
}

// NewDevicesLocalFileInfo instantiates a new DevicesLocalFileInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevicesLocalFileInfo() *DevicesLocalFileInfo {
	this := DevicesLocalFileInfo{}
	return &this
}

// NewDevicesLocalFileInfoWithDefaults instantiates a new DevicesLocalFileInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevicesLocalFileInfoWithDefaults() *DevicesLocalFileInfo {
	this := DevicesLocalFileInfo{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DevicesLocalFileInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesLocalFileInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DevicesLocalFileInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DevicesLocalFileInfo) SetName(v string) {
	o.Name = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DevicesLocalFileInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesLocalFileInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DevicesLocalFileInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DevicesLocalFileInfo) SetId(v string) {
	o.Id = &v
}

// GetAlbum returns the Album field value if set, zero value otherwise.
func (o *DevicesLocalFileInfo) GetAlbum() string {
	if o == nil || IsNil(o.Album) {
		var ret string
		return ret
	}
	return *o.Album
}

// GetAlbumOk returns a tuple with the Album field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesLocalFileInfo) GetAlbumOk() (*string, bool) {
	if o == nil || IsNil(o.Album) {
		return nil, false
	}
	return o.Album, true
}

// HasAlbum returns a boolean if a field has been set.
func (o *DevicesLocalFileInfo) HasAlbum() bool {
	if o != nil && !IsNil(o.Album) {
		return true
	}

	return false
}

// SetAlbum gets a reference to the given string and assigns it to the Album field.
func (o *DevicesLocalFileInfo) SetAlbum(v string) {
	o.Album = &v
}

// GetMimeType returns the MimeType field value if set, zero value otherwise.
func (o *DevicesLocalFileInfo) GetMimeType() string {
	if o == nil || IsNil(o.MimeType) {
		var ret string
		return ret
	}
	return *o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesLocalFileInfo) GetMimeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MimeType) {
		return nil, false
	}
	return o.MimeType, true
}

// HasMimeType returns a boolean if a field has been set.
func (o *DevicesLocalFileInfo) HasMimeType() bool {
	if o != nil && !IsNil(o.MimeType) {
		return true
	}

	return false
}

// SetMimeType gets a reference to the given string and assigns it to the MimeType field.
func (o *DevicesLocalFileInfo) SetMimeType(v string) {
	o.MimeType = &v
}

func (o DevicesLocalFileInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DevicesLocalFileInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !IsNil(o.Album) {
		toSerialize["Album"] = o.Album
	}
	if !IsNil(o.MimeType) {
		toSerialize["MimeType"] = o.MimeType
	}
	return toSerialize, nil
}

type NullableDevicesLocalFileInfo struct {
	value *DevicesLocalFileInfo
	isSet bool
}

func (v NullableDevicesLocalFileInfo) Get() *DevicesLocalFileInfo {
	return v.value
}

func (v *NullableDevicesLocalFileInfo) Set(val *DevicesLocalFileInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDevicesLocalFileInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDevicesLocalFileInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevicesLocalFileInfo(val *DevicesLocalFileInfo) *NullableDevicesLocalFileInfo {
	return &NullableDevicesLocalFileInfo{value: val, isSet: true}
}

func (v NullableDevicesLocalFileInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevicesLocalFileInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


