/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the LibraryMediaUpdateInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LibraryMediaUpdateInfo{}

// LibraryMediaUpdateInfo struct for LibraryMediaUpdateInfo
type LibraryMediaUpdateInfo struct {
	Path *string `json:"Path,omitempty"`
	UpdateType *string `json:"UpdateType,omitempty"`
}

// NewLibraryMediaUpdateInfo instantiates a new LibraryMediaUpdateInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLibraryMediaUpdateInfo() *LibraryMediaUpdateInfo {
	this := LibraryMediaUpdateInfo{}
	return &this
}

// NewLibraryMediaUpdateInfoWithDefaults instantiates a new LibraryMediaUpdateInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLibraryMediaUpdateInfoWithDefaults() *LibraryMediaUpdateInfo {
	this := LibraryMediaUpdateInfo{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *LibraryMediaUpdateInfo) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LibraryMediaUpdateInfo) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *LibraryMediaUpdateInfo) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *LibraryMediaUpdateInfo) SetPath(v string) {
	o.Path = &v
}

// GetUpdateType returns the UpdateType field value if set, zero value otherwise.
func (o *LibraryMediaUpdateInfo) GetUpdateType() string {
	if o == nil || IsNil(o.UpdateType) {
		var ret string
		return ret
	}
	return *o.UpdateType
}

// GetUpdateTypeOk returns a tuple with the UpdateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LibraryMediaUpdateInfo) GetUpdateTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateType) {
		return nil, false
	}
	return o.UpdateType, true
}

// HasUpdateType returns a boolean if a field has been set.
func (o *LibraryMediaUpdateInfo) HasUpdateType() bool {
	if o != nil && !IsNil(o.UpdateType) {
		return true
	}

	return false
}

// SetUpdateType gets a reference to the given string and assigns it to the UpdateType field.
func (o *LibraryMediaUpdateInfo) SetUpdateType(v string) {
	o.UpdateType = &v
}

func (o LibraryMediaUpdateInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LibraryMediaUpdateInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Path) {
		toSerialize["Path"] = o.Path
	}
	if !IsNil(o.UpdateType) {
		toSerialize["UpdateType"] = o.UpdateType
	}
	return toSerialize, nil
}

type NullableLibraryMediaUpdateInfo struct {
	value *LibraryMediaUpdateInfo
	isSet bool
}

func (v NullableLibraryMediaUpdateInfo) Get() *LibraryMediaUpdateInfo {
	return v.value
}

func (v *NullableLibraryMediaUpdateInfo) Set(val *LibraryMediaUpdateInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableLibraryMediaUpdateInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableLibraryMediaUpdateInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLibraryMediaUpdateInfo(val *LibraryMediaUpdateInfo) *NullableLibraryMediaUpdateInfo {
	return &NullableLibraryMediaUpdateInfo{value: val, isSet: true}
}

func (v NullableLibraryMediaUpdateInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLibraryMediaUpdateInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


