/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the SessionSessionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SessionSessionInfo{}

// SessionSessionInfo struct for SessionSessionInfo
type SessionSessionInfo struct {
	PlayState *PlayerStateInfo `json:"PlayState,omitempty"`
	AdditionalUsers []SessionUserInfo `json:"AdditionalUsers,omitempty"`
	Capabilities *ClientCapabilities `json:"Capabilities,omitempty"`
	RemoteEndPoint *string `json:"RemoteEndPoint,omitempty"`
	PlayableMediaTypes []string `json:"PlayableMediaTypes,omitempty"`
	PlaylistItemId *string `json:"PlaylistItemId,omitempty"`
	Id *string `json:"Id,omitempty"`
	ServerId *string `json:"ServerId,omitempty"`
	UserId *string `json:"UserId,omitempty"`
	UserName *string `json:"UserName,omitempty"`
	UserPrimaryImageTag *string `json:"UserPrimaryImageTag,omitempty"`
	Client *string `json:"Client,omitempty"`
	LastActivityDate *time.Time `json:"LastActivityDate,omitempty"`
	DeviceName *string `json:"DeviceName,omitempty"`
	DeviceType *string `json:"DeviceType,omitempty"`
	NowPlayingItem *BaseItemDto `json:"NowPlayingItem,omitempty"`
	DeviceId *string `json:"DeviceId,omitempty"`
	ApplicationVersion *string `json:"ApplicationVersion,omitempty"`
	AppIconUrl *string `json:"AppIconUrl,omitempty"`
	SupportedCommands []string `json:"SupportedCommands,omitempty"`
	TranscodingInfo *TranscodingInfo `json:"TranscodingInfo,omitempty"`
	SupportsRemoteControl *bool `json:"SupportsRemoteControl,omitempty"`
}

// NewSessionSessionInfo instantiates a new SessionSessionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionSessionInfo() *SessionSessionInfo {
	this := SessionSessionInfo{}
	return &this
}

// NewSessionSessionInfoWithDefaults instantiates a new SessionSessionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionSessionInfoWithDefaults() *SessionSessionInfo {
	this := SessionSessionInfo{}
	return &this
}

// GetPlayState returns the PlayState field value if set, zero value otherwise.
func (o *SessionSessionInfo) GetPlayState() PlayerStateInfo {
	if o == nil || IsNil(o.PlayState) {
		var ret PlayerStateInfo
		return ret
	}
	return *o.PlayState
}

// GetPlayStateOk returns a tuple with the PlayState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionSessionInfo) GetPlayStateOk() (*PlayerStateInfo, bool) {
	if o == nil || IsNil(o.PlayState) {
		return nil, false
	}
	return o.PlayState, true
}

// HasPlayState returns a boolean if a field has been set.
func (o *SessionSessionInfo) HasPlayState() bool {
	if o != nil && !IsNil(o.PlayState) {
		return true
	}

	return false
}

// SetPlayState gets a reference to the given PlayerStateInfo and assigns it to the PlayState field.
func (o *SessionSessionInfo) SetPlayState(v PlayerStateInfo) {
	o.PlayState = &v
}

// GetAdditionalUsers returns the AdditionalUsers field value if set, zero value otherwise.
func (o *SessionSessionInfo) GetAdditionalUsers() []SessionUserInfo {
	if o == nil || IsNil(o.AdditionalUsers) {
		var ret []SessionUserInfo
		return ret
	}
	return o.AdditionalUsers
}

// GetAdditionalUsersOk returns a tuple with the AdditionalUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionSessionInfo) GetAdditionalUsersOk() ([]SessionUserInfo, bool) {
	if o == nil || IsNil(o.AdditionalUsers) {
		return nil, false
	}
	return o.AdditionalUsers, true
}

// HasAdditionalUsers returns a boolean if a field has been set.
func (o *SessionSessionInfo) HasAdditionalUsers() bool {
	if o != nil && !IsNil(o.AdditionalUsers) {
		return true
	}

	return false
}

// SetAdditionalUsers gets a reference to the given []SessionUserInfo and assigns it to the AdditionalUsers field.
func (o *SessionSessionInfo) SetAdditionalUsers(v []SessionUserInfo) {
	o.AdditionalUsers = v
}

// GetCapabilities returns the Capabilities field value if set, zero value otherwise.
func (o *SessionSessionInfo) GetCapabilities() ClientCapabilities {
	if o == nil || IsNil(o.Capabilities) {
		var ret ClientCapabilities
		return ret
	}
	return *o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionSessionInfo) GetCapabilitiesOk() (*ClientCapabilities, bool) {
	if o == nil || IsNil(o.Capabilities) {
		return nil, false
	}
	return o.Capabilities, true
}

// HasCapabilities returns a boolean if a field has been set.
func (o *SessionSessionInfo) HasCapabilities() bool {
	if o != nil && !IsNil(o.Capabilities) {
		return true
	}

	return false
}

// SetCapabilities gets a reference to the given ClientCapabilities and assigns it to the Capabilities field.
func (o *SessionSessionInfo) SetCapabilities(v ClientCapabilities) {
	o.Capabilities = &v
}

// GetRemoteEndPoint returns the RemoteEndPoint field value if set, zero value otherwise.
func (o *SessionSessionInfo) GetRemoteEndPoint() string {
	if o == nil || IsNil(o.RemoteEndPoint) {
		var ret string
		return ret
	}
	return *o.RemoteEndPoint
}

// GetRemoteEndPointOk returns a tuple with the RemoteEndPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionSessionInfo) GetRemoteEndPointOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteEndPoint) {
		return nil, false
	}
	return o.RemoteEndPoint, true
}

// HasRemoteEndPoint returns a boolean if a field has been set.
func (o *SessionSessionInfo) HasRemoteEndPoint() bool {
	if o != nil && !IsNil(o.RemoteEndPoint) {
		return true
	}

	return false
}

// SetRemoteEndPoint gets a reference to the given string and assigns it to the RemoteEndPoint field.
func (o *SessionSessionInfo) SetRemoteEndPoint(v string) {
	o.RemoteEndPoint = &v
}

// GetPlayableMediaTypes returns the PlayableMediaTypes field value if set, zero value otherwise.
func (o *SessionSessionInfo) GetPlayableMediaTypes() []string {
	if o == nil || IsNil(o.PlayableMediaTypes) {
		var ret []string
		return ret
	}
	return o.PlayableMediaTypes
}

// GetPlayableMediaTypesOk returns a tuple with the PlayableMediaTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionSessionInfo) GetPlayableMediaTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.PlayableMediaTypes) {
		return nil, false
	}
	return o.PlayableMediaTypes, true
}

// HasPlayableMediaTypes returns a boolean if a field has been set.
func (o *SessionSessionInfo) HasPlayableMediaTypes() bool {
	if o != nil && !IsNil(o.PlayableMediaTypes) {
		return true
	}

	return false
}

// SetPlayableMediaTypes gets a reference to the given []string and assigns it to the PlayableMediaTypes field.
func (o *SessionSessionInfo) SetPlayableMediaTypes(v []string) {
	o.PlayableMediaTypes = v
}

// GetPlaylistItemId returns the PlaylistItemId field value if set, zero value otherwise.
func (o *SessionSessionInfo) GetPlaylistItemId() string {
	if o == nil || IsNil(o.PlaylistItemId) {
		var ret string
		return ret
	}
	return *o.PlaylistItemId
}

// GetPlaylistItemIdOk returns a tuple with the PlaylistItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionSessionInfo) GetPlaylistItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.PlaylistItemId) {
		return nil, false
	}
	return o.PlaylistItemId, true
}

// HasPlaylistItemId returns a boolean if a field has been set.
func (o *SessionSessionInfo) HasPlaylistItemId() bool {
	if o != nil && !IsNil(o.PlaylistItemId) {
		return true
	}

	return false
}

// SetPlaylistItemId gets a reference to the given string and assigns it to the PlaylistItemId field.
func (o *SessionSessionInfo) SetPlaylistItemId(v string) {
	o.PlaylistItemId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SessionSessionInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionSessionInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SessionSessionInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SessionSessionInfo) SetId(v string) {
	o.Id = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *SessionSessionInfo) GetServerId() string {
	if o == nil || IsNil(o.ServerId) {
		var ret string
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionSessionInfo) GetServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServerId) {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *SessionSessionInfo) HasServerId() bool {
	if o != nil && !IsNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *SessionSessionInfo) SetServerId(v string) {
	o.ServerId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *SessionSessionInfo) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionSessionInfo) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *SessionSessionInfo) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *SessionSessionInfo) SetUserId(v string) {
	o.UserId = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *SessionSessionInfo) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionSessionInfo) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *SessionSessionInfo) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *SessionSessionInfo) SetUserName(v string) {
	o.UserName = &v
}

// GetUserPrimaryImageTag returns the UserPrimaryImageTag field value if set, zero value otherwise.
func (o *SessionSessionInfo) GetUserPrimaryImageTag() string {
	if o == nil || IsNil(o.UserPrimaryImageTag) {
		var ret string
		return ret
	}
	return *o.UserPrimaryImageTag
}

// GetUserPrimaryImageTagOk returns a tuple with the UserPrimaryImageTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionSessionInfo) GetUserPrimaryImageTagOk() (*string, bool) {
	if o == nil || IsNil(o.UserPrimaryImageTag) {
		return nil, false
	}
	return o.UserPrimaryImageTag, true
}

// HasUserPrimaryImageTag returns a boolean if a field has been set.
func (o *SessionSessionInfo) HasUserPrimaryImageTag() bool {
	if o != nil && !IsNil(o.UserPrimaryImageTag) {
		return true
	}

	return false
}

// SetUserPrimaryImageTag gets a reference to the given string and assigns it to the UserPrimaryImageTag field.
func (o *SessionSessionInfo) SetUserPrimaryImageTag(v string) {
	o.UserPrimaryImageTag = &v
}

// GetClient returns the Client field value if set, zero value otherwise.
func (o *SessionSessionInfo) GetClient() string {
	if o == nil || IsNil(o.Client) {
		var ret string
		return ret
	}
	return *o.Client
}

// GetClientOk returns a tuple with the Client field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionSessionInfo) GetClientOk() (*string, bool) {
	if o == nil || IsNil(o.Client) {
		return nil, false
	}
	return o.Client, true
}

// HasClient returns a boolean if a field has been set.
func (o *SessionSessionInfo) HasClient() bool {
	if o != nil && !IsNil(o.Client) {
		return true
	}

	return false
}

// SetClient gets a reference to the given string and assigns it to the Client field.
func (o *SessionSessionInfo) SetClient(v string) {
	o.Client = &v
}

// GetLastActivityDate returns the LastActivityDate field value if set, zero value otherwise.
func (o *SessionSessionInfo) GetLastActivityDate() time.Time {
	if o == nil || IsNil(o.LastActivityDate) {
		var ret time.Time
		return ret
	}
	return *o.LastActivityDate
}

// GetLastActivityDateOk returns a tuple with the LastActivityDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionSessionInfo) GetLastActivityDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastActivityDate) {
		return nil, false
	}
	return o.LastActivityDate, true
}

// HasLastActivityDate returns a boolean if a field has been set.
func (o *SessionSessionInfo) HasLastActivityDate() bool {
	if o != nil && !IsNil(o.LastActivityDate) {
		return true
	}

	return false
}

// SetLastActivityDate gets a reference to the given time.Time and assigns it to the LastActivityDate field.
func (o *SessionSessionInfo) SetLastActivityDate(v time.Time) {
	o.LastActivityDate = &v
}

// GetDeviceName returns the DeviceName field value if set, zero value otherwise.
func (o *SessionSessionInfo) GetDeviceName() string {
	if o == nil || IsNil(o.DeviceName) {
		var ret string
		return ret
	}
	return *o.DeviceName
}

// GetDeviceNameOk returns a tuple with the DeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionSessionInfo) GetDeviceNameOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceName) {
		return nil, false
	}
	return o.DeviceName, true
}

// HasDeviceName returns a boolean if a field has been set.
func (o *SessionSessionInfo) HasDeviceName() bool {
	if o != nil && !IsNil(o.DeviceName) {
		return true
	}

	return false
}

// SetDeviceName gets a reference to the given string and assigns it to the DeviceName field.
func (o *SessionSessionInfo) SetDeviceName(v string) {
	o.DeviceName = &v
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise.
func (o *SessionSessionInfo) GetDeviceType() string {
	if o == nil || IsNil(o.DeviceType) {
		var ret string
		return ret
	}
	return *o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionSessionInfo) GetDeviceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceType) {
		return nil, false
	}
	return o.DeviceType, true
}

// HasDeviceType returns a boolean if a field has been set.
func (o *SessionSessionInfo) HasDeviceType() bool {
	if o != nil && !IsNil(o.DeviceType) {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given string and assigns it to the DeviceType field.
func (o *SessionSessionInfo) SetDeviceType(v string) {
	o.DeviceType = &v
}

// GetNowPlayingItem returns the NowPlayingItem field value if set, zero value otherwise.
func (o *SessionSessionInfo) GetNowPlayingItem() BaseItemDto {
	if o == nil || IsNil(o.NowPlayingItem) {
		var ret BaseItemDto
		return ret
	}
	return *o.NowPlayingItem
}

// GetNowPlayingItemOk returns a tuple with the NowPlayingItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionSessionInfo) GetNowPlayingItemOk() (*BaseItemDto, bool) {
	if o == nil || IsNil(o.NowPlayingItem) {
		return nil, false
	}
	return o.NowPlayingItem, true
}

// HasNowPlayingItem returns a boolean if a field has been set.
func (o *SessionSessionInfo) HasNowPlayingItem() bool {
	if o != nil && !IsNil(o.NowPlayingItem) {
		return true
	}

	return false
}

// SetNowPlayingItem gets a reference to the given BaseItemDto and assigns it to the NowPlayingItem field.
func (o *SessionSessionInfo) SetNowPlayingItem(v BaseItemDto) {
	o.NowPlayingItem = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *SessionSessionInfo) GetDeviceId() string {
	if o == nil || IsNil(o.DeviceId) {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionSessionInfo) GetDeviceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *SessionSessionInfo) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *SessionSessionInfo) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetApplicationVersion returns the ApplicationVersion field value if set, zero value otherwise.
func (o *SessionSessionInfo) GetApplicationVersion() string {
	if o == nil || IsNil(o.ApplicationVersion) {
		var ret string
		return ret
	}
	return *o.ApplicationVersion
}

// GetApplicationVersionOk returns a tuple with the ApplicationVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionSessionInfo) GetApplicationVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ApplicationVersion) {
		return nil, false
	}
	return o.ApplicationVersion, true
}

// HasApplicationVersion returns a boolean if a field has been set.
func (o *SessionSessionInfo) HasApplicationVersion() bool {
	if o != nil && !IsNil(o.ApplicationVersion) {
		return true
	}

	return false
}

// SetApplicationVersion gets a reference to the given string and assigns it to the ApplicationVersion field.
func (o *SessionSessionInfo) SetApplicationVersion(v string) {
	o.ApplicationVersion = &v
}

// GetAppIconUrl returns the AppIconUrl field value if set, zero value otherwise.
func (o *SessionSessionInfo) GetAppIconUrl() string {
	if o == nil || IsNil(o.AppIconUrl) {
		var ret string
		return ret
	}
	return *o.AppIconUrl
}

// GetAppIconUrlOk returns a tuple with the AppIconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionSessionInfo) GetAppIconUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AppIconUrl) {
		return nil, false
	}
	return o.AppIconUrl, true
}

// HasAppIconUrl returns a boolean if a field has been set.
func (o *SessionSessionInfo) HasAppIconUrl() bool {
	if o != nil && !IsNil(o.AppIconUrl) {
		return true
	}

	return false
}

// SetAppIconUrl gets a reference to the given string and assigns it to the AppIconUrl field.
func (o *SessionSessionInfo) SetAppIconUrl(v string) {
	o.AppIconUrl = &v
}

// GetSupportedCommands returns the SupportedCommands field value if set, zero value otherwise.
func (o *SessionSessionInfo) GetSupportedCommands() []string {
	if o == nil || IsNil(o.SupportedCommands) {
		var ret []string
		return ret
	}
	return o.SupportedCommands
}

// GetSupportedCommandsOk returns a tuple with the SupportedCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionSessionInfo) GetSupportedCommandsOk() ([]string, bool) {
	if o == nil || IsNil(o.SupportedCommands) {
		return nil, false
	}
	return o.SupportedCommands, true
}

// HasSupportedCommands returns a boolean if a field has been set.
func (o *SessionSessionInfo) HasSupportedCommands() bool {
	if o != nil && !IsNil(o.SupportedCommands) {
		return true
	}

	return false
}

// SetSupportedCommands gets a reference to the given []string and assigns it to the SupportedCommands field.
func (o *SessionSessionInfo) SetSupportedCommands(v []string) {
	o.SupportedCommands = v
}

// GetTranscodingInfo returns the TranscodingInfo field value if set, zero value otherwise.
func (o *SessionSessionInfo) GetTranscodingInfo() TranscodingInfo {
	if o == nil || IsNil(o.TranscodingInfo) {
		var ret TranscodingInfo
		return ret
	}
	return *o.TranscodingInfo
}

// GetTranscodingInfoOk returns a tuple with the TranscodingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionSessionInfo) GetTranscodingInfoOk() (*TranscodingInfo, bool) {
	if o == nil || IsNil(o.TranscodingInfo) {
		return nil, false
	}
	return o.TranscodingInfo, true
}

// HasTranscodingInfo returns a boolean if a field has been set.
func (o *SessionSessionInfo) HasTranscodingInfo() bool {
	if o != nil && !IsNil(o.TranscodingInfo) {
		return true
	}

	return false
}

// SetTranscodingInfo gets a reference to the given TranscodingInfo and assigns it to the TranscodingInfo field.
func (o *SessionSessionInfo) SetTranscodingInfo(v TranscodingInfo) {
	o.TranscodingInfo = &v
}

// GetSupportsRemoteControl returns the SupportsRemoteControl field value if set, zero value otherwise.
func (o *SessionSessionInfo) GetSupportsRemoteControl() bool {
	if o == nil || IsNil(o.SupportsRemoteControl) {
		var ret bool
		return ret
	}
	return *o.SupportsRemoteControl
}

// GetSupportsRemoteControlOk returns a tuple with the SupportsRemoteControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionSessionInfo) GetSupportsRemoteControlOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsRemoteControl) {
		return nil, false
	}
	return o.SupportsRemoteControl, true
}

// HasSupportsRemoteControl returns a boolean if a field has been set.
func (o *SessionSessionInfo) HasSupportsRemoteControl() bool {
	if o != nil && !IsNil(o.SupportsRemoteControl) {
		return true
	}

	return false
}

// SetSupportsRemoteControl gets a reference to the given bool and assigns it to the SupportsRemoteControl field.
func (o *SessionSessionInfo) SetSupportsRemoteControl(v bool) {
	o.SupportsRemoteControl = &v
}

func (o SessionSessionInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SessionSessionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PlayState) {
		toSerialize["PlayState"] = o.PlayState
	}
	if !IsNil(o.AdditionalUsers) {
		toSerialize["AdditionalUsers"] = o.AdditionalUsers
	}
	if !IsNil(o.Capabilities) {
		toSerialize["Capabilities"] = o.Capabilities
	}
	if !IsNil(o.RemoteEndPoint) {
		toSerialize["RemoteEndPoint"] = o.RemoteEndPoint
	}
	if !IsNil(o.PlayableMediaTypes) {
		toSerialize["PlayableMediaTypes"] = o.PlayableMediaTypes
	}
	if !IsNil(o.PlaylistItemId) {
		toSerialize["PlaylistItemId"] = o.PlaylistItemId
	}
	if !IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !IsNil(o.ServerId) {
		toSerialize["ServerId"] = o.ServerId
	}
	if !IsNil(o.UserId) {
		toSerialize["UserId"] = o.UserId
	}
	if !IsNil(o.UserName) {
		toSerialize["UserName"] = o.UserName
	}
	if !IsNil(o.UserPrimaryImageTag) {
		toSerialize["UserPrimaryImageTag"] = o.UserPrimaryImageTag
	}
	if !IsNil(o.Client) {
		toSerialize["Client"] = o.Client
	}
	if !IsNil(o.LastActivityDate) {
		toSerialize["LastActivityDate"] = o.LastActivityDate
	}
	if !IsNil(o.DeviceName) {
		toSerialize["DeviceName"] = o.DeviceName
	}
	if !IsNil(o.DeviceType) {
		toSerialize["DeviceType"] = o.DeviceType
	}
	if !IsNil(o.NowPlayingItem) {
		toSerialize["NowPlayingItem"] = o.NowPlayingItem
	}
	if !IsNil(o.DeviceId) {
		toSerialize["DeviceId"] = o.DeviceId
	}
	if !IsNil(o.ApplicationVersion) {
		toSerialize["ApplicationVersion"] = o.ApplicationVersion
	}
	if !IsNil(o.AppIconUrl) {
		toSerialize["AppIconUrl"] = o.AppIconUrl
	}
	if !IsNil(o.SupportedCommands) {
		toSerialize["SupportedCommands"] = o.SupportedCommands
	}
	if !IsNil(o.TranscodingInfo) {
		toSerialize["TranscodingInfo"] = o.TranscodingInfo
	}
	if !IsNil(o.SupportsRemoteControl) {
		toSerialize["SupportsRemoteControl"] = o.SupportsRemoteControl
	}
	return toSerialize, nil
}

type NullableSessionSessionInfo struct {
	value *SessionSessionInfo
	isSet bool
}

func (v NullableSessionSessionInfo) Get() *SessionSessionInfo {
	return v.value
}

func (v *NullableSessionSessionInfo) Set(val *SessionSessionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionSessionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionSessionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionSessionInfo(val *SessionSessionInfo) *NullableSessionSessionInfo {
	return &NullableSessionSessionInfo{value: val, isSet: true}
}

func (v NullableSessionSessionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionSessionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


