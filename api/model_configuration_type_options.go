/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ConfigurationTypeOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigurationTypeOptions{}

// ConfigurationTypeOptions struct for ConfigurationTypeOptions
type ConfigurationTypeOptions struct {
	Type *string `json:"Type,omitempty"`
	MetadataFetchers []string `json:"MetadataFetchers,omitempty"`
	MetadataFetcherOrder []string `json:"MetadataFetcherOrder,omitempty"`
	ImageFetchers []string `json:"ImageFetchers,omitempty"`
	ImageFetcherOrder []string `json:"ImageFetcherOrder,omitempty"`
	ImageOptions []ConfigurationImageOption `json:"ImageOptions,omitempty"`
}

// NewConfigurationTypeOptions instantiates a new ConfigurationTypeOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationTypeOptions() *ConfigurationTypeOptions {
	this := ConfigurationTypeOptions{}
	return &this
}

// NewConfigurationTypeOptionsWithDefaults instantiates a new ConfigurationTypeOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationTypeOptionsWithDefaults() *ConfigurationTypeOptions {
	this := ConfigurationTypeOptions{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConfigurationTypeOptions) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationTypeOptions) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConfigurationTypeOptions) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ConfigurationTypeOptions) SetType(v string) {
	o.Type = &v
}

// GetMetadataFetchers returns the MetadataFetchers field value if set, zero value otherwise.
func (o *ConfigurationTypeOptions) GetMetadataFetchers() []string {
	if o == nil || IsNil(o.MetadataFetchers) {
		var ret []string
		return ret
	}
	return o.MetadataFetchers
}

// GetMetadataFetchersOk returns a tuple with the MetadataFetchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationTypeOptions) GetMetadataFetchersOk() ([]string, bool) {
	if o == nil || IsNil(o.MetadataFetchers) {
		return nil, false
	}
	return o.MetadataFetchers, true
}

// HasMetadataFetchers returns a boolean if a field has been set.
func (o *ConfigurationTypeOptions) HasMetadataFetchers() bool {
	if o != nil && !IsNil(o.MetadataFetchers) {
		return true
	}

	return false
}

// SetMetadataFetchers gets a reference to the given []string and assigns it to the MetadataFetchers field.
func (o *ConfigurationTypeOptions) SetMetadataFetchers(v []string) {
	o.MetadataFetchers = v
}

// GetMetadataFetcherOrder returns the MetadataFetcherOrder field value if set, zero value otherwise.
func (o *ConfigurationTypeOptions) GetMetadataFetcherOrder() []string {
	if o == nil || IsNil(o.MetadataFetcherOrder) {
		var ret []string
		return ret
	}
	return o.MetadataFetcherOrder
}

// GetMetadataFetcherOrderOk returns a tuple with the MetadataFetcherOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationTypeOptions) GetMetadataFetcherOrderOk() ([]string, bool) {
	if o == nil || IsNil(o.MetadataFetcherOrder) {
		return nil, false
	}
	return o.MetadataFetcherOrder, true
}

// HasMetadataFetcherOrder returns a boolean if a field has been set.
func (o *ConfigurationTypeOptions) HasMetadataFetcherOrder() bool {
	if o != nil && !IsNil(o.MetadataFetcherOrder) {
		return true
	}

	return false
}

// SetMetadataFetcherOrder gets a reference to the given []string and assigns it to the MetadataFetcherOrder field.
func (o *ConfigurationTypeOptions) SetMetadataFetcherOrder(v []string) {
	o.MetadataFetcherOrder = v
}

// GetImageFetchers returns the ImageFetchers field value if set, zero value otherwise.
func (o *ConfigurationTypeOptions) GetImageFetchers() []string {
	if o == nil || IsNil(o.ImageFetchers) {
		var ret []string
		return ret
	}
	return o.ImageFetchers
}

// GetImageFetchersOk returns a tuple with the ImageFetchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationTypeOptions) GetImageFetchersOk() ([]string, bool) {
	if o == nil || IsNil(o.ImageFetchers) {
		return nil, false
	}
	return o.ImageFetchers, true
}

// HasImageFetchers returns a boolean if a field has been set.
func (o *ConfigurationTypeOptions) HasImageFetchers() bool {
	if o != nil && !IsNil(o.ImageFetchers) {
		return true
	}

	return false
}

// SetImageFetchers gets a reference to the given []string and assigns it to the ImageFetchers field.
func (o *ConfigurationTypeOptions) SetImageFetchers(v []string) {
	o.ImageFetchers = v
}

// GetImageFetcherOrder returns the ImageFetcherOrder field value if set, zero value otherwise.
func (o *ConfigurationTypeOptions) GetImageFetcherOrder() []string {
	if o == nil || IsNil(o.ImageFetcherOrder) {
		var ret []string
		return ret
	}
	return o.ImageFetcherOrder
}

// GetImageFetcherOrderOk returns a tuple with the ImageFetcherOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationTypeOptions) GetImageFetcherOrderOk() ([]string, bool) {
	if o == nil || IsNil(o.ImageFetcherOrder) {
		return nil, false
	}
	return o.ImageFetcherOrder, true
}

// HasImageFetcherOrder returns a boolean if a field has been set.
func (o *ConfigurationTypeOptions) HasImageFetcherOrder() bool {
	if o != nil && !IsNil(o.ImageFetcherOrder) {
		return true
	}

	return false
}

// SetImageFetcherOrder gets a reference to the given []string and assigns it to the ImageFetcherOrder field.
func (o *ConfigurationTypeOptions) SetImageFetcherOrder(v []string) {
	o.ImageFetcherOrder = v
}

// GetImageOptions returns the ImageOptions field value if set, zero value otherwise.
func (o *ConfigurationTypeOptions) GetImageOptions() []ConfigurationImageOption {
	if o == nil || IsNil(o.ImageOptions) {
		var ret []ConfigurationImageOption
		return ret
	}
	return o.ImageOptions
}

// GetImageOptionsOk returns a tuple with the ImageOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationTypeOptions) GetImageOptionsOk() ([]ConfigurationImageOption, bool) {
	if o == nil || IsNil(o.ImageOptions) {
		return nil, false
	}
	return o.ImageOptions, true
}

// HasImageOptions returns a boolean if a field has been set.
func (o *ConfigurationTypeOptions) HasImageOptions() bool {
	if o != nil && !IsNil(o.ImageOptions) {
		return true
	}

	return false
}

// SetImageOptions gets a reference to the given []ConfigurationImageOption and assigns it to the ImageOptions field.
func (o *ConfigurationTypeOptions) SetImageOptions(v []ConfigurationImageOption) {
	o.ImageOptions = v
}

func (o ConfigurationTypeOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigurationTypeOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !IsNil(o.MetadataFetchers) {
		toSerialize["MetadataFetchers"] = o.MetadataFetchers
	}
	if !IsNil(o.MetadataFetcherOrder) {
		toSerialize["MetadataFetcherOrder"] = o.MetadataFetcherOrder
	}
	if !IsNil(o.ImageFetchers) {
		toSerialize["ImageFetchers"] = o.ImageFetchers
	}
	if !IsNil(o.ImageFetcherOrder) {
		toSerialize["ImageFetcherOrder"] = o.ImageFetcherOrder
	}
	if !IsNil(o.ImageOptions) {
		toSerialize["ImageOptions"] = o.ImageOptions
	}
	return toSerialize, nil
}

type NullableConfigurationTypeOptions struct {
	value *ConfigurationTypeOptions
	isSet bool
}

func (v NullableConfigurationTypeOptions) Get() *ConfigurationTypeOptions {
	return v.value
}

func (v *NullableConfigurationTypeOptions) Set(val *ConfigurationTypeOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationTypeOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationTypeOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationTypeOptions(val *ConfigurationTypeOptions) *NullableConfigurationTypeOptions {
	return &NullableConfigurationTypeOptions{value: val, isSet: true}
}

func (v NullableConfigurationTypeOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationTypeOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


