/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type MediaInfoServiceAPI interface {

	/*
	GetItemsByIdPlaybackinfo Gets live playback media info for an item

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Item Id
	@return ApiGetItemsByIdPlaybackinfoRequest
	*/
	GetItemsByIdPlaybackinfo(ctx context.Context, id string) ApiGetItemsByIdPlaybackinfoRequest

	// GetItemsByIdPlaybackinfoExecute executes the request
	//  @return MediaInfoPlaybackInfoResponse
	GetItemsByIdPlaybackinfoExecute(r ApiGetItemsByIdPlaybackinfoRequest) (*MediaInfoPlaybackInfoResponse, *http.Response, error)

	/*
	GetPlaybackBitratetest Method for GetPlaybackBitratetest

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetPlaybackBitratetestRequest
	*/
	GetPlaybackBitratetest(ctx context.Context) ApiGetPlaybackBitratetestRequest

	// GetPlaybackBitratetestExecute executes the request
	GetPlaybackBitratetestExecute(r ApiGetPlaybackBitratetestRequest) (*http.Response, error)

	/*
	PostItemsByIdPlaybackinfo Gets live playback media info for an item

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiPostItemsByIdPlaybackinfoRequest
	*/
	PostItemsByIdPlaybackinfo(ctx context.Context, id string) ApiPostItemsByIdPlaybackinfoRequest

	// PostItemsByIdPlaybackinfoExecute executes the request
	//  @return MediaInfoPlaybackInfoResponse
	PostItemsByIdPlaybackinfoExecute(r ApiPostItemsByIdPlaybackinfoRequest) (*MediaInfoPlaybackInfoResponse, *http.Response, error)

	/*
	PostLivestreamsClose Closes a media source

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostLivestreamsCloseRequest
	*/
	PostLivestreamsClose(ctx context.Context) ApiPostLivestreamsCloseRequest

	// PostLivestreamsCloseExecute executes the request
	PostLivestreamsCloseExecute(r ApiPostLivestreamsCloseRequest) (*http.Response, error)

	/*
	PostLivestreamsMediainfo Closes a media source

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostLivestreamsMediainfoRequest
	*/
	PostLivestreamsMediainfo(ctx context.Context) ApiPostLivestreamsMediainfoRequest

	// PostLivestreamsMediainfoExecute executes the request
	PostLivestreamsMediainfoExecute(r ApiPostLivestreamsMediainfoRequest) (*http.Response, error)

	/*
	PostLivestreamsOpen Opens a media source

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostLivestreamsOpenRequest
	*/
	PostLivestreamsOpen(ctx context.Context) ApiPostLivestreamsOpenRequest

	// PostLivestreamsOpenExecute executes the request
	//  @return MediaInfoLiveStreamResponse
	PostLivestreamsOpenExecute(r ApiPostLivestreamsOpenRequest) (*MediaInfoLiveStreamResponse, *http.Response, error)
}

// MediaInfoServiceAPIService MediaInfoServiceAPI service
type MediaInfoServiceAPIService service

type ApiGetItemsByIdPlaybackinfoRequest struct {
	ctx context.Context
	ApiService MediaInfoServiceAPI
	id string
	userId *string
}

// User Id
func (r ApiGetItemsByIdPlaybackinfoRequest) UserId(userId string) ApiGetItemsByIdPlaybackinfoRequest {
	r.userId = &userId
	return r
}

func (r ApiGetItemsByIdPlaybackinfoRequest) Execute() (*MediaInfoPlaybackInfoResponse, *http.Response, error) {
	return r.ApiService.GetItemsByIdPlaybackinfoExecute(r)
}

/*
GetItemsByIdPlaybackinfo Gets live playback media info for an item

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return ApiGetItemsByIdPlaybackinfoRequest
*/
func (a *MediaInfoServiceAPIService) GetItemsByIdPlaybackinfo(ctx context.Context, id string) ApiGetItemsByIdPlaybackinfoRequest {
	return ApiGetItemsByIdPlaybackinfoRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return MediaInfoPlaybackInfoResponse
func (a *MediaInfoServiceAPIService) GetItemsByIdPlaybackinfoExecute(r ApiGetItemsByIdPlaybackinfoRequest) (*MediaInfoPlaybackInfoResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MediaInfoPlaybackInfoResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MediaInfoServiceAPIService.GetItemsByIdPlaybackinfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/PlaybackInfo"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPlaybackBitratetestRequest struct {
	ctx context.Context
	ApiService MediaInfoServiceAPI
	size *int64
}

// Size
func (r ApiGetPlaybackBitratetestRequest) Size(size int64) ApiGetPlaybackBitratetestRequest {
	r.size = &size
	return r
}

func (r ApiGetPlaybackBitratetestRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetPlaybackBitratetestExecute(r)
}

/*
GetPlaybackBitratetest Method for GetPlaybackBitratetest

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetPlaybackBitratetestRequest
*/
func (a *MediaInfoServiceAPIService) GetPlaybackBitratetest(ctx context.Context) ApiGetPlaybackBitratetestRequest {
	return ApiGetPlaybackBitratetestRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MediaInfoServiceAPIService) GetPlaybackBitratetestExecute(r ApiGetPlaybackBitratetestRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MediaInfoServiceAPIService.GetPlaybackBitratetest")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Playback/BitrateTest"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.size == nil {
		return nil, reportError("size is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Size", r.size, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostItemsByIdPlaybackinfoRequest struct {
	ctx context.Context
	ApiService MediaInfoServiceAPI
	id string
	mediaInfoPlaybackInfoRequest *MediaInfoPlaybackInfoRequest
}

// PlaybackInfoRequest: 
func (r ApiPostItemsByIdPlaybackinfoRequest) MediaInfoPlaybackInfoRequest(mediaInfoPlaybackInfoRequest MediaInfoPlaybackInfoRequest) ApiPostItemsByIdPlaybackinfoRequest {
	r.mediaInfoPlaybackInfoRequest = &mediaInfoPlaybackInfoRequest
	return r
}

func (r ApiPostItemsByIdPlaybackinfoRequest) Execute() (*MediaInfoPlaybackInfoResponse, *http.Response, error) {
	return r.ApiService.PostItemsByIdPlaybackinfoExecute(r)
}

/*
PostItemsByIdPlaybackinfo Gets live playback media info for an item

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiPostItemsByIdPlaybackinfoRequest
*/
func (a *MediaInfoServiceAPIService) PostItemsByIdPlaybackinfo(ctx context.Context, id string) ApiPostItemsByIdPlaybackinfoRequest {
	return ApiPostItemsByIdPlaybackinfoRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return MediaInfoPlaybackInfoResponse
func (a *MediaInfoServiceAPIService) PostItemsByIdPlaybackinfoExecute(r ApiPostItemsByIdPlaybackinfoRequest) (*MediaInfoPlaybackInfoResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MediaInfoPlaybackInfoResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MediaInfoServiceAPIService.PostItemsByIdPlaybackinfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/PlaybackInfo"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.mediaInfoPlaybackInfoRequest == nil {
		return localVarReturnValue, nil, reportError("mediaInfoPlaybackInfoRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.mediaInfoPlaybackInfoRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostLivestreamsCloseRequest struct {
	ctx context.Context
	ApiService MediaInfoServiceAPI
	liveStreamId *string
}

// LiveStreamId
func (r ApiPostLivestreamsCloseRequest) LiveStreamId(liveStreamId string) ApiPostLivestreamsCloseRequest {
	r.liveStreamId = &liveStreamId
	return r
}

func (r ApiPostLivestreamsCloseRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostLivestreamsCloseExecute(r)
}

/*
PostLivestreamsClose Closes a media source

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostLivestreamsCloseRequest
*/
func (a *MediaInfoServiceAPIService) PostLivestreamsClose(ctx context.Context) ApiPostLivestreamsCloseRequest {
	return ApiPostLivestreamsCloseRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MediaInfoServiceAPIService) PostLivestreamsCloseExecute(r ApiPostLivestreamsCloseRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MediaInfoServiceAPIService.PostLivestreamsClose")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/LiveStreams/Close"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.liveStreamId == nil {
		return nil, reportError("liveStreamId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "LiveStreamId", r.liveStreamId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostLivestreamsMediainfoRequest struct {
	ctx context.Context
	ApiService MediaInfoServiceAPI
	liveStreamId *string
}

// LiveStreamId
func (r ApiPostLivestreamsMediainfoRequest) LiveStreamId(liveStreamId string) ApiPostLivestreamsMediainfoRequest {
	r.liveStreamId = &liveStreamId
	return r
}

func (r ApiPostLivestreamsMediainfoRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostLivestreamsMediainfoExecute(r)
}

/*
PostLivestreamsMediainfo Closes a media source

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostLivestreamsMediainfoRequest
*/
func (a *MediaInfoServiceAPIService) PostLivestreamsMediainfo(ctx context.Context) ApiPostLivestreamsMediainfoRequest {
	return ApiPostLivestreamsMediainfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MediaInfoServiceAPIService) PostLivestreamsMediainfoExecute(r ApiPostLivestreamsMediainfoRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MediaInfoServiceAPIService.PostLivestreamsMediainfo")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/LiveStreams/MediaInfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.liveStreamId == nil {
		return nil, reportError("liveStreamId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "LiveStreamId", r.liveStreamId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostLivestreamsOpenRequest struct {
	ctx context.Context
	ApiService MediaInfoServiceAPI
	mediaInfoLiveStreamRequest *MediaInfoLiveStreamRequest
}

// LiveStreamRequest: 
func (r ApiPostLivestreamsOpenRequest) MediaInfoLiveStreamRequest(mediaInfoLiveStreamRequest MediaInfoLiveStreamRequest) ApiPostLivestreamsOpenRequest {
	r.mediaInfoLiveStreamRequest = &mediaInfoLiveStreamRequest
	return r
}

func (r ApiPostLivestreamsOpenRequest) Execute() (*MediaInfoLiveStreamResponse, *http.Response, error) {
	return r.ApiService.PostLivestreamsOpenExecute(r)
}

/*
PostLivestreamsOpen Opens a media source

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostLivestreamsOpenRequest
*/
func (a *MediaInfoServiceAPIService) PostLivestreamsOpen(ctx context.Context) ApiPostLivestreamsOpenRequest {
	return ApiPostLivestreamsOpenRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MediaInfoLiveStreamResponse
func (a *MediaInfoServiceAPIService) PostLivestreamsOpenExecute(r ApiPostLivestreamsOpenRequest) (*MediaInfoLiveStreamResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MediaInfoLiveStreamResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MediaInfoServiceAPIService.PostLivestreamsOpen")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/LiveStreams/Open"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.mediaInfoLiveStreamRequest == nil {
		return localVarReturnValue, nil, reportError("mediaInfoLiveStreamRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.mediaInfoLiveStreamRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
