/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type ReportsServiceAPI interface {

	/*
	GetReportsActivities Gets activities entries

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetReportsActivitiesRequest
	*/
	GetReportsActivities(ctx context.Context) ApiGetReportsActivitiesRequest

	// GetReportsActivitiesExecute executes the request
	//  @return EmbyReportsApiModelReportResult
	GetReportsActivitiesExecute(r ApiGetReportsActivitiesRequest) (*EmbyReportsApiModelReportResult, *http.Response, error)

	/*
	GetReportsHeaders Gets reports headers based on library items

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetReportsHeadersRequest
	*/
	GetReportsHeaders(ctx context.Context) ApiGetReportsHeadersRequest

	// GetReportsHeadersExecute executes the request
	//  @return []EmbyReportsApiModelReportHeader
	GetReportsHeadersExecute(r ApiGetReportsHeadersRequest) ([]EmbyReportsApiModelReportHeader, *http.Response, error)

	/*
	GetReportsItems Gets reports based on library items

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetReportsItemsRequest
	*/
	GetReportsItems(ctx context.Context) ApiGetReportsItemsRequest

	// GetReportsItemsExecute executes the request
	//  @return EmbyReportsApiModelReportResult
	GetReportsItemsExecute(r ApiGetReportsItemsRequest) (*EmbyReportsApiModelReportResult, *http.Response, error)

	/*
	GetReportsItemsDownload Downloads report

	No authentication required

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetReportsItemsDownloadRequest
	*/
	GetReportsItemsDownload(ctx context.Context) ApiGetReportsItemsDownloadRequest

	// GetReportsItemsDownloadExecute executes the request
	GetReportsItemsDownloadExecute(r ApiGetReportsItemsDownloadRequest) (*http.Response, error)
}

// ReportsServiceAPIService ReportsServiceAPI service
type ReportsServiceAPIService service

type ApiGetReportsActivitiesRequest struct {
	ctx context.Context
	ApiService ReportsServiceAPI
	reportView *string
	displayType *string
	hasQueryLimit *bool
	groupBy *string
	reportColumns *string
	startIndex *int32
	limit *int32
	includeItemTypes *string
}

// The report view. Values (ReportData, ReportActivities)
func (r ApiGetReportsActivitiesRequest) ReportView(reportView string) ApiGetReportsActivitiesRequest {
	r.reportView = &reportView
	return r
}

// The report display type. Values (None, Screen, Export, ScreenExport)
func (r ApiGetReportsActivitiesRequest) DisplayType(displayType string) ApiGetReportsActivitiesRequest {
	r.displayType = &displayType
	return r
}

// Optional. If specified, results will include all records.
func (r ApiGetReportsActivitiesRequest) HasQueryLimit(hasQueryLimit bool) ApiGetReportsActivitiesRequest {
	r.hasQueryLimit = &hasQueryLimit
	return r
}

// Optional. If specified, results will include grouped records.
func (r ApiGetReportsActivitiesRequest) GroupBy(groupBy string) ApiGetReportsActivitiesRequest {
	r.groupBy = &groupBy
	return r
}

// Optional. The columns to show.
func (r ApiGetReportsActivitiesRequest) ReportColumns(reportColumns string) ApiGetReportsActivitiesRequest {
	r.reportColumns = &reportColumns
	return r
}

// Optional. The record index to start at. All items with a lower index will be dropped from the results.
func (r ApiGetReportsActivitiesRequest) StartIndex(startIndex int32) ApiGetReportsActivitiesRequest {
	r.startIndex = &startIndex
	return r
}

// Optional. The maximum number of records to return
func (r ApiGetReportsActivitiesRequest) Limit(limit int32) ApiGetReportsActivitiesRequest {
	r.limit = &limit
	return r
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r ApiGetReportsActivitiesRequest) IncludeItemTypes(includeItemTypes string) ApiGetReportsActivitiesRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

func (r ApiGetReportsActivitiesRequest) Execute() (*EmbyReportsApiModelReportResult, *http.Response, error) {
	return r.ApiService.GetReportsActivitiesExecute(r)
}

/*
GetReportsActivities Gets activities entries

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetReportsActivitiesRequest
*/
func (a *ReportsServiceAPIService) GetReportsActivities(ctx context.Context) ApiGetReportsActivitiesRequest {
	return ApiGetReportsActivitiesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EmbyReportsApiModelReportResult
func (a *ReportsServiceAPIService) GetReportsActivitiesExecute(r ApiGetReportsActivitiesRequest) (*EmbyReportsApiModelReportResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmbyReportsApiModelReportResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsServiceAPIService.GetReportsActivities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Reports/Activities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.reportView == nil {
		return localVarReturnValue, nil, reportError("reportView is required and must be specified")
	}
	if r.displayType == nil {
		return localVarReturnValue, nil, reportError("displayType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "ReportView", r.reportView, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "DisplayType", r.displayType, "form", "")
	if r.hasQueryLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasQueryLimit", r.hasQueryLimit, "form", "")
	}
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "GroupBy", r.groupBy, "form", "")
	}
	if r.reportColumns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ReportColumns", r.reportColumns, "form", "")
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartIndex", r.startIndex, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "form", "")
	}
	if r.includeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeItemTypes", r.includeItemTypes, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetReportsHeadersRequest struct {
	ctx context.Context
	ApiService ReportsServiceAPI
	reportView *string
	displayType *string
	includeItemTypes *string
	reportColumns *string
}

// The report view. Values (ReportData, ReportActivities)
func (r ApiGetReportsHeadersRequest) ReportView(reportView string) ApiGetReportsHeadersRequest {
	r.reportView = &reportView
	return r
}

// The report display type. Values (None, Screen, Export, ScreenExport)
func (r ApiGetReportsHeadersRequest) DisplayType(displayType string) ApiGetReportsHeadersRequest {
	r.displayType = &displayType
	return r
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r ApiGetReportsHeadersRequest) IncludeItemTypes(includeItemTypes string) ApiGetReportsHeadersRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Optional. The columns to show.
func (r ApiGetReportsHeadersRequest) ReportColumns(reportColumns string) ApiGetReportsHeadersRequest {
	r.reportColumns = &reportColumns
	return r
}

func (r ApiGetReportsHeadersRequest) Execute() ([]EmbyReportsApiModelReportHeader, *http.Response, error) {
	return r.ApiService.GetReportsHeadersExecute(r)
}

/*
GetReportsHeaders Gets reports headers based on library items

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetReportsHeadersRequest
*/
func (a *ReportsServiceAPIService) GetReportsHeaders(ctx context.Context) ApiGetReportsHeadersRequest {
	return ApiGetReportsHeadersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []EmbyReportsApiModelReportHeader
func (a *ReportsServiceAPIService) GetReportsHeadersExecute(r ApiGetReportsHeadersRequest) ([]EmbyReportsApiModelReportHeader, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []EmbyReportsApiModelReportHeader
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsServiceAPIService.GetReportsHeaders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Reports/Headers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.reportView == nil {
		return localVarReturnValue, nil, reportError("reportView is required and must be specified")
	}
	if r.displayType == nil {
		return localVarReturnValue, nil, reportError("displayType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "ReportView", r.reportView, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "DisplayType", r.displayType, "form", "")
	if r.includeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeItemTypes", r.includeItemTypes, "form", "")
	}
	if r.reportColumns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ReportColumns", r.reportColumns, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetReportsItemsRequest struct {
	ctx context.Context
	ApiService ReportsServiceAPI
	reportView *string
	displayType *string
	maxOfficialRating *string
	hasThemeSong *bool
	hasThemeVideo *bool
	hasSubtitles *bool
	hasSpecialFeature *bool
	hasTrailer *bool
	adjacentTo *string
	minIndexNumber *int32
	minPlayers *int32
	maxPlayers *int32
	parentIndexNumber *int32
	hasParentalRating *bool
	isHD *bool
	locationTypes *string
	excludeLocationTypes *string
	isMissing *bool
	isUnaired *bool
	minCommunityRating *float64
	minCriticRating *float64
	airedDuringSeason *int32
	minPremiereDate *string
	minDateLastSaved *string
	minDateLastSavedForUser *string
	maxPremiereDate *string
	hasOverview *bool
	hasImdbId *bool
	hasTmdbId *bool
	hasTvdbId *bool
	excludeItemIds *string
	startIndex *int32
	limit *int32
	recursive *bool
	sortOrder *string
	parentId *string
	fields *string
	excludeItemTypes *string
	includeItemTypes *string
	filters *string
	isFavorite *bool
	isMovie *bool
	isSeries *bool
	isNews *bool
	isKids *bool
	isSports *bool
	mediaTypes *string
	imageTypes *string
	sortBy *string
	isPlayed *bool
	genres *string
	officialRatings *string
	tags *string
	years *string
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *string
	person *string
	personIds *string
	personTypes *string
	studios *string
	studioIds *string
	artists *string
	artistIds *string
	albums *string
	ids *string
	videoTypes *string
	containers *string
	userId *string
	minOfficialRating *string
	isLocked *bool
	isPlaceHolder *bool
	hasOfficialRating *bool
	collapseBoxSetItems *bool
	is3D *bool
	seriesStatus *string
	nameStartsWithOrGreater *string
	nameStartsWith *string
	nameLessThan *string
	hasQueryLimit *bool
	groupBy *string
	reportColumns *string
}

// The report view. Values (ReportData, ReportActivities)
func (r ApiGetReportsItemsRequest) ReportView(reportView string) ApiGetReportsItemsRequest {
	r.reportView = &reportView
	return r
}

// The report display type. Values (None, Screen, Export, ScreenExport)
func (r ApiGetReportsItemsRequest) DisplayType(displayType string) ApiGetReportsItemsRequest {
	r.displayType = &displayType
	return r
}

// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
func (r ApiGetReportsItemsRequest) MaxOfficialRating(maxOfficialRating string) ApiGetReportsItemsRequest {
	r.maxOfficialRating = &maxOfficialRating
	return r
}

// Optional filter by items with theme songs.
func (r ApiGetReportsItemsRequest) HasThemeSong(hasThemeSong bool) ApiGetReportsItemsRequest {
	r.hasThemeSong = &hasThemeSong
	return r
}

// Optional filter by items with theme videos.
func (r ApiGetReportsItemsRequest) HasThemeVideo(hasThemeVideo bool) ApiGetReportsItemsRequest {
	r.hasThemeVideo = &hasThemeVideo
	return r
}

// Optional filter by items with subtitles.
func (r ApiGetReportsItemsRequest) HasSubtitles(hasSubtitles bool) ApiGetReportsItemsRequest {
	r.hasSubtitles = &hasSubtitles
	return r
}

// Optional filter by items with special features.
func (r ApiGetReportsItemsRequest) HasSpecialFeature(hasSpecialFeature bool) ApiGetReportsItemsRequest {
	r.hasSpecialFeature = &hasSpecialFeature
	return r
}

// Optional filter by items with trailers.
func (r ApiGetReportsItemsRequest) HasTrailer(hasTrailer bool) ApiGetReportsItemsRequest {
	r.hasTrailer = &hasTrailer
	return r
}

// Optional. Return items that are siblings of a supplied item.
func (r ApiGetReportsItemsRequest) AdjacentTo(adjacentTo string) ApiGetReportsItemsRequest {
	r.adjacentTo = &adjacentTo
	return r
}

// Optional filter by minimum index number.
func (r ApiGetReportsItemsRequest) MinIndexNumber(minIndexNumber int32) ApiGetReportsItemsRequest {
	r.minIndexNumber = &minIndexNumber
	return r
}

// Optional filter by minimum number of game players.
func (r ApiGetReportsItemsRequest) MinPlayers(minPlayers int32) ApiGetReportsItemsRequest {
	r.minPlayers = &minPlayers
	return r
}

// Optional filter by maximum number of game players.
func (r ApiGetReportsItemsRequest) MaxPlayers(maxPlayers int32) ApiGetReportsItemsRequest {
	r.maxPlayers = &maxPlayers
	return r
}

// Optional filter by parent index number.
func (r ApiGetReportsItemsRequest) ParentIndexNumber(parentIndexNumber int32) ApiGetReportsItemsRequest {
	r.parentIndexNumber = &parentIndexNumber
	return r
}

// Optional filter by items that have or do not have a parental rating
func (r ApiGetReportsItemsRequest) HasParentalRating(hasParentalRating bool) ApiGetReportsItemsRequest {
	r.hasParentalRating = &hasParentalRating
	return r
}

// Optional filter by items that are HD or not.
func (r ApiGetReportsItemsRequest) IsHD(isHD bool) ApiGetReportsItemsRequest {
	r.isHD = &isHD
	return r
}

// Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
func (r ApiGetReportsItemsRequest) LocationTypes(locationTypes string) ApiGetReportsItemsRequest {
	r.locationTypes = &locationTypes
	return r
}

// Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
func (r ApiGetReportsItemsRequest) ExcludeLocationTypes(excludeLocationTypes string) ApiGetReportsItemsRequest {
	r.excludeLocationTypes = &excludeLocationTypes
	return r
}

// Optional filter by items that are missing episodes or not.
func (r ApiGetReportsItemsRequest) IsMissing(isMissing bool) ApiGetReportsItemsRequest {
	r.isMissing = &isMissing
	return r
}

// Optional filter by items that are unaired episodes or not.
func (r ApiGetReportsItemsRequest) IsUnaired(isUnaired bool) ApiGetReportsItemsRequest {
	r.isUnaired = &isUnaired
	return r
}

// Optional filter by minimum community rating.
func (r ApiGetReportsItemsRequest) MinCommunityRating(minCommunityRating float64) ApiGetReportsItemsRequest {
	r.minCommunityRating = &minCommunityRating
	return r
}

// Optional filter by minimum critic rating.
func (r ApiGetReportsItemsRequest) MinCriticRating(minCriticRating float64) ApiGetReportsItemsRequest {
	r.minCriticRating = &minCriticRating
	return r
}

// Gets all episodes that aired during a season, including specials.
func (r ApiGetReportsItemsRequest) AiredDuringSeason(airedDuringSeason int32) ApiGetReportsItemsRequest {
	r.airedDuringSeason = &airedDuringSeason
	return r
}

// Optional. The minimum premiere date. Format &#x3D; ISO
func (r ApiGetReportsItemsRequest) MinPremiereDate(minPremiereDate string) ApiGetReportsItemsRequest {
	r.minPremiereDate = &minPremiereDate
	return r
}

// Optional. The minimum premiere date. Format &#x3D; ISO
func (r ApiGetReportsItemsRequest) MinDateLastSaved(minDateLastSaved string) ApiGetReportsItemsRequest {
	r.minDateLastSaved = &minDateLastSaved
	return r
}

// Optional. The minimum premiere date. Format &#x3D; ISO
func (r ApiGetReportsItemsRequest) MinDateLastSavedForUser(minDateLastSavedForUser string) ApiGetReportsItemsRequest {
	r.minDateLastSavedForUser = &minDateLastSavedForUser
	return r
}

// Optional. The maximum premiere date. Format &#x3D; ISO
func (r ApiGetReportsItemsRequest) MaxPremiereDate(maxPremiereDate string) ApiGetReportsItemsRequest {
	r.maxPremiereDate = &maxPremiereDate
	return r
}

// Optional filter by items that have an overview or not.
func (r ApiGetReportsItemsRequest) HasOverview(hasOverview bool) ApiGetReportsItemsRequest {
	r.hasOverview = &hasOverview
	return r
}

// Optional filter by items that have an imdb id or not.
func (r ApiGetReportsItemsRequest) HasImdbId(hasImdbId bool) ApiGetReportsItemsRequest {
	r.hasImdbId = &hasImdbId
	return r
}

// Optional filter by items that have a tmdb id or not.
func (r ApiGetReportsItemsRequest) HasTmdbId(hasTmdbId bool) ApiGetReportsItemsRequest {
	r.hasTmdbId = &hasTmdbId
	return r
}

// Optional filter by items that have a tvdb id or not.
func (r ApiGetReportsItemsRequest) HasTvdbId(hasTvdbId bool) ApiGetReportsItemsRequest {
	r.hasTvdbId = &hasTvdbId
	return r
}

// Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
func (r ApiGetReportsItemsRequest) ExcludeItemIds(excludeItemIds string) ApiGetReportsItemsRequest {
	r.excludeItemIds = &excludeItemIds
	return r
}

// Optional. The record index to start at. All items with a lower index will be dropped from the results.
func (r ApiGetReportsItemsRequest) StartIndex(startIndex int32) ApiGetReportsItemsRequest {
	r.startIndex = &startIndex
	return r
}

// Optional. The maximum number of records to return
func (r ApiGetReportsItemsRequest) Limit(limit int32) ApiGetReportsItemsRequest {
	r.limit = &limit
	return r
}

// When searching within folders, this determines whether or not the search will be recursive. true/false
func (r ApiGetReportsItemsRequest) Recursive(recursive bool) ApiGetReportsItemsRequest {
	r.recursive = &recursive
	return r
}

// Sort Order - Ascending,Descending
func (r ApiGetReportsItemsRequest) SortOrder(sortOrder string) ApiGetReportsItemsRequest {
	r.sortOrder = &sortOrder
	return r
}

// Specify this to localize the search to a specific item or folder. Omit to use the root
func (r ApiGetReportsItemsRequest) ParentId(parentId string) ApiGetReportsItemsRequest {
	r.parentId = &parentId
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
func (r ApiGetReportsItemsRequest) Fields(fields string) ApiGetReportsItemsRequest {
	r.fields = &fields
	return r
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r ApiGetReportsItemsRequest) ExcludeItemTypes(excludeItemTypes string) ApiGetReportsItemsRequest {
	r.excludeItemTypes = &excludeItemTypes
	return r
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r ApiGetReportsItemsRequest) IncludeItemTypes(includeItemTypes string) ApiGetReportsItemsRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
func (r ApiGetReportsItemsRequest) Filters(filters string) ApiGetReportsItemsRequest {
	r.filters = &filters
	return r
}

// Optional filter by items that are marked as favorite, or not.
func (r ApiGetReportsItemsRequest) IsFavorite(isFavorite bool) ApiGetReportsItemsRequest {
	r.isFavorite = &isFavorite
	return r
}

// Optional filter for movies.
func (r ApiGetReportsItemsRequest) IsMovie(isMovie bool) ApiGetReportsItemsRequest {
	r.isMovie = &isMovie
	return r
}

// Optional filter for movies.
func (r ApiGetReportsItemsRequest) IsSeries(isSeries bool) ApiGetReportsItemsRequest {
	r.isSeries = &isSeries
	return r
}

// Optional filter for news.
func (r ApiGetReportsItemsRequest) IsNews(isNews bool) ApiGetReportsItemsRequest {
	r.isNews = &isNews
	return r
}

// Optional filter for kids.
func (r ApiGetReportsItemsRequest) IsKids(isKids bool) ApiGetReportsItemsRequest {
	r.isKids = &isKids
	return r
}

// Optional filter for sports.
func (r ApiGetReportsItemsRequest) IsSports(isSports bool) ApiGetReportsItemsRequest {
	r.isSports = &isSports
	return r
}

// Optional filter by MediaType. Allows multiple, comma delimited.
func (r ApiGetReportsItemsRequest) MediaTypes(mediaTypes string) ApiGetReportsItemsRequest {
	r.mediaTypes = &mediaTypes
	return r
}

// Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
func (r ApiGetReportsItemsRequest) ImageTypes(imageTypes string) ApiGetReportsItemsRequest {
	r.imageTypes = &imageTypes
	return r
}

// Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
func (r ApiGetReportsItemsRequest) SortBy(sortBy string) ApiGetReportsItemsRequest {
	r.sortBy = &sortBy
	return r
}

// Optional filter by items that are played, or not.
func (r ApiGetReportsItemsRequest) IsPlayed(isPlayed bool) ApiGetReportsItemsRequest {
	r.isPlayed = &isPlayed
	return r
}

// Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
func (r ApiGetReportsItemsRequest) Genres(genres string) ApiGetReportsItemsRequest {
	r.genres = &genres
	return r
}

// Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
func (r ApiGetReportsItemsRequest) OfficialRatings(officialRatings string) ApiGetReportsItemsRequest {
	r.officialRatings = &officialRatings
	return r
}

// Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
func (r ApiGetReportsItemsRequest) Tags(tags string) ApiGetReportsItemsRequest {
	r.tags = &tags
	return r
}

// Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
func (r ApiGetReportsItemsRequest) Years(years string) ApiGetReportsItemsRequest {
	r.years = &years
	return r
}

// Optional, include image information in output
func (r ApiGetReportsItemsRequest) EnableImages(enableImages bool) ApiGetReportsItemsRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, include user data
func (r ApiGetReportsItemsRequest) EnableUserData(enableUserData bool) ApiGetReportsItemsRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional, the max number of images to return, per image type
func (r ApiGetReportsItemsRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetReportsItemsRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetReportsItemsRequest) EnableImageTypes(enableImageTypes string) ApiGetReportsItemsRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional. If specified, results will be filtered to include only those containing the specified person.
func (r ApiGetReportsItemsRequest) Person(person string) ApiGetReportsItemsRequest {
	r.person = &person
	return r
}

// Optional. If specified, results will be filtered to include only those containing the specified person.
func (r ApiGetReportsItemsRequest) PersonIds(personIds string) ApiGetReportsItemsRequest {
	r.personIds = &personIds
	return r
}

// Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
func (r ApiGetReportsItemsRequest) PersonTypes(personTypes string) ApiGetReportsItemsRequest {
	r.personTypes = &personTypes
	return r
}

// Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
func (r ApiGetReportsItemsRequest) Studios(studios string) ApiGetReportsItemsRequest {
	r.studios = &studios
	return r
}

// Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
func (r ApiGetReportsItemsRequest) StudioIds(studioIds string) ApiGetReportsItemsRequest {
	r.studioIds = &studioIds
	return r
}

// Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
func (r ApiGetReportsItemsRequest) Artists(artists string) ApiGetReportsItemsRequest {
	r.artists = &artists
	return r
}

// Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
func (r ApiGetReportsItemsRequest) ArtistIds(artistIds string) ApiGetReportsItemsRequest {
	r.artistIds = &artistIds
	return r
}

// Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
func (r ApiGetReportsItemsRequest) Albums(albums string) ApiGetReportsItemsRequest {
	r.albums = &albums
	return r
}

// Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited.
func (r ApiGetReportsItemsRequest) Ids(ids string) ApiGetReportsItemsRequest {
	r.ids = &ids
	return r
}

// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
func (r ApiGetReportsItemsRequest) VideoTypes(videoTypes string) ApiGetReportsItemsRequest {
	r.videoTypes = &videoTypes
	return r
}

// Optional filter by Container. Allows multiple, comma delimeted.
func (r ApiGetReportsItemsRequest) Containers(containers string) ApiGetReportsItemsRequest {
	r.containers = &containers
	return r
}

// User Id
func (r ApiGetReportsItemsRequest) UserId(userId string) ApiGetReportsItemsRequest {
	r.userId = &userId
	return r
}

// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
func (r ApiGetReportsItemsRequest) MinOfficialRating(minOfficialRating string) ApiGetReportsItemsRequest {
	r.minOfficialRating = &minOfficialRating
	return r
}

// Optional filter by items that are locked.
func (r ApiGetReportsItemsRequest) IsLocked(isLocked bool) ApiGetReportsItemsRequest {
	r.isLocked = &isLocked
	return r
}

// Optional filter by items that are placeholders
func (r ApiGetReportsItemsRequest) IsPlaceHolder(isPlaceHolder bool) ApiGetReportsItemsRequest {
	r.isPlaceHolder = &isPlaceHolder
	return r
}

// Optional filter by items that have official ratings
func (r ApiGetReportsItemsRequest) HasOfficialRating(hasOfficialRating bool) ApiGetReportsItemsRequest {
	r.hasOfficialRating = &hasOfficialRating
	return r
}

// Whether or not to hide items behind their boxsets.
func (r ApiGetReportsItemsRequest) CollapseBoxSetItems(collapseBoxSetItems bool) ApiGetReportsItemsRequest {
	r.collapseBoxSetItems = &collapseBoxSetItems
	return r
}

// Optional filter by items that are 3D, or not.
func (r ApiGetReportsItemsRequest) Is3D(is3D bool) ApiGetReportsItemsRequest {
	r.is3D = &is3D
	return r
}

// Optional filter by Series Status. Allows multiple, comma delimeted.
func (r ApiGetReportsItemsRequest) SeriesStatus(seriesStatus string) ApiGetReportsItemsRequest {
	r.seriesStatus = &seriesStatus
	return r
}

// Optional filter by items whose name is sorted equally or greater than a given input string.
func (r ApiGetReportsItemsRequest) NameStartsWithOrGreater(nameStartsWithOrGreater string) ApiGetReportsItemsRequest {
	r.nameStartsWithOrGreater = &nameStartsWithOrGreater
	return r
}

// Optional filter by items whose name is sorted equally than a given input string.
func (r ApiGetReportsItemsRequest) NameStartsWith(nameStartsWith string) ApiGetReportsItemsRequest {
	r.nameStartsWith = &nameStartsWith
	return r
}

// Optional filter by items whose name is equally or lesser than a given input string.
func (r ApiGetReportsItemsRequest) NameLessThan(nameLessThan string) ApiGetReportsItemsRequest {
	r.nameLessThan = &nameLessThan
	return r
}

// Optional. If specified, results will include all records.
func (r ApiGetReportsItemsRequest) HasQueryLimit(hasQueryLimit bool) ApiGetReportsItemsRequest {
	r.hasQueryLimit = &hasQueryLimit
	return r
}

// Optional. If specified, results will include grouped records.
func (r ApiGetReportsItemsRequest) GroupBy(groupBy string) ApiGetReportsItemsRequest {
	r.groupBy = &groupBy
	return r
}

// Optional. The columns to show.
func (r ApiGetReportsItemsRequest) ReportColumns(reportColumns string) ApiGetReportsItemsRequest {
	r.reportColumns = &reportColumns
	return r
}

func (r ApiGetReportsItemsRequest) Execute() (*EmbyReportsApiModelReportResult, *http.Response, error) {
	return r.ApiService.GetReportsItemsExecute(r)
}

/*
GetReportsItems Gets reports based on library items

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetReportsItemsRequest
*/
func (a *ReportsServiceAPIService) GetReportsItems(ctx context.Context) ApiGetReportsItemsRequest {
	return ApiGetReportsItemsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EmbyReportsApiModelReportResult
func (a *ReportsServiceAPIService) GetReportsItemsExecute(r ApiGetReportsItemsRequest) (*EmbyReportsApiModelReportResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmbyReportsApiModelReportResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsServiceAPIService.GetReportsItems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Reports/Items"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.reportView == nil {
		return localVarReturnValue, nil, reportError("reportView is required and must be specified")
	}
	if r.displayType == nil {
		return localVarReturnValue, nil, reportError("displayType is required and must be specified")
	}

	if r.maxOfficialRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxOfficialRating", r.maxOfficialRating, "form", "")
	}
	if r.hasThemeSong != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasThemeSong", r.hasThemeSong, "form", "")
	}
	if r.hasThemeVideo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasThemeVideo", r.hasThemeVideo, "form", "")
	}
	if r.hasSubtitles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasSubtitles", r.hasSubtitles, "form", "")
	}
	if r.hasSpecialFeature != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasSpecialFeature", r.hasSpecialFeature, "form", "")
	}
	if r.hasTrailer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasTrailer", r.hasTrailer, "form", "")
	}
	if r.adjacentTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AdjacentTo", r.adjacentTo, "form", "")
	}
	if r.minIndexNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinIndexNumber", r.minIndexNumber, "form", "")
	}
	if r.minPlayers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinPlayers", r.minPlayers, "form", "")
	}
	if r.maxPlayers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxPlayers", r.maxPlayers, "form", "")
	}
	if r.parentIndexNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ParentIndexNumber", r.parentIndexNumber, "form", "")
	}
	if r.hasParentalRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasParentalRating", r.hasParentalRating, "form", "")
	}
	if r.isHD != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsHD", r.isHD, "form", "")
	}
	if r.locationTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "LocationTypes", r.locationTypes, "form", "")
	}
	if r.excludeLocationTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ExcludeLocationTypes", r.excludeLocationTypes, "form", "")
	}
	if r.isMissing != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsMissing", r.isMissing, "form", "")
	}
	if r.isUnaired != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsUnaired", r.isUnaired, "form", "")
	}
	if r.minCommunityRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinCommunityRating", r.minCommunityRating, "form", "")
	}
	if r.minCriticRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinCriticRating", r.minCriticRating, "form", "")
	}
	if r.airedDuringSeason != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AiredDuringSeason", r.airedDuringSeason, "form", "")
	}
	if r.minPremiereDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinPremiereDate", r.minPremiereDate, "form", "")
	}
	if r.minDateLastSaved != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinDateLastSaved", r.minDateLastSaved, "form", "")
	}
	if r.minDateLastSavedForUser != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinDateLastSavedForUser", r.minDateLastSavedForUser, "form", "")
	}
	if r.maxPremiereDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxPremiereDate", r.maxPremiereDate, "form", "")
	}
	if r.hasOverview != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasOverview", r.hasOverview, "form", "")
	}
	if r.hasImdbId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasImdbId", r.hasImdbId, "form", "")
	}
	if r.hasTmdbId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasTmdbId", r.hasTmdbId, "form", "")
	}
	if r.hasTvdbId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasTvdbId", r.hasTvdbId, "form", "")
	}
	if r.excludeItemIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ExcludeItemIds", r.excludeItemIds, "form", "")
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartIndex", r.startIndex, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "form", "")
	}
	if r.recursive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Recursive", r.recursive, "form", "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortOrder", r.sortOrder, "form", "")
	}
	if r.parentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ParentId", r.parentId, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "form", "")
	}
	if r.excludeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ExcludeItemTypes", r.excludeItemTypes, "form", "")
	}
	if r.includeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeItemTypes", r.includeItemTypes, "form", "")
	}
	if r.filters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Filters", r.filters, "form", "")
	}
	if r.isFavorite != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsFavorite", r.isFavorite, "form", "")
	}
	if r.isMovie != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsMovie", r.isMovie, "form", "")
	}
	if r.isSeries != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsSeries", r.isSeries, "form", "")
	}
	if r.isNews != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsNews", r.isNews, "form", "")
	}
	if r.isKids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsKids", r.isKids, "form", "")
	}
	if r.isSports != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsSports", r.isSports, "form", "")
	}
	if r.mediaTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MediaTypes", r.mediaTypes, "form", "")
	}
	if r.imageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypes", r.imageTypes, "form", "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortBy", r.sortBy, "form", "")
	}
	if r.isPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsPlayed", r.isPlayed, "form", "")
	}
	if r.genres != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Genres", r.genres, "form", "")
	}
	if r.officialRatings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "OfficialRatings", r.officialRatings, "form", "")
	}
	if r.tags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tags", r.tags, "form", "")
	}
	if r.years != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Years", r.years, "form", "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "form", "")
	}
	if r.person != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Person", r.person, "form", "")
	}
	if r.personIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PersonIds", r.personIds, "form", "")
	}
	if r.personTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PersonTypes", r.personTypes, "form", "")
	}
	if r.studios != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Studios", r.studios, "form", "")
	}
	if r.studioIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StudioIds", r.studioIds, "form", "")
	}
	if r.artists != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Artists", r.artists, "form", "")
	}
	if r.artistIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ArtistIds", r.artistIds, "form", "")
	}
	if r.albums != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Albums", r.albums, "form", "")
	}
	if r.ids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Ids", r.ids, "form", "")
	}
	if r.videoTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoTypes", r.videoTypes, "form", "")
	}
	if r.containers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Containers", r.containers, "form", "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "form", "")
	}
	if r.minOfficialRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinOfficialRating", r.minOfficialRating, "form", "")
	}
	if r.isLocked != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsLocked", r.isLocked, "form", "")
	}
	if r.isPlaceHolder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsPlaceHolder", r.isPlaceHolder, "form", "")
	}
	if r.hasOfficialRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasOfficialRating", r.hasOfficialRating, "form", "")
	}
	if r.collapseBoxSetItems != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CollapseBoxSetItems", r.collapseBoxSetItems, "form", "")
	}
	if r.is3D != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Is3D", r.is3D, "form", "")
	}
	if r.seriesStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SeriesStatus", r.seriesStatus, "form", "")
	}
	if r.nameStartsWithOrGreater != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "NameStartsWithOrGreater", r.nameStartsWithOrGreater, "form", "")
	}
	if r.nameStartsWith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "NameStartsWith", r.nameStartsWith, "form", "")
	}
	if r.nameLessThan != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "NameLessThan", r.nameLessThan, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "ReportView", r.reportView, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "DisplayType", r.displayType, "form", "")
	if r.hasQueryLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasQueryLimit", r.hasQueryLimit, "form", "")
	}
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "GroupBy", r.groupBy, "form", "")
	}
	if r.reportColumns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ReportColumns", r.reportColumns, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetReportsItemsDownloadRequest struct {
	ctx context.Context
	ApiService ReportsServiceAPI
	reportView *string
	displayType *string
	maxOfficialRating *string
	hasThemeSong *bool
	hasThemeVideo *bool
	hasSubtitles *bool
	hasSpecialFeature *bool
	hasTrailer *bool
	adjacentTo *string
	minIndexNumber *int32
	minPlayers *int32
	maxPlayers *int32
	parentIndexNumber *int32
	hasParentalRating *bool
	isHD *bool
	locationTypes *string
	excludeLocationTypes *string
	isMissing *bool
	isUnaired *bool
	minCommunityRating *float64
	minCriticRating *float64
	airedDuringSeason *int32
	minPremiereDate *string
	minDateLastSaved *string
	minDateLastSavedForUser *string
	maxPremiereDate *string
	hasOverview *bool
	hasImdbId *bool
	hasTmdbId *bool
	hasTvdbId *bool
	excludeItemIds *string
	startIndex *int32
	limit *int32
	recursive *bool
	sortOrder *string
	parentId *string
	fields *string
	excludeItemTypes *string
	includeItemTypes *string
	filters *string
	isFavorite *bool
	isMovie *bool
	isSeries *bool
	isNews *bool
	isKids *bool
	isSports *bool
	mediaTypes *string
	imageTypes *string
	sortBy *string
	isPlayed *bool
	genres *string
	officialRatings *string
	tags *string
	years *string
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *string
	person *string
	personIds *string
	personTypes *string
	studios *string
	studioIds *string
	artists *string
	artistIds *string
	albums *string
	ids *string
	videoTypes *string
	containers *string
	userId *string
	minOfficialRating *string
	isLocked *bool
	isPlaceHolder *bool
	hasOfficialRating *bool
	collapseBoxSetItems *bool
	is3D *bool
	seriesStatus *string
	nameStartsWithOrGreater *string
	nameStartsWith *string
	nameLessThan *string
	hasQueryLimit *bool
	groupBy *string
	reportColumns *string
}

// The report view. Values (ReportData, ReportActivities)
func (r ApiGetReportsItemsDownloadRequest) ReportView(reportView string) ApiGetReportsItemsDownloadRequest {
	r.reportView = &reportView
	return r
}

// The report display type. Values (None, Screen, Export, ScreenExport)
func (r ApiGetReportsItemsDownloadRequest) DisplayType(displayType string) ApiGetReportsItemsDownloadRequest {
	r.displayType = &displayType
	return r
}

// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
func (r ApiGetReportsItemsDownloadRequest) MaxOfficialRating(maxOfficialRating string) ApiGetReportsItemsDownloadRequest {
	r.maxOfficialRating = &maxOfficialRating
	return r
}

// Optional filter by items with theme songs.
func (r ApiGetReportsItemsDownloadRequest) HasThemeSong(hasThemeSong bool) ApiGetReportsItemsDownloadRequest {
	r.hasThemeSong = &hasThemeSong
	return r
}

// Optional filter by items with theme videos.
func (r ApiGetReportsItemsDownloadRequest) HasThemeVideo(hasThemeVideo bool) ApiGetReportsItemsDownloadRequest {
	r.hasThemeVideo = &hasThemeVideo
	return r
}

// Optional filter by items with subtitles.
func (r ApiGetReportsItemsDownloadRequest) HasSubtitles(hasSubtitles bool) ApiGetReportsItemsDownloadRequest {
	r.hasSubtitles = &hasSubtitles
	return r
}

// Optional filter by items with special features.
func (r ApiGetReportsItemsDownloadRequest) HasSpecialFeature(hasSpecialFeature bool) ApiGetReportsItemsDownloadRequest {
	r.hasSpecialFeature = &hasSpecialFeature
	return r
}

// Optional filter by items with trailers.
func (r ApiGetReportsItemsDownloadRequest) HasTrailer(hasTrailer bool) ApiGetReportsItemsDownloadRequest {
	r.hasTrailer = &hasTrailer
	return r
}

// Optional. Return items that are siblings of a supplied item.
func (r ApiGetReportsItemsDownloadRequest) AdjacentTo(adjacentTo string) ApiGetReportsItemsDownloadRequest {
	r.adjacentTo = &adjacentTo
	return r
}

// Optional filter by minimum index number.
func (r ApiGetReportsItemsDownloadRequest) MinIndexNumber(minIndexNumber int32) ApiGetReportsItemsDownloadRequest {
	r.minIndexNumber = &minIndexNumber
	return r
}

// Optional filter by minimum number of game players.
func (r ApiGetReportsItemsDownloadRequest) MinPlayers(minPlayers int32) ApiGetReportsItemsDownloadRequest {
	r.minPlayers = &minPlayers
	return r
}

// Optional filter by maximum number of game players.
func (r ApiGetReportsItemsDownloadRequest) MaxPlayers(maxPlayers int32) ApiGetReportsItemsDownloadRequest {
	r.maxPlayers = &maxPlayers
	return r
}

// Optional filter by parent index number.
func (r ApiGetReportsItemsDownloadRequest) ParentIndexNumber(parentIndexNumber int32) ApiGetReportsItemsDownloadRequest {
	r.parentIndexNumber = &parentIndexNumber
	return r
}

// Optional filter by items that have or do not have a parental rating
func (r ApiGetReportsItemsDownloadRequest) HasParentalRating(hasParentalRating bool) ApiGetReportsItemsDownloadRequest {
	r.hasParentalRating = &hasParentalRating
	return r
}

// Optional filter by items that are HD or not.
func (r ApiGetReportsItemsDownloadRequest) IsHD(isHD bool) ApiGetReportsItemsDownloadRequest {
	r.isHD = &isHD
	return r
}

// Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
func (r ApiGetReportsItemsDownloadRequest) LocationTypes(locationTypes string) ApiGetReportsItemsDownloadRequest {
	r.locationTypes = &locationTypes
	return r
}

// Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
func (r ApiGetReportsItemsDownloadRequest) ExcludeLocationTypes(excludeLocationTypes string) ApiGetReportsItemsDownloadRequest {
	r.excludeLocationTypes = &excludeLocationTypes
	return r
}

// Optional filter by items that are missing episodes or not.
func (r ApiGetReportsItemsDownloadRequest) IsMissing(isMissing bool) ApiGetReportsItemsDownloadRequest {
	r.isMissing = &isMissing
	return r
}

// Optional filter by items that are unaired episodes or not.
func (r ApiGetReportsItemsDownloadRequest) IsUnaired(isUnaired bool) ApiGetReportsItemsDownloadRequest {
	r.isUnaired = &isUnaired
	return r
}

// Optional filter by minimum community rating.
func (r ApiGetReportsItemsDownloadRequest) MinCommunityRating(minCommunityRating float64) ApiGetReportsItemsDownloadRequest {
	r.minCommunityRating = &minCommunityRating
	return r
}

// Optional filter by minimum critic rating.
func (r ApiGetReportsItemsDownloadRequest) MinCriticRating(minCriticRating float64) ApiGetReportsItemsDownloadRequest {
	r.minCriticRating = &minCriticRating
	return r
}

// Gets all episodes that aired during a season, including specials.
func (r ApiGetReportsItemsDownloadRequest) AiredDuringSeason(airedDuringSeason int32) ApiGetReportsItemsDownloadRequest {
	r.airedDuringSeason = &airedDuringSeason
	return r
}

// Optional. The minimum premiere date. Format &#x3D; ISO
func (r ApiGetReportsItemsDownloadRequest) MinPremiereDate(minPremiereDate string) ApiGetReportsItemsDownloadRequest {
	r.minPremiereDate = &minPremiereDate
	return r
}

// Optional. The minimum premiere date. Format &#x3D; ISO
func (r ApiGetReportsItemsDownloadRequest) MinDateLastSaved(minDateLastSaved string) ApiGetReportsItemsDownloadRequest {
	r.minDateLastSaved = &minDateLastSaved
	return r
}

// Optional. The minimum premiere date. Format &#x3D; ISO
func (r ApiGetReportsItemsDownloadRequest) MinDateLastSavedForUser(minDateLastSavedForUser string) ApiGetReportsItemsDownloadRequest {
	r.minDateLastSavedForUser = &minDateLastSavedForUser
	return r
}

// Optional. The maximum premiere date. Format &#x3D; ISO
func (r ApiGetReportsItemsDownloadRequest) MaxPremiereDate(maxPremiereDate string) ApiGetReportsItemsDownloadRequest {
	r.maxPremiereDate = &maxPremiereDate
	return r
}

// Optional filter by items that have an overview or not.
func (r ApiGetReportsItemsDownloadRequest) HasOverview(hasOverview bool) ApiGetReportsItemsDownloadRequest {
	r.hasOverview = &hasOverview
	return r
}

// Optional filter by items that have an imdb id or not.
func (r ApiGetReportsItemsDownloadRequest) HasImdbId(hasImdbId bool) ApiGetReportsItemsDownloadRequest {
	r.hasImdbId = &hasImdbId
	return r
}

// Optional filter by items that have a tmdb id or not.
func (r ApiGetReportsItemsDownloadRequest) HasTmdbId(hasTmdbId bool) ApiGetReportsItemsDownloadRequest {
	r.hasTmdbId = &hasTmdbId
	return r
}

// Optional filter by items that have a tvdb id or not.
func (r ApiGetReportsItemsDownloadRequest) HasTvdbId(hasTvdbId bool) ApiGetReportsItemsDownloadRequest {
	r.hasTvdbId = &hasTvdbId
	return r
}

// Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
func (r ApiGetReportsItemsDownloadRequest) ExcludeItemIds(excludeItemIds string) ApiGetReportsItemsDownloadRequest {
	r.excludeItemIds = &excludeItemIds
	return r
}

// Optional. The record index to start at. All items with a lower index will be dropped from the results.
func (r ApiGetReportsItemsDownloadRequest) StartIndex(startIndex int32) ApiGetReportsItemsDownloadRequest {
	r.startIndex = &startIndex
	return r
}

// Optional. The maximum number of records to return
func (r ApiGetReportsItemsDownloadRequest) Limit(limit int32) ApiGetReportsItemsDownloadRequest {
	r.limit = &limit
	return r
}

// When searching within folders, this determines whether or not the search will be recursive. true/false
func (r ApiGetReportsItemsDownloadRequest) Recursive(recursive bool) ApiGetReportsItemsDownloadRequest {
	r.recursive = &recursive
	return r
}

// Sort Order - Ascending,Descending
func (r ApiGetReportsItemsDownloadRequest) SortOrder(sortOrder string) ApiGetReportsItemsDownloadRequest {
	r.sortOrder = &sortOrder
	return r
}

// Specify this to localize the search to a specific item or folder. Omit to use the root
func (r ApiGetReportsItemsDownloadRequest) ParentId(parentId string) ApiGetReportsItemsDownloadRequest {
	r.parentId = &parentId
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
func (r ApiGetReportsItemsDownloadRequest) Fields(fields string) ApiGetReportsItemsDownloadRequest {
	r.fields = &fields
	return r
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r ApiGetReportsItemsDownloadRequest) ExcludeItemTypes(excludeItemTypes string) ApiGetReportsItemsDownloadRequest {
	r.excludeItemTypes = &excludeItemTypes
	return r
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r ApiGetReportsItemsDownloadRequest) IncludeItemTypes(includeItemTypes string) ApiGetReportsItemsDownloadRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
func (r ApiGetReportsItemsDownloadRequest) Filters(filters string) ApiGetReportsItemsDownloadRequest {
	r.filters = &filters
	return r
}

// Optional filter by items that are marked as favorite, or not.
func (r ApiGetReportsItemsDownloadRequest) IsFavorite(isFavorite bool) ApiGetReportsItemsDownloadRequest {
	r.isFavorite = &isFavorite
	return r
}

// Optional filter for movies.
func (r ApiGetReportsItemsDownloadRequest) IsMovie(isMovie bool) ApiGetReportsItemsDownloadRequest {
	r.isMovie = &isMovie
	return r
}

// Optional filter for movies.
func (r ApiGetReportsItemsDownloadRequest) IsSeries(isSeries bool) ApiGetReportsItemsDownloadRequest {
	r.isSeries = &isSeries
	return r
}

// Optional filter for news.
func (r ApiGetReportsItemsDownloadRequest) IsNews(isNews bool) ApiGetReportsItemsDownloadRequest {
	r.isNews = &isNews
	return r
}

// Optional filter for kids.
func (r ApiGetReportsItemsDownloadRequest) IsKids(isKids bool) ApiGetReportsItemsDownloadRequest {
	r.isKids = &isKids
	return r
}

// Optional filter for sports.
func (r ApiGetReportsItemsDownloadRequest) IsSports(isSports bool) ApiGetReportsItemsDownloadRequest {
	r.isSports = &isSports
	return r
}

// Optional filter by MediaType. Allows multiple, comma delimited.
func (r ApiGetReportsItemsDownloadRequest) MediaTypes(mediaTypes string) ApiGetReportsItemsDownloadRequest {
	r.mediaTypes = &mediaTypes
	return r
}

// Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
func (r ApiGetReportsItemsDownloadRequest) ImageTypes(imageTypes string) ApiGetReportsItemsDownloadRequest {
	r.imageTypes = &imageTypes
	return r
}

// Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
func (r ApiGetReportsItemsDownloadRequest) SortBy(sortBy string) ApiGetReportsItemsDownloadRequest {
	r.sortBy = &sortBy
	return r
}

// Optional filter by items that are played, or not.
func (r ApiGetReportsItemsDownloadRequest) IsPlayed(isPlayed bool) ApiGetReportsItemsDownloadRequest {
	r.isPlayed = &isPlayed
	return r
}

// Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
func (r ApiGetReportsItemsDownloadRequest) Genres(genres string) ApiGetReportsItemsDownloadRequest {
	r.genres = &genres
	return r
}

// Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
func (r ApiGetReportsItemsDownloadRequest) OfficialRatings(officialRatings string) ApiGetReportsItemsDownloadRequest {
	r.officialRatings = &officialRatings
	return r
}

// Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
func (r ApiGetReportsItemsDownloadRequest) Tags(tags string) ApiGetReportsItemsDownloadRequest {
	r.tags = &tags
	return r
}

// Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
func (r ApiGetReportsItemsDownloadRequest) Years(years string) ApiGetReportsItemsDownloadRequest {
	r.years = &years
	return r
}

// Optional, include image information in output
func (r ApiGetReportsItemsDownloadRequest) EnableImages(enableImages bool) ApiGetReportsItemsDownloadRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, include user data
func (r ApiGetReportsItemsDownloadRequest) EnableUserData(enableUserData bool) ApiGetReportsItemsDownloadRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional, the max number of images to return, per image type
func (r ApiGetReportsItemsDownloadRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetReportsItemsDownloadRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetReportsItemsDownloadRequest) EnableImageTypes(enableImageTypes string) ApiGetReportsItemsDownloadRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional. If specified, results will be filtered to include only those containing the specified person.
func (r ApiGetReportsItemsDownloadRequest) Person(person string) ApiGetReportsItemsDownloadRequest {
	r.person = &person
	return r
}

// Optional. If specified, results will be filtered to include only those containing the specified person.
func (r ApiGetReportsItemsDownloadRequest) PersonIds(personIds string) ApiGetReportsItemsDownloadRequest {
	r.personIds = &personIds
	return r
}

// Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
func (r ApiGetReportsItemsDownloadRequest) PersonTypes(personTypes string) ApiGetReportsItemsDownloadRequest {
	r.personTypes = &personTypes
	return r
}

// Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
func (r ApiGetReportsItemsDownloadRequest) Studios(studios string) ApiGetReportsItemsDownloadRequest {
	r.studios = &studios
	return r
}

// Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
func (r ApiGetReportsItemsDownloadRequest) StudioIds(studioIds string) ApiGetReportsItemsDownloadRequest {
	r.studioIds = &studioIds
	return r
}

// Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
func (r ApiGetReportsItemsDownloadRequest) Artists(artists string) ApiGetReportsItemsDownloadRequest {
	r.artists = &artists
	return r
}

// Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
func (r ApiGetReportsItemsDownloadRequest) ArtistIds(artistIds string) ApiGetReportsItemsDownloadRequest {
	r.artistIds = &artistIds
	return r
}

// Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
func (r ApiGetReportsItemsDownloadRequest) Albums(albums string) ApiGetReportsItemsDownloadRequest {
	r.albums = &albums
	return r
}

// Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited.
func (r ApiGetReportsItemsDownloadRequest) Ids(ids string) ApiGetReportsItemsDownloadRequest {
	r.ids = &ids
	return r
}

// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
func (r ApiGetReportsItemsDownloadRequest) VideoTypes(videoTypes string) ApiGetReportsItemsDownloadRequest {
	r.videoTypes = &videoTypes
	return r
}

// Optional filter by Container. Allows multiple, comma delimeted.
func (r ApiGetReportsItemsDownloadRequest) Containers(containers string) ApiGetReportsItemsDownloadRequest {
	r.containers = &containers
	return r
}

// User Id
func (r ApiGetReportsItemsDownloadRequest) UserId(userId string) ApiGetReportsItemsDownloadRequest {
	r.userId = &userId
	return r
}

// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
func (r ApiGetReportsItemsDownloadRequest) MinOfficialRating(minOfficialRating string) ApiGetReportsItemsDownloadRequest {
	r.minOfficialRating = &minOfficialRating
	return r
}

// Optional filter by items that are locked.
func (r ApiGetReportsItemsDownloadRequest) IsLocked(isLocked bool) ApiGetReportsItemsDownloadRequest {
	r.isLocked = &isLocked
	return r
}

// Optional filter by items that are placeholders
func (r ApiGetReportsItemsDownloadRequest) IsPlaceHolder(isPlaceHolder bool) ApiGetReportsItemsDownloadRequest {
	r.isPlaceHolder = &isPlaceHolder
	return r
}

// Optional filter by items that have official ratings
func (r ApiGetReportsItemsDownloadRequest) HasOfficialRating(hasOfficialRating bool) ApiGetReportsItemsDownloadRequest {
	r.hasOfficialRating = &hasOfficialRating
	return r
}

// Whether or not to hide items behind their boxsets.
func (r ApiGetReportsItemsDownloadRequest) CollapseBoxSetItems(collapseBoxSetItems bool) ApiGetReportsItemsDownloadRequest {
	r.collapseBoxSetItems = &collapseBoxSetItems
	return r
}

// Optional filter by items that are 3D, or not.
func (r ApiGetReportsItemsDownloadRequest) Is3D(is3D bool) ApiGetReportsItemsDownloadRequest {
	r.is3D = &is3D
	return r
}

// Optional filter by Series Status. Allows multiple, comma delimeted.
func (r ApiGetReportsItemsDownloadRequest) SeriesStatus(seriesStatus string) ApiGetReportsItemsDownloadRequest {
	r.seriesStatus = &seriesStatus
	return r
}

// Optional filter by items whose name is sorted equally or greater than a given input string.
func (r ApiGetReportsItemsDownloadRequest) NameStartsWithOrGreater(nameStartsWithOrGreater string) ApiGetReportsItemsDownloadRequest {
	r.nameStartsWithOrGreater = &nameStartsWithOrGreater
	return r
}

// Optional filter by items whose name is sorted equally than a given input string.
func (r ApiGetReportsItemsDownloadRequest) NameStartsWith(nameStartsWith string) ApiGetReportsItemsDownloadRequest {
	r.nameStartsWith = &nameStartsWith
	return r
}

// Optional filter by items whose name is equally or lesser than a given input string.
func (r ApiGetReportsItemsDownloadRequest) NameLessThan(nameLessThan string) ApiGetReportsItemsDownloadRequest {
	r.nameLessThan = &nameLessThan
	return r
}

// Optional. If specified, results will include all records.
func (r ApiGetReportsItemsDownloadRequest) HasQueryLimit(hasQueryLimit bool) ApiGetReportsItemsDownloadRequest {
	r.hasQueryLimit = &hasQueryLimit
	return r
}

// Optional. If specified, results will include grouped records.
func (r ApiGetReportsItemsDownloadRequest) GroupBy(groupBy string) ApiGetReportsItemsDownloadRequest {
	r.groupBy = &groupBy
	return r
}

// Optional. The columns to show.
func (r ApiGetReportsItemsDownloadRequest) ReportColumns(reportColumns string) ApiGetReportsItemsDownloadRequest {
	r.reportColumns = &reportColumns
	return r
}

func (r ApiGetReportsItemsDownloadRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetReportsItemsDownloadExecute(r)
}

/*
GetReportsItemsDownload Downloads report

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetReportsItemsDownloadRequest
*/
func (a *ReportsServiceAPIService) GetReportsItemsDownload(ctx context.Context) ApiGetReportsItemsDownloadRequest {
	return ApiGetReportsItemsDownloadRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ReportsServiceAPIService) GetReportsItemsDownloadExecute(r ApiGetReportsItemsDownloadRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsServiceAPIService.GetReportsItemsDownload")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Reports/Items/Download"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.reportView == nil {
		return nil, reportError("reportView is required and must be specified")
	}
	if r.displayType == nil {
		return nil, reportError("displayType is required and must be specified")
	}

	if r.maxOfficialRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxOfficialRating", r.maxOfficialRating, "form", "")
	}
	if r.hasThemeSong != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasThemeSong", r.hasThemeSong, "form", "")
	}
	if r.hasThemeVideo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasThemeVideo", r.hasThemeVideo, "form", "")
	}
	if r.hasSubtitles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasSubtitles", r.hasSubtitles, "form", "")
	}
	if r.hasSpecialFeature != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasSpecialFeature", r.hasSpecialFeature, "form", "")
	}
	if r.hasTrailer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasTrailer", r.hasTrailer, "form", "")
	}
	if r.adjacentTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AdjacentTo", r.adjacentTo, "form", "")
	}
	if r.minIndexNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinIndexNumber", r.minIndexNumber, "form", "")
	}
	if r.minPlayers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinPlayers", r.minPlayers, "form", "")
	}
	if r.maxPlayers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxPlayers", r.maxPlayers, "form", "")
	}
	if r.parentIndexNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ParentIndexNumber", r.parentIndexNumber, "form", "")
	}
	if r.hasParentalRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasParentalRating", r.hasParentalRating, "form", "")
	}
	if r.isHD != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsHD", r.isHD, "form", "")
	}
	if r.locationTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "LocationTypes", r.locationTypes, "form", "")
	}
	if r.excludeLocationTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ExcludeLocationTypes", r.excludeLocationTypes, "form", "")
	}
	if r.isMissing != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsMissing", r.isMissing, "form", "")
	}
	if r.isUnaired != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsUnaired", r.isUnaired, "form", "")
	}
	if r.minCommunityRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinCommunityRating", r.minCommunityRating, "form", "")
	}
	if r.minCriticRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinCriticRating", r.minCriticRating, "form", "")
	}
	if r.airedDuringSeason != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AiredDuringSeason", r.airedDuringSeason, "form", "")
	}
	if r.minPremiereDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinPremiereDate", r.minPremiereDate, "form", "")
	}
	if r.minDateLastSaved != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinDateLastSaved", r.minDateLastSaved, "form", "")
	}
	if r.minDateLastSavedForUser != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinDateLastSavedForUser", r.minDateLastSavedForUser, "form", "")
	}
	if r.maxPremiereDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxPremiereDate", r.maxPremiereDate, "form", "")
	}
	if r.hasOverview != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasOverview", r.hasOverview, "form", "")
	}
	if r.hasImdbId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasImdbId", r.hasImdbId, "form", "")
	}
	if r.hasTmdbId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasTmdbId", r.hasTmdbId, "form", "")
	}
	if r.hasTvdbId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasTvdbId", r.hasTvdbId, "form", "")
	}
	if r.excludeItemIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ExcludeItemIds", r.excludeItemIds, "form", "")
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartIndex", r.startIndex, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "form", "")
	}
	if r.recursive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Recursive", r.recursive, "form", "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortOrder", r.sortOrder, "form", "")
	}
	if r.parentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ParentId", r.parentId, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "form", "")
	}
	if r.excludeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ExcludeItemTypes", r.excludeItemTypes, "form", "")
	}
	if r.includeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeItemTypes", r.includeItemTypes, "form", "")
	}
	if r.filters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Filters", r.filters, "form", "")
	}
	if r.isFavorite != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsFavorite", r.isFavorite, "form", "")
	}
	if r.isMovie != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsMovie", r.isMovie, "form", "")
	}
	if r.isSeries != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsSeries", r.isSeries, "form", "")
	}
	if r.isNews != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsNews", r.isNews, "form", "")
	}
	if r.isKids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsKids", r.isKids, "form", "")
	}
	if r.isSports != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsSports", r.isSports, "form", "")
	}
	if r.mediaTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MediaTypes", r.mediaTypes, "form", "")
	}
	if r.imageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypes", r.imageTypes, "form", "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortBy", r.sortBy, "form", "")
	}
	if r.isPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsPlayed", r.isPlayed, "form", "")
	}
	if r.genres != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Genres", r.genres, "form", "")
	}
	if r.officialRatings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "OfficialRatings", r.officialRatings, "form", "")
	}
	if r.tags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Tags", r.tags, "form", "")
	}
	if r.years != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Years", r.years, "form", "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "form", "")
	}
	if r.person != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Person", r.person, "form", "")
	}
	if r.personIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PersonIds", r.personIds, "form", "")
	}
	if r.personTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PersonTypes", r.personTypes, "form", "")
	}
	if r.studios != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Studios", r.studios, "form", "")
	}
	if r.studioIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StudioIds", r.studioIds, "form", "")
	}
	if r.artists != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Artists", r.artists, "form", "")
	}
	if r.artistIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ArtistIds", r.artistIds, "form", "")
	}
	if r.albums != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Albums", r.albums, "form", "")
	}
	if r.ids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Ids", r.ids, "form", "")
	}
	if r.videoTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoTypes", r.videoTypes, "form", "")
	}
	if r.containers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Containers", r.containers, "form", "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "form", "")
	}
	if r.minOfficialRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinOfficialRating", r.minOfficialRating, "form", "")
	}
	if r.isLocked != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsLocked", r.isLocked, "form", "")
	}
	if r.isPlaceHolder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsPlaceHolder", r.isPlaceHolder, "form", "")
	}
	if r.hasOfficialRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasOfficialRating", r.hasOfficialRating, "form", "")
	}
	if r.collapseBoxSetItems != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CollapseBoxSetItems", r.collapseBoxSetItems, "form", "")
	}
	if r.is3D != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Is3D", r.is3D, "form", "")
	}
	if r.seriesStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SeriesStatus", r.seriesStatus, "form", "")
	}
	if r.nameStartsWithOrGreater != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "NameStartsWithOrGreater", r.nameStartsWithOrGreater, "form", "")
	}
	if r.nameStartsWith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "NameStartsWith", r.nameStartsWith, "form", "")
	}
	if r.nameLessThan != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "NameLessThan", r.nameLessThan, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "ReportView", r.reportView, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "DisplayType", r.displayType, "form", "")
	if r.hasQueryLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "HasQueryLimit", r.hasQueryLimit, "form", "")
	}
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "GroupBy", r.groupBy, "form", "")
	}
	if r.reportColumns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ReportColumns", r.reportColumns, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
