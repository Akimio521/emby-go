/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type PlaylistServiceAPI interface {

	/*
	DeletePlaylistsByIdItems Removes items from a playlist

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiDeletePlaylistsByIdItemsRequest
	*/
	DeletePlaylistsByIdItems(ctx context.Context, id string) ApiDeletePlaylistsByIdItemsRequest

	// DeletePlaylistsByIdItemsExecute executes the request
	DeletePlaylistsByIdItemsExecute(r ApiDeletePlaylistsByIdItemsRequest) (*http.Response, error)

	/*
	GetPlaylistsByIdItems Gets the original items of a playlist

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiGetPlaylistsByIdItemsRequest
	*/
	GetPlaylistsByIdItems(ctx context.Context, id string) ApiGetPlaylistsByIdItemsRequest

	// GetPlaylistsByIdItemsExecute executes the request
	//  @return QueryResultBaseItemDto
	GetPlaylistsByIdItemsExecute(r ApiGetPlaylistsByIdItemsRequest) (*QueryResultBaseItemDto, *http.Response, error)

	/*
	PostPlaylists Creates a new playlist

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostPlaylistsRequest
	*/
	PostPlaylists(ctx context.Context) ApiPostPlaylistsRequest

	// PostPlaylistsExecute executes the request
	//  @return PlaylistsPlaylistCreationResult
	PostPlaylistsExecute(r ApiPostPlaylistsRequest) (*PlaylistsPlaylistCreationResult, *http.Response, error)

	/*
	PostPlaylistsByIdItems Adds items to a playlist

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiPostPlaylistsByIdItemsRequest
	*/
	PostPlaylistsByIdItems(ctx context.Context, id string) ApiPostPlaylistsByIdItemsRequest

	// PostPlaylistsByIdItemsExecute executes the request
	PostPlaylistsByIdItemsExecute(r ApiPostPlaylistsByIdItemsRequest) (*http.Response, error)

	/*
	PostPlaylistsByIdItemsByItemidMoveByNewindex Moves a playlist item

	Requires authentication as user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId ItemId
	@param id
	@param newIndex NewIndex
	@return ApiPostPlaylistsByIdItemsByItemidMoveByNewindexRequest
	*/
	PostPlaylistsByIdItemsByItemidMoveByNewindex(ctx context.Context, itemId int64, id string, newIndex int32) ApiPostPlaylistsByIdItemsByItemidMoveByNewindexRequest

	// PostPlaylistsByIdItemsByItemidMoveByNewindexExecute executes the request
	PostPlaylistsByIdItemsByItemidMoveByNewindexExecute(r ApiPostPlaylistsByIdItemsByItemidMoveByNewindexRequest) (*http.Response, error)
}

// PlaylistServiceAPIService PlaylistServiceAPI service
type PlaylistServiceAPIService service

type ApiDeletePlaylistsByIdItemsRequest struct {
	ctx context.Context
	ApiService PlaylistServiceAPI
	id string
	entryIds *string
}

func (r ApiDeletePlaylistsByIdItemsRequest) EntryIds(entryIds string) ApiDeletePlaylistsByIdItemsRequest {
	r.entryIds = &entryIds
	return r
}

func (r ApiDeletePlaylistsByIdItemsRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePlaylistsByIdItemsExecute(r)
}

/*
DeletePlaylistsByIdItems Removes items from a playlist

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiDeletePlaylistsByIdItemsRequest
*/
func (a *PlaylistServiceAPIService) DeletePlaylistsByIdItems(ctx context.Context, id string) ApiDeletePlaylistsByIdItemsRequest {
	return ApiDeletePlaylistsByIdItemsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *PlaylistServiceAPIService) DeletePlaylistsByIdItemsExecute(r ApiDeletePlaylistsByIdItemsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaylistServiceAPIService.DeletePlaylistsByIdItems")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Playlists/{Id}/Items"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.entryIds == nil {
		return nil, reportError("entryIds is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "EntryIds", r.entryIds, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetPlaylistsByIdItemsRequest struct {
	ctx context.Context
	ApiService PlaylistServiceAPI
	id string
	userId *string
	startIndex *int32
	limit *int32
	fields *string
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *string
}

// User Id
func (r ApiGetPlaylistsByIdItemsRequest) UserId(userId string) ApiGetPlaylistsByIdItemsRequest {
	r.userId = &userId
	return r
}

// Optional. The record index to start at. All items with a lower index will be dropped from the results.
func (r ApiGetPlaylistsByIdItemsRequest) StartIndex(startIndex int32) ApiGetPlaylistsByIdItemsRequest {
	r.startIndex = &startIndex
	return r
}

// Optional. The maximum number of records to return
func (r ApiGetPlaylistsByIdItemsRequest) Limit(limit int32) ApiGetPlaylistsByIdItemsRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
func (r ApiGetPlaylistsByIdItemsRequest) Fields(fields string) ApiGetPlaylistsByIdItemsRequest {
	r.fields = &fields
	return r
}

// Optional, include image information in output
func (r ApiGetPlaylistsByIdItemsRequest) EnableImages(enableImages bool) ApiGetPlaylistsByIdItemsRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, include user data
func (r ApiGetPlaylistsByIdItemsRequest) EnableUserData(enableUserData bool) ApiGetPlaylistsByIdItemsRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional, the max number of images to return, per image type
func (r ApiGetPlaylistsByIdItemsRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetPlaylistsByIdItemsRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetPlaylistsByIdItemsRequest) EnableImageTypes(enableImageTypes string) ApiGetPlaylistsByIdItemsRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

func (r ApiGetPlaylistsByIdItemsRequest) Execute() (*QueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetPlaylistsByIdItemsExecute(r)
}

/*
GetPlaylistsByIdItems Gets the original items of a playlist

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiGetPlaylistsByIdItemsRequest
*/
func (a *PlaylistServiceAPIService) GetPlaylistsByIdItems(ctx context.Context, id string) ApiGetPlaylistsByIdItemsRequest {
	return ApiGetPlaylistsByIdItemsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return QueryResultBaseItemDto
func (a *PlaylistServiceAPIService) GetPlaylistsByIdItemsExecute(r ApiGetPlaylistsByIdItemsRequest) (*QueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaylistServiceAPIService.GetPlaylistsByIdItems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Playlists/{Id}/Items"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "form", "")
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartIndex", r.startIndex, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "form", "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostPlaylistsRequest struct {
	ctx context.Context
	ApiService PlaylistServiceAPI
	name *string
	ids *string
	mediaType *string
}

// The name of the new playlist.
func (r ApiPostPlaylistsRequest) Name(name string) ApiPostPlaylistsRequest {
	r.name = &name
	return r
}

// Item Ids to add to the playlist
func (r ApiPostPlaylistsRequest) Ids(ids string) ApiPostPlaylistsRequest {
	r.ids = &ids
	return r
}

// The playlist media type
func (r ApiPostPlaylistsRequest) MediaType(mediaType string) ApiPostPlaylistsRequest {
	r.mediaType = &mediaType
	return r
}

func (r ApiPostPlaylistsRequest) Execute() (*PlaylistsPlaylistCreationResult, *http.Response, error) {
	return r.ApiService.PostPlaylistsExecute(r)
}

/*
PostPlaylists Creates a new playlist

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostPlaylistsRequest
*/
func (a *PlaylistServiceAPIService) PostPlaylists(ctx context.Context) ApiPostPlaylistsRequest {
	return ApiPostPlaylistsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PlaylistsPlaylistCreationResult
func (a *PlaylistServiceAPIService) PostPlaylistsExecute(r ApiPostPlaylistsRequest) (*PlaylistsPlaylistCreationResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PlaylistsPlaylistCreationResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaylistServiceAPIService.PostPlaylists")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Playlists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Name", r.name, "form", "")
	}
	if r.ids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Ids", r.ids, "form", "")
	}
	if r.mediaType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MediaType", r.mediaType, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostPlaylistsByIdItemsRequest struct {
	ctx context.Context
	ApiService PlaylistServiceAPI
	ids *string
	id string
	userId *string
}

// Item id, comma delimited
func (r ApiPostPlaylistsByIdItemsRequest) Ids(ids string) ApiPostPlaylistsByIdItemsRequest {
	r.ids = &ids
	return r
}

// User Id
func (r ApiPostPlaylistsByIdItemsRequest) UserId(userId string) ApiPostPlaylistsByIdItemsRequest {
	r.userId = &userId
	return r
}

func (r ApiPostPlaylistsByIdItemsRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostPlaylistsByIdItemsExecute(r)
}

/*
PostPlaylistsByIdItems Adds items to a playlist

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiPostPlaylistsByIdItemsRequest
*/
func (a *PlaylistServiceAPIService) PostPlaylistsByIdItems(ctx context.Context, id string) ApiPostPlaylistsByIdItemsRequest {
	return ApiPostPlaylistsByIdItemsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *PlaylistServiceAPIService) PostPlaylistsByIdItemsExecute(r ApiPostPlaylistsByIdItemsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaylistServiceAPIService.PostPlaylistsByIdItems")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Playlists/{Id}/Items"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ids == nil {
		return nil, reportError("ids is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Ids", r.ids, "form", "")
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostPlaylistsByIdItemsByItemidMoveByNewindexRequest struct {
	ctx context.Context
	ApiService PlaylistServiceAPI
	itemId int64
	id string
	newIndex int32
}

func (r ApiPostPlaylistsByIdItemsByItemidMoveByNewindexRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostPlaylistsByIdItemsByItemidMoveByNewindexExecute(r)
}

/*
PostPlaylistsByIdItemsByItemidMoveByNewindex Moves a playlist item

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId ItemId
 @param id
 @param newIndex NewIndex
 @return ApiPostPlaylistsByIdItemsByItemidMoveByNewindexRequest
*/
func (a *PlaylistServiceAPIService) PostPlaylistsByIdItemsByItemidMoveByNewindex(ctx context.Context, itemId int64, id string, newIndex int32) ApiPostPlaylistsByIdItemsByItemidMoveByNewindexRequest {
	return ApiPostPlaylistsByIdItemsByItemidMoveByNewindexRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
		id: id,
		newIndex: newIndex,
	}
}

// Execute executes the request
func (a *PlaylistServiceAPIService) PostPlaylistsByIdItemsByItemidMoveByNewindexExecute(r ApiPostPlaylistsByIdItemsByItemidMoveByNewindexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaylistServiceAPIService.PostPlaylistsByIdItemsByItemidMoveByNewindex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Playlists/{Id}/Items/{ItemId}/Move/{NewIndex}"
	localVarPath = strings.Replace(localVarPath, "{"+"ItemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"NewIndex"+"}", url.PathEscape(parameterValueToString(r.newIndex, "newIndex")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
