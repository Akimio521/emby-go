/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the GlobalizationCultureDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GlobalizationCultureDto{}

// GlobalizationCultureDto struct for GlobalizationCultureDto
type GlobalizationCultureDto struct {
	Name *string `json:"Name,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty"`
	TwoLetterISOLanguageName *string `json:"TwoLetterISOLanguageName,omitempty"`
	ThreeLetterISOLanguageName *string `json:"ThreeLetterISOLanguageName,omitempty"`
	ThreeLetterISOLanguageNames []string `json:"ThreeLetterISOLanguageNames,omitempty"`
}

// NewGlobalizationCultureDto instantiates a new GlobalizationCultureDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalizationCultureDto() *GlobalizationCultureDto {
	this := GlobalizationCultureDto{}
	return &this
}

// NewGlobalizationCultureDtoWithDefaults instantiates a new GlobalizationCultureDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalizationCultureDtoWithDefaults() *GlobalizationCultureDto {
	this := GlobalizationCultureDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GlobalizationCultureDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalizationCultureDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GlobalizationCultureDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GlobalizationCultureDto) SetName(v string) {
	o.Name = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *GlobalizationCultureDto) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalizationCultureDto) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *GlobalizationCultureDto) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *GlobalizationCultureDto) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetTwoLetterISOLanguageName returns the TwoLetterISOLanguageName field value if set, zero value otherwise.
func (o *GlobalizationCultureDto) GetTwoLetterISOLanguageName() string {
	if o == nil || IsNil(o.TwoLetterISOLanguageName) {
		var ret string
		return ret
	}
	return *o.TwoLetterISOLanguageName
}

// GetTwoLetterISOLanguageNameOk returns a tuple with the TwoLetterISOLanguageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalizationCultureDto) GetTwoLetterISOLanguageNameOk() (*string, bool) {
	if o == nil || IsNil(o.TwoLetterISOLanguageName) {
		return nil, false
	}
	return o.TwoLetterISOLanguageName, true
}

// HasTwoLetterISOLanguageName returns a boolean if a field has been set.
func (o *GlobalizationCultureDto) HasTwoLetterISOLanguageName() bool {
	if o != nil && !IsNil(o.TwoLetterISOLanguageName) {
		return true
	}

	return false
}

// SetTwoLetterISOLanguageName gets a reference to the given string and assigns it to the TwoLetterISOLanguageName field.
func (o *GlobalizationCultureDto) SetTwoLetterISOLanguageName(v string) {
	o.TwoLetterISOLanguageName = &v
}

// GetThreeLetterISOLanguageName returns the ThreeLetterISOLanguageName field value if set, zero value otherwise.
func (o *GlobalizationCultureDto) GetThreeLetterISOLanguageName() string {
	if o == nil || IsNil(o.ThreeLetterISOLanguageName) {
		var ret string
		return ret
	}
	return *o.ThreeLetterISOLanguageName
}

// GetThreeLetterISOLanguageNameOk returns a tuple with the ThreeLetterISOLanguageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalizationCultureDto) GetThreeLetterISOLanguageNameOk() (*string, bool) {
	if o == nil || IsNil(o.ThreeLetterISOLanguageName) {
		return nil, false
	}
	return o.ThreeLetterISOLanguageName, true
}

// HasThreeLetterISOLanguageName returns a boolean if a field has been set.
func (o *GlobalizationCultureDto) HasThreeLetterISOLanguageName() bool {
	if o != nil && !IsNil(o.ThreeLetterISOLanguageName) {
		return true
	}

	return false
}

// SetThreeLetterISOLanguageName gets a reference to the given string and assigns it to the ThreeLetterISOLanguageName field.
func (o *GlobalizationCultureDto) SetThreeLetterISOLanguageName(v string) {
	o.ThreeLetterISOLanguageName = &v
}

// GetThreeLetterISOLanguageNames returns the ThreeLetterISOLanguageNames field value if set, zero value otherwise.
func (o *GlobalizationCultureDto) GetThreeLetterISOLanguageNames() []string {
	if o == nil || IsNil(o.ThreeLetterISOLanguageNames) {
		var ret []string
		return ret
	}
	return o.ThreeLetterISOLanguageNames
}

// GetThreeLetterISOLanguageNamesOk returns a tuple with the ThreeLetterISOLanguageNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalizationCultureDto) GetThreeLetterISOLanguageNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.ThreeLetterISOLanguageNames) {
		return nil, false
	}
	return o.ThreeLetterISOLanguageNames, true
}

// HasThreeLetterISOLanguageNames returns a boolean if a field has been set.
func (o *GlobalizationCultureDto) HasThreeLetterISOLanguageNames() bool {
	if o != nil && !IsNil(o.ThreeLetterISOLanguageNames) {
		return true
	}

	return false
}

// SetThreeLetterISOLanguageNames gets a reference to the given []string and assigns it to the ThreeLetterISOLanguageNames field.
func (o *GlobalizationCultureDto) SetThreeLetterISOLanguageNames(v []string) {
	o.ThreeLetterISOLanguageNames = v
}

func (o GlobalizationCultureDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GlobalizationCultureDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.DisplayName) {
		toSerialize["DisplayName"] = o.DisplayName
	}
	if !IsNil(o.TwoLetterISOLanguageName) {
		toSerialize["TwoLetterISOLanguageName"] = o.TwoLetterISOLanguageName
	}
	if !IsNil(o.ThreeLetterISOLanguageName) {
		toSerialize["ThreeLetterISOLanguageName"] = o.ThreeLetterISOLanguageName
	}
	if !IsNil(o.ThreeLetterISOLanguageNames) {
		toSerialize["ThreeLetterISOLanguageNames"] = o.ThreeLetterISOLanguageNames
	}
	return toSerialize, nil
}

type NullableGlobalizationCultureDto struct {
	value *GlobalizationCultureDto
	isSet bool
}

func (v NullableGlobalizationCultureDto) Get() *GlobalizationCultureDto {
	return v.value
}

func (v *NullableGlobalizationCultureDto) Set(val *GlobalizationCultureDto) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalizationCultureDto) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalizationCultureDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalizationCultureDto(val *GlobalizationCultureDto) *NullableGlobalizationCultureDto {
	return &NullableGlobalizationCultureDto{value: val, isSet: true}
}

func (v NullableGlobalizationCultureDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalizationCultureDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


