/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the DlnaProfileCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DlnaProfileCondition{}

// DlnaProfileCondition struct for DlnaProfileCondition
type DlnaProfileCondition struct {
	Condition *string `json:"Condition,omitempty"`
	Property *string `json:"Property,omitempty"`
	Value *string `json:"Value,omitempty"`
	IsRequired *bool `json:"IsRequired,omitempty"`
}

// NewDlnaProfileCondition instantiates a new DlnaProfileCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDlnaProfileCondition() *DlnaProfileCondition {
	this := DlnaProfileCondition{}
	return &this
}

// NewDlnaProfileConditionWithDefaults instantiates a new DlnaProfileCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDlnaProfileConditionWithDefaults() *DlnaProfileCondition {
	this := DlnaProfileCondition{}
	return &this
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *DlnaProfileCondition) GetCondition() string {
	if o == nil || IsNil(o.Condition) {
		var ret string
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaProfileCondition) GetConditionOk() (*string, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *DlnaProfileCondition) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given string and assigns it to the Condition field.
func (o *DlnaProfileCondition) SetCondition(v string) {
	o.Condition = &v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *DlnaProfileCondition) GetProperty() string {
	if o == nil || IsNil(o.Property) {
		var ret string
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaProfileCondition) GetPropertyOk() (*string, bool) {
	if o == nil || IsNil(o.Property) {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *DlnaProfileCondition) HasProperty() bool {
	if o != nil && !IsNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given string and assigns it to the Property field.
func (o *DlnaProfileCondition) SetProperty(v string) {
	o.Property = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DlnaProfileCondition) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaProfileCondition) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DlnaProfileCondition) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *DlnaProfileCondition) SetValue(v string) {
	o.Value = &v
}

// GetIsRequired returns the IsRequired field value if set, zero value otherwise.
func (o *DlnaProfileCondition) GetIsRequired() bool {
	if o == nil || IsNil(o.IsRequired) {
		var ret bool
		return ret
	}
	return *o.IsRequired
}

// GetIsRequiredOk returns a tuple with the IsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaProfileCondition) GetIsRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRequired) {
		return nil, false
	}
	return o.IsRequired, true
}

// HasIsRequired returns a boolean if a field has been set.
func (o *DlnaProfileCondition) HasIsRequired() bool {
	if o != nil && !IsNil(o.IsRequired) {
		return true
	}

	return false
}

// SetIsRequired gets a reference to the given bool and assigns it to the IsRequired field.
func (o *DlnaProfileCondition) SetIsRequired(v bool) {
	o.IsRequired = &v
}

func (o DlnaProfileCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DlnaProfileCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Condition) {
		toSerialize["Condition"] = o.Condition
	}
	if !IsNil(o.Property) {
		toSerialize["Property"] = o.Property
	}
	if !IsNil(o.Value) {
		toSerialize["Value"] = o.Value
	}
	if !IsNil(o.IsRequired) {
		toSerialize["IsRequired"] = o.IsRequired
	}
	return toSerialize, nil
}

type NullableDlnaProfileCondition struct {
	value *DlnaProfileCondition
	isSet bool
}

func (v NullableDlnaProfileCondition) Get() *DlnaProfileCondition {
	return v.value
}

func (v *NullableDlnaProfileCondition) Set(val *DlnaProfileCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableDlnaProfileCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableDlnaProfileCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDlnaProfileCondition(val *DlnaProfileCondition) *NullableDlnaProfileCondition {
	return &NullableDlnaProfileCondition{value: val, isSet: true}
}

func (v NullableDlnaProfileCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDlnaProfileCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


