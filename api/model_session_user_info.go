/*
Emby Server API

Explore the Emby Server API

API version: 4.1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the SessionUserInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SessionUserInfo{}

// SessionUserInfo struct for SessionUserInfo
type SessionUserInfo struct {
	UserId *string `json:"UserId,omitempty"`
	UserName *string `json:"UserName,omitempty"`
	UserInternalId *int64 `json:"UserInternalId,omitempty"`
}

// NewSessionUserInfo instantiates a new SessionUserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionUserInfo() *SessionUserInfo {
	this := SessionUserInfo{}
	return &this
}

// NewSessionUserInfoWithDefaults instantiates a new SessionUserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionUserInfoWithDefaults() *SessionUserInfo {
	this := SessionUserInfo{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *SessionUserInfo) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionUserInfo) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *SessionUserInfo) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *SessionUserInfo) SetUserId(v string) {
	o.UserId = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *SessionUserInfo) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionUserInfo) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *SessionUserInfo) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *SessionUserInfo) SetUserName(v string) {
	o.UserName = &v
}

// GetUserInternalId returns the UserInternalId field value if set, zero value otherwise.
func (o *SessionUserInfo) GetUserInternalId() int64 {
	if o == nil || IsNil(o.UserInternalId) {
		var ret int64
		return ret
	}
	return *o.UserInternalId
}

// GetUserInternalIdOk returns a tuple with the UserInternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionUserInfo) GetUserInternalIdOk() (*int64, bool) {
	if o == nil || IsNil(o.UserInternalId) {
		return nil, false
	}
	return o.UserInternalId, true
}

// HasUserInternalId returns a boolean if a field has been set.
func (o *SessionUserInfo) HasUserInternalId() bool {
	if o != nil && !IsNil(o.UserInternalId) {
		return true
	}

	return false
}

// SetUserInternalId gets a reference to the given int64 and assigns it to the UserInternalId field.
func (o *SessionUserInfo) SetUserInternalId(v int64) {
	o.UserInternalId = &v
}

func (o SessionUserInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SessionUserInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["UserId"] = o.UserId
	}
	if !IsNil(o.UserName) {
		toSerialize["UserName"] = o.UserName
	}
	if !IsNil(o.UserInternalId) {
		toSerialize["UserInternalId"] = o.UserInternalId
	}
	return toSerialize, nil
}

type NullableSessionUserInfo struct {
	value *SessionUserInfo
	isSet bool
}

func (v NullableSessionUserInfo) Get() *SessionUserInfo {
	return v.value
}

func (v *NullableSessionUserInfo) Set(val *SessionUserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionUserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionUserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionUserInfo(val *SessionUserInfo) *NullableSessionUserInfo {
	return &NullableSessionUserInfo{value: val, isSet: true}
}

func (v NullableSessionUserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionUserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


